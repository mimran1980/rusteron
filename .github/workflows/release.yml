name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type (major, minor, patch)"
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  release:
    timeout-minutes: 45
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y uuid-dev

      - name: Determine latest CI run ID
        id: find_ci
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              branch: context.ref.replace('refs/heads/',''),
              status: 'success',
              per_page: 1
            });
            if (!runs.data.workflow_runs.length) {
              core.setFailed('No successful CI runs found for this branch.');
            } else {
              const runId = runs.data.workflow_runs[0].id;
              core.setOutput('ci_run_id', runId);
              console.log(`‚úî Latest CI run ID is ${runId}`);
            }

      - name: Download all artifacts via CLI loop
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_RUN: ${{ steps.find_ci.outputs.ci_run_id }}
        run: |
          # define your list here:
          # artifacts=(artifacts-macos-13-static artifacts-macos-latest-static)
          artifacts=(artifacts-macos-latest-static artifacts-ubuntu-latest-static)

          for art in "${artifacts[@]}"; do
            echo "‚è¨ Downloading $art into artifacts/$art"
            gh run download "$CI_RUN" \
              --name "$art" \
              --dir "artifacts/$art"
          done
          find artifacts
          

      - name: Extract version
        id: extract_version
        run: |
          version=$(grep '"rusteron-code-gen", version = ' Cargo.toml | sed -E 's/.*version = "=([^"]+)".*/\1/g')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "found $version"
      - uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package artifacts
        shell: bash
        run: |
          # enable recursive globbing and skip missing
          shopt -s globstar nullglob
          for artifact_dir in artifacts/*; do
            [ -d "$artifact_dir" ] || continue
            archive="$artifact_dir.tar.gz"
            echo "üì¶ Creating archive $archive"
            tar -czf "$archive" -C artifacts "$(basename "$artifact_dir")"
          done

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          shopt -s nullglob
          for f in artifacts/*.tar.gz; do
            echo "‚è´ Uploading $f"
            gh release upload "v${{ steps.extract_version.outputs.version }}" "$f"
          done

#      - name: Cache cargo-release binary
#        uses: actions/cache@v4
#        with:
#          path: ~/.cargo/bin/cargo-release
#          key: cargo-release-${{ runner.os }}
#
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Test with artifacts
#        run: |
#          cargo test --features precompile,static --workspace -- --nocapture
#          git reset --hard HEAD
#          git clean -fdx
#
#
#      - name: Install cargo-release
#        run: cargo install cargo-release || true

#      - name: Run cargo-release for specified version
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#          CARGO_HTTP_MULTIPLEXING: false
#        run: |
#          git config --global user.email "mimran1980@gmail.com"
#          git config --global user.name "Mo Imran"
#          release_type="${{ github.event.inputs.release_type }}"
#          cargo release "$release_type" --workspace --execute --no-confirm --verbose --no-verify
#
#      - name: Push new version and tag to GitHub
#        uses: ad-m/github-push-action@v0.8.0
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          branch: main
#          tags: true
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Check docker example builds
#        run: |
#          cd rusteron-docker-samples
#          cargo update
#          docker build -t aeron-media-driver aeron-media-driver
#          docker build -t rusteron-dummy-example rusteron-dummy-example
