/* automatically generated by rust-bindgen 0.71.1 */

pub const AERON_NULL_VALUE: i32 = -1;
pub const AERON_CLIENT_ERROR_DRIVER_TIMEOUT: i32 = -1000;
pub const AERON_CLIENT_ERROR_CLIENT_TIMEOUT: i32 = -1001;
pub const AERON_CLIENT_ERROR_CONDUCTOR_SERVICE_TIMEOUT: i32 = -1002;
pub const AERON_CLIENT_ERROR_BUFFER_FULL: i32 = -1003;
pub const AERON_CLIENT_MAX_LOCAL_ADDRESS_STR_LEN: u32 = 64;
pub const AERON_DIR_ENV_VAR: &[u8; 10] = b"AERON_DIR\0";
pub const AERON_DRIVER_TIMEOUT_ENV_VAR: &[u8; 21] = b"AERON_DRIVER_TIMEOUT\0";
pub const AERON_CLIENT_RESOURCE_LINGER_DURATION_ENV_VAR: &[u8; 38] =
    b"AERON_CLIENT_RESOURCE_LINGER_DURATION\0";
pub const AERON_CLIENT_IDLE_SLEEP_DURATION_ENV_VAR: &[u8; 33] =
    b"AERON_CLIENT_IDLE_SLEEP_DURATION\0";
pub const AERON_CLIENT_PRE_TOUCH_MAPPED_MEMORY_ENV_VAR: &[u8; 37] =
    b"AERON_CLIENT_PRE_TOUCH_MAPPED_MEMORY\0";
pub const AERON_CLIENT_NAME_ENV_VAR: &[u8; 18] = b"AERON_CLIENT_NAME\0";
pub const AERON_AGENT_ON_START_FUNCTION_ENV_VAR: &[u8; 30] = b"AERON_AGENT_ON_START_FUNCTION\0";
pub const AERON_COUNTER_CACHE_LINE_LENGTH: u32 = 64;
pub const AERON_COUNTER_MAX_CLIENT_NAME_LENGTH: u32 = 100;
pub const AERON_COUNTER_RECORD_UNUSED: u32 = 0;
pub const AERON_COUNTER_RECORD_ALLOCATED: u32 = 1;
pub const AERON_COUNTER_RECORD_RECLAIMED: i32 = -1;
pub const AERON_COUNTER_NOT_FREE_TO_REUSE: u64 = 9223372036854775807;
pub const AERON_NULL_COUNTER_ID: i32 = -1;
pub const AERON_PUBLICATION_NOT_CONNECTED: i32 = -1;
pub const AERON_PUBLICATION_BACK_PRESSURED: i32 = -2;
pub const AERON_PUBLICATION_ADMIN_ACTION: i32 = -3;
pub const AERON_PUBLICATION_CLOSED: i32 = -4;
pub const AERON_PUBLICATION_MAX_POSITION_EXCEEDED: i32 = -5;
pub const AERON_PUBLICATION_ERROR: i32 = -6;
pub const AERON_COMPILER_GCC: u32 = 1;
pub const AERON_COMPILER_LLVM: u32 = 1;
pub const AERON_CPU_ARM: u32 = 1;
pub const AERON_CACHE_LINE_LENGTH: u32 = 64;
pub const AERON_MAX_PATH: u32 = 384;
pub const AERON_UDP_CHANNEL_RELIABLE_KEY: &[u8; 9] = b"reliable\0";
pub const AERON_UDP_CHANNEL_TTL_KEY: &[u8; 4] = b"ttl\0";
pub const AERON_UDP_CHANNEL_ENDPOINT_KEY: &[u8; 9] = b"endpoint\0";
pub const AERON_UDP_CHANNEL_INTERFACE_KEY: &[u8; 10] = b"interface\0";
pub const AERON_UDP_CHANNEL_CONTROL_KEY: &[u8; 8] = b"control\0";
pub const AERON_UDP_CHANNEL_CONTROL_MODE_KEY: &[u8; 13] = b"control-mode\0";
pub const AERON_UDP_CHANNEL_CONTROL_MODE_MANUAL_VALUE: &[u8; 7] = b"manual\0";
pub const AERON_UDP_CHANNEL_CONTROL_MODE_DYNAMIC_VALUE: &[u8; 8] = b"dynamic\0";
pub const AERON_UDP_CHANNEL_CONTROL_MODE_RESPONSE_VALUE: &[u8; 9] = b"response\0";
pub const AERON_URI_INITIAL_TERM_ID_KEY: &[u8; 13] = b"init-term-id\0";
pub const AERON_URI_TERM_ID_KEY: &[u8; 8] = b"term-id\0";
pub const AERON_URI_TERM_OFFSET_KEY: &[u8; 12] = b"term-offset\0";
pub const AERON_URI_TERM_LENGTH_KEY: &[u8; 12] = b"term-length\0";
pub const AERON_URI_LINGER_TIMEOUT_KEY: &[u8; 7] = b"linger\0";
pub const AERON_URI_MTU_LENGTH_KEY: &[u8; 4] = b"mtu\0";
pub const AERON_URI_SPARSE_TERM_KEY: &[u8; 7] = b"sparse\0";
pub const AERON_URI_EOS_KEY: &[u8; 4] = b"eos\0";
pub const AERON_URI_TETHER_KEY: &[u8; 7] = b"tether\0";
pub const AERON_URI_TAGS_KEY: &[u8; 5] = b"tags\0";
pub const AERON_URI_SESSION_ID_KEY: &[u8; 11] = b"session-id\0";
pub const AERON_URI_GROUP_KEY: &[u8; 6] = b"group\0";
pub const AERON_URI_REJOIN_KEY: &[u8; 7] = b"rejoin\0";
pub const AERON_URI_FC_KEY: &[u8; 3] = b"fc\0";
pub const AERON_URI_GTAG_KEY: &[u8; 5] = b"gtag\0";
pub const AERON_URI_CC_KEY: &[u8; 3] = b"cc\0";
pub const AERON_URI_SPIES_SIMULATE_CONNECTION_KEY: &[u8; 4] = b"ssc\0";
pub const AERON_URI_ATS_KEY: &[u8; 4] = b"ats\0";
pub const AERON_URI_SOCKET_SNDBUF_KEY: &[u8; 10] = b"so-sndbuf\0";
pub const AERON_URI_SOCKET_RCVBUF_KEY: &[u8; 10] = b"so-rcvbuf\0";
pub const AERON_URI_RECEIVER_WINDOW_KEY: &[u8; 8] = b"rcv-wnd\0";
pub const AERON_URI_MEDIA_RCV_TIMESTAMP_OFFSET_KEY: &[u8; 20] = b"media-rcv-ts-offset\0";
pub const AERON_URI_CHANNEL_RCV_TIMESTAMP_OFFSET_KEY: &[u8; 22] = b"channel-rcv-ts-offset\0";
pub const AERON_URI_CHANNEL_SND_TIMESTAMP_OFFSET_KEY: &[u8; 22] = b"channel-snd-ts-offset\0";
pub const AERON_URI_TIMESTAMP_OFFSET_RESERVED: &[u8; 9] = b"reserved\0";
pub const AERON_URI_RESPONSE_CORRELATION_ID_KEY: &[u8; 24] = b"response-correlation-id\0";
pub const AERON_URI_NAK_DELAY_KEY: &[u8; 10] = b"nak-delay\0";
pub const AERON_URI_UNTETHERED_WINDOW_LIMIT_TIMEOUT_KEY: &[u8; 32] =
    b"untethered-window-limit-timeout\0";
pub const AERON_URI_UNTETHERED_RESTING_TIMEOUT_KEY: &[u8; 27] = b"untethered-resting-timeout\0";
pub const AERON_URI_MAX_RESEND_KEY: &[u8; 11] = b"max-resend\0";
pub const AERON_URI_INVALID_TAG: i32 = -1;
pub const AERON_MAX_HOSTNAME_LEN: u32 = 256;
pub const AERON_CHANNEL_STATUS_INDICATOR_NOT_ALLOCATED: i32 = -1;
pub const AERON_DIR_WARN_IF_EXISTS_ENV_VAR: &[u8; 25] = b"AERON_DIR_WARN_IF_EXISTS\0";
pub const AERON_THREADING_MODE_ENV_VAR: &[u8; 21] = b"AERON_THREADING_MODE\0";
pub const AERON_DIR_DELETE_ON_START_ENV_VAR: &[u8; 26] = b"AERON_DIR_DELETE_ON_START\0";
pub const AERON_DIR_DELETE_ON_SHUTDOWN_ENV_VAR: &[u8; 29] = b"AERON_DIR_DELETE_ON_SHUTDOWN\0";
pub const AERON_TO_CONDUCTOR_BUFFER_LENGTH_ENV_VAR: &[u8; 30] = b"AERON_CONDUCTOR_BUFFER_LENGTH\0";
pub const AERON_TO_CLIENTS_BUFFER_LENGTH_ENV_VAR: &[u8; 28] = b"AERON_CLIENTS_BUFFER_LENGTH\0";
pub const AERON_COUNTERS_VALUES_BUFFER_LENGTH_ENV_VAR: &[u8; 29] =
    b"AERON_COUNTERS_BUFFER_LENGTH\0";
pub const AERON_ERROR_BUFFER_LENGTH_ENV_VAR: &[u8; 26] = b"AERON_ERROR_BUFFER_LENGTH\0";
pub const AERON_CLIENT_LIVENESS_TIMEOUT_ENV_VAR: &[u8; 30] = b"AERON_CLIENT_LIVENESS_TIMEOUT\0";
pub const AERON_TERM_BUFFER_LENGTH_ENV_VAR: &[u8; 25] = b"AERON_TERM_BUFFER_LENGTH\0";
pub const AERON_IPC_TERM_BUFFER_LENGTH_ENV_VAR: &[u8; 29] = b"AERON_IPC_TERM_BUFFER_LENGTH\0";
pub const AERON_TERM_BUFFER_SPARSE_FILE_ENV_VAR: &[u8; 30] = b"AERON_TERM_BUFFER_SPARSE_FILE\0";
pub const AERON_PERFORM_STORAGE_CHECKS_ENV_VAR: &[u8; 29] = b"AERON_PERFORM_STORAGE_CHECKS\0";
pub const AERON_LOW_FILE_STORE_WARNING_THRESHOLD_ENV_VAR: &[u8; 39] =
    b"AERON_LOW_FILE_STORE_WARNING_THRESHOLD\0";
pub const AERON_SPIES_SIMULATE_CONNECTION_ENV_VAR: &[u8; 32] = b"AERON_SPIES_SIMULATE_CONNECTION\0";
pub const AERON_FILE_PAGE_SIZE_ENV_VAR: &[u8; 21] = b"AERON_FILE_PAGE_SIZE\0";
pub const AERON_MTU_LENGTH_ENV_VAR: &[u8; 17] = b"AERON_MTU_LENGTH\0";
pub const AERON_IPC_MTU_LENGTH_ENV_VAR: &[u8; 21] = b"AERON_IPC_MTU_LENGTH\0";
pub const AERON_IPC_PUBLICATION_TERM_WINDOW_LENGTH_ENV_VAR: &[u8; 41] =
    b"AERON_IPC_PUBLICATION_TERM_WINDOW_LENGTH\0";
pub const AERON_PUBLICATION_TERM_WINDOW_LENGTH_ENV_VAR: &[u8; 37] =
    b"AERON_PUBLICATION_TERM_WINDOW_LENGTH\0";
pub const AERON_PUBLICATION_LINGER_TIMEOUT_ENV_VAR: &[u8; 33] =
    b"AERON_PUBLICATION_LINGER_TIMEOUT\0";
pub const AERON_SOCKET_SO_RCVBUF_ENV_VAR: &[u8; 23] = b"AERON_SOCKET_SO_RCVBUF\0";
pub const AERON_SOCKET_SO_SNDBUF_ENV_VAR: &[u8; 23] = b"AERON_SOCKET_SO_SNDBUF\0";
pub const AERON_SOCKET_MULTICAST_TTL_ENV_VAR: &[u8; 27] = b"AERON_SOCKET_MULTICAST_TTL\0";
pub const AERON_SEND_TO_STATUS_POLL_RATIO_ENV_VAR: &[u8; 32] = b"AERON_SEND_TO_STATUS_POLL_RATIO\0";
pub const AERON_RCV_STATUS_MESSAGE_TIMEOUT_ENV_VAR: &[u8; 33] =
    b"AERON_RCV_STATUS_MESSAGE_TIMEOUT\0";
pub const AERON_MULTICAST_MIN_FLOW_CONTROL_STRATEGY_NAME: &[u8; 14] = b"multicast_min\0";
pub const AERON_MULTICAST_MAX_FLOW_CONTROL_STRATEGY_NAME: &[u8; 14] = b"multicast_max\0";
pub const AERON_MULTICAST_TAGGED_FLOW_CONTROL_STRATEGY_NAME: &[u8; 17] = b"multicast_tagged\0";
pub const AERON_UNICAST_MAX_FLOW_CONTROL_STRATEGY_NAME: &[u8; 12] = b"unicast_max\0";
pub const AERON_MULTICAST_FLOWCONTROL_SUPPLIER_ENV_VAR: &[u8; 37] =
    b"AERON_MULTICAST_FLOWCONTROL_SUPPLIER\0";
pub const AERON_UNICAST_FLOWCONTROL_SUPPLIER_ENV_VAR: &[u8; 35] =
    b"AERON_UNICAST_FLOWCONTROL_SUPPLIER\0";
pub const AERON_IMAGE_LIVENESS_TIMEOUT_ENV_VAR: &[u8; 29] = b"AERON_IMAGE_LIVENESS_TIMEOUT\0";
pub const AERON_RCV_INITIAL_WINDOW_LENGTH_ENV_VAR: &[u8; 32] = b"AERON_RCV_INITIAL_WINDOW_LENGTH\0";
pub const AERON_CONGESTIONCONTROL_SUPPLIER_ENV_VAR: &[u8; 33] =
    b"AERON_CONGESTIONCONTROL_SUPPLIER\0";
pub const AERON_CUBICCONGESTIONCONTROL_MEASURERTT_ENV_VAR: &[u8; 40] =
    b"AERON_CUBICCONGESTIONCONTROL_MEASURERTT\0";
pub const AERON_CUBICCONGESTIONCONTROL_INITIALRTT_ENV_VAR: &[u8; 40] =
    b"AERON_CUBICCONGESTIONCONTROL_INITIALRTT\0";
pub const AERON_CUBICCONGESTIONCONTROL_TCPMODE_ENV_VAR: &[u8; 37] =
    b"AERON_CUBICCONGESTIONCONTROL_TCPMODE\0";
pub const AERON_LOSS_REPORT_BUFFER_LENGTH_ENV_VAR: &[u8; 32] = b"AERON_LOSS_REPORT_BUFFER_LENGTH\0";
pub const AERON_PUBLICATION_UNBLOCK_TIMEOUT_ENV_VAR: &[u8; 34] =
    b"AERON_PUBLICATION_UNBLOCK_TIMEOUT\0";
pub const AERON_PUBLICATION_CONNECTION_TIMEOUT_ENV_VAR: &[u8; 37] =
    b"AERON_PUBLICATION_CONNECTION_TIMEOUT\0";
pub const AERON_TIMER_INTERVAL_ENV_VAR: &[u8; 21] = b"AERON_TIMER_INTERVAL\0";
pub const AERON_SENDER_IDLE_STRATEGY_ENV_VAR: &[u8; 27] = b"AERON_SENDER_IDLE_STRATEGY\0";
pub const AERON_CONDUCTOR_IDLE_STRATEGY_ENV_VAR: &[u8; 30] = b"AERON_CONDUCTOR_IDLE_STRATEGY\0";
pub const AERON_RECEIVER_IDLE_STRATEGY_ENV_VAR: &[u8; 29] = b"AERON_RECEIVER_IDLE_STRATEGY\0";
pub const AERON_SHAREDNETWORK_IDLE_STRATEGY_ENV_VAR: &[u8; 34] =
    b"AERON_SHAREDNETWORK_IDLE_STRATEGY\0";
pub const AERON_SHARED_IDLE_STRATEGY_ENV_VAR: &[u8; 27] = b"AERON_SHARED_IDLE_STRATEGY\0";
pub const AERON_SENDER_IDLE_STRATEGY_INIT_ARGS_ENV_VAR: &[u8; 37] =
    b"AERON_SENDER_IDLE_STRATEGY_INIT_ARGS\0";
pub const AERON_CONDUCTOR_IDLE_STRATEGY_INIT_ARGS_ENV_VAR: &[u8; 40] =
    b"AERON_CONDUCTOR_IDLE_STRATEGY_INIT_ARGS\0";
pub const AERON_RECEIVER_IDLE_STRATEGY_INIT_ARGS_ENV_VAR: &[u8; 39] =
    b"AERON_RECEIVER_IDLE_STRATEGY_INIT_ARGS\0";
pub const AERON_SHAREDNETWORK_IDLE_STRATEGY_INIT_ARGS_ENV_VAR: &[u8; 44] =
    b"AERON_SHAREDNETWORK_IDLE_STRATEGY_INIT_ARGS\0";
pub const AERON_SHARED_IDLE_STRATEGY_ENV_INIT_ARGS_VAR: &[u8; 37] =
    b"AERON_SHARED_IDLE_STRATEGY_INIT_ARGS\0";
pub const AERON_COUNTERS_FREE_TO_REUSE_TIMEOUT_ENV_VAR: &[u8; 37] =
    b"AERON_COUNTERS_FREE_TO_REUSE_TIMEOUT\0";
pub const AERON_MIN_MULTICAST_FLOW_CONTROL_RECEIVER_TIMEOUT_ENV_VAR: &[u8; 50] =
    b"AERON_MIN_MULTICAST_FLOW_CONTROL_RECEIVER_TIMEOUT\0";
pub const AERON_FLOW_CONTROL_GROUP_TAG_ENV_VAR: &[u8; 29] = b"AERON_FLOW_CONTROL_GROUP_TAG\0";
pub const AERON_FLOW_CONTROL_GROUP_MIN_SIZE_ENV_VAR: &[u8; 34] =
    b"AERON_FLOW_CONTROL_GROUP_MIN_SIZE\0";
pub const AERON_RECEIVER_GROUP_TAG_ENV_VAR: &[u8; 25] = b"AERON_RECEIVER_GROUP_TAG\0";
pub const AERON_DRIVER_TERMINATION_VALIDATOR_ENV_VAR: &[u8; 35] =
    b"AERON_DRIVER_TERMINATION_VALIDATOR\0";
pub const AERON_PRINT_CONFIGURATION_ON_START_ENV_VAR: &[u8; 26] = b"AERON_PRINT_CONFIGURATION\0";
pub const AERON_RELIABLE_STREAM_ENV_VAR: &[u8; 22] = b"AERON_RELIABLE_STREAM\0";
pub const AERON_TETHER_SUBSCRIPTIONS_ENV_VAR: &[u8; 27] = b"AERON_TETHER_SUBSCRIPTIONS\0";
pub const AERON_UNTETHERED_WINDOW_LIMIT_TIMEOUT_ENV_VAR: &[u8; 38] =
    b"AERON_UNTETHERED_WINDOW_LIMIT_TIMEOUT\0";
pub const AERON_UNTETHERED_RESTING_TIMEOUT_ENV_VAR: &[u8; 33] =
    b"AERON_UNTETHERED_RESTING_TIMEOUT\0";
pub const AERON_NAK_MULTICAST_GROUP_SIZE_ENV_VAR: &[u8; 31] = b"AERON_NAK_MULTICAST_GROUP_SIZE\0";
pub const AERON_NAK_MULTICAST_MAX_BACKOFF_ENV_VAR: &[u8; 32] = b"AERON_NAK_MULTICAST_MAX_BACKOFF\0";
pub const AERON_NAK_UNICAST_DELAY_ENV_VAR: &[u8; 24] = b"AERON_NAK_UNICAST_DELAY\0";
pub const AERON_NAK_UNICAST_RETRY_DELAY_RATIO_ENV_VAR: &[u8; 36] =
    b"AERON_NAK_UNICAST_RETRY_DELAY_RATIO\0";
pub const AERON_MAX_RESEND_ENV_VAR: &[u8; 17] = b"AERON_MAX_RESEND\0";
pub const AERON_RETRANSMIT_UNICAST_DELAY_ENV_VAR: &[u8; 31] = b"AERON_RETRANSMIT_UNICAST_DELAY\0";
pub const AERON_RETRANSMIT_UNICAST_LINGER_ENV_VAR: &[u8; 32] = b"AERON_RETRANSMIT_UNICAST_LINGER\0";
pub const AERON_RECEIVER_GROUP_CONSIDERATION_ENV_VAR: &[u8; 35] =
    b"AERON_RECEIVER_GROUP_CONSIDERATION\0";
pub const AERON_REJOIN_STREAM_ENV_VAR: &[u8; 20] = b"AERON_REJOIN_STREAM\0";
pub const AERON_DRIVER_CONNECT_ENV_VAR: &[u8; 21] = b"AERON_DRIVER_CONNECT\0";
pub const AERON_IPC_CHANNEL: &[u8; 10] = b"aeron:ipc\0";
pub const AERON_SPY_PREFIX: &[u8; 11] = b"aeron-spy:\0";
pub const AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA_ENV_VAR: &[u8; 43] =
    b"AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA\0";
pub const AERON_CONDUCTOR_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA_ENV_VAR: &[u8; 53] =
    b"AERON_CONDUCTOR_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA\0";
pub const AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS_ENV_VAR: &[u8; 40] =
    b"AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS\0";
pub const AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS_ENV_VAR: &[u8; 40] =
    b"AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS\0";
pub const AERON_PUBLICATION_RESERVED_SESSION_ID_LOW_ENV_VAR: &[u8; 42] =
    b"AERON_PUBLICATION_RESERVED_SESSION_ID_LOW\0";
pub const AERON_PUBLICATION_RESERVED_SESSION_ID_HIGH_ENV_VAR: &[u8; 43] =
    b"AERON_PUBLICATION_RESERVED_SESSION_ID_HIGH\0";
pub const AERON_DRIVER_RESOLVER_NAME_ENV_VAR: &[u8; 27] = b"AERON_DRIVER_RESOLVER_NAME\0";
pub const AERON_DRIVER_RESOLVER_INTERFACE_ENV_VAR: &[u8; 32] = b"AERON_DRIVER_RESOLVER_INTERFACE\0";
pub const AERON_DRIVER_RESOLVER_BOOTSTRAP_NEIGHBOR_ENV_VAR: &[u8; 41] =
    b"AERON_DRIVER_RESOLVER_BOOTSTRAP_NEIGHBOR\0";
pub const AERON_NAME_RESOLVER_SUPPLIER_ENV_VAR: &[u8; 29] = b"AERON_NAME_RESOLVER_SUPPLIER\0";
pub const AERON_NAME_RESOLVER_SUPPLIER_DEFAULT: &[u8; 8] = b"default\0";
pub const AERON_NAME_RESOLVER_INIT_ARGS_ENV_VAR: &[u8; 30] = b"AERON_NAME_RESOLVER_INIT_ARGS\0";
pub const AERON_DRIVER_RERESOLUTION_CHECK_INTERVAL_ENV_VAR: &[u8; 41] =
    b"AERON_DRIVER_RERESOLUTION_CHECK_INTERVAL\0";
pub const AERON_DRIVER_SENDER_WILDCARD_PORT_RANGE_ENV_VAR: &[u8; 33] =
    b"AERON_SENDER_WILDCARD_PORT_RANGE\0";
pub const AERON_DRIVER_RECEIVER_WILDCARD_PORT_RANGE_ENV_VAR: &[u8; 35] =
    b"AERON_RECEIVER_WILDCARD_PORT_RANGE\0";
pub const AERON_DRIVER_CONDUCTOR_CYCLE_THRESHOLD_ENV_VAR: &[u8; 39] =
    b"AERON_DRIVER_CONDUCTOR_CYCLE_THRESHOLD\0";
pub const AERON_DRIVER_SENDER_CYCLE_THRESHOLD_ENV_VAR: &[u8; 36] =
    b"AERON_DRIVER_SENDER_CYCLE_THRESHOLD\0";
pub const AERON_DRIVER_RECEIVER_CYCLE_THRESHOLD_ENV_VAR: &[u8; 38] =
    b"AERON_DRIVER_RECEIVER_CYCLE_THRESHOLD\0";
pub const AERON_DRIVER_NAME_RESOLVER_THRESHOLD_ENV_VAR: &[u8; 37] =
    b"AERON_DRIVER_NAME_RESOLVER_THRESHOLD\0";
pub const AERON_RECEIVER_IO_VECTOR_CAPACITY_ENV_VAR: &[u8; 34] =
    b"AERON_RECEIVER_IO_VECTOR_CAPACITY\0";
pub const AERON_SENDER_IO_VECTOR_CAPACITY_ENV_VAR: &[u8; 32] = b"AERON_SENDER_IO_VECTOR_CAPACITY\0";
pub const AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND_ENV_VAR: &[u8; 48] =
    b"AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND\0";
pub const AERON_DRIVER_RESOURCE_FREE_LIMIT_ENV_VAR: &[u8; 33] =
    b"AERON_DRIVER_RESOURCE_FREE_LIMIT\0";
pub const AERON_DRIVER_ASYNC_EXECUTOR_THREADS_ENV_VAR: &[u8; 36] =
    b"AERON_DRIVER_ASYNC_EXECUTOR_THREADS\0";
pub const AERON_CONDUCTOR_CPU_AFFINITY_ENV_VAR: &[u8; 29] = b"AERON_CONDUCTOR_CPU_AFFINITY\0";
pub const AERON_RECEIVER_CPU_AFFINITY_ENV_VAR: &[u8; 28] = b"AERON_RECEIVER_CPU_AFFINITY\0";
pub const AERON_SENDER_CPU_AFFINITY_ENV_VAR: &[u8; 26] = b"AERON_SENDER_CPU_AFFINITY\0";
pub const AERON_DRIVER_DYNAMIC_LIBRARIES_ENV_VAR: &[u8; 31] = b"AERON_DRIVER_DYNAMIC_LIBRARIES\0";
pub const AERON_ENABLE_EXPERIMENTAL_FEATURES_ENV_VAR: &[u8; 35] =
    b"AERON_ENABLE_EXPERIMENTAL_FEATURES\0";
pub const AERON_DRIVER_STREAM_SESSION_LIMIT_ENV_VAR: &[u8; 34] =
    b"AERON_DRIVER_STREAM_SESSION_LIMIT\0";
pub const AERON_UDP_CHANNEL_TRANSPORT_MAX_INTERCEPTORS: u32 = 2;
pub const AERON_RES_HEADER_ADDRESS_LENGTH_IP4: u32 = 4;
pub const AERON_RES_HEADER_ADDRESS_LENGTH_IP6: u32 = 16;
pub const AERON_FRAME_HEADER_VERSION: u32 = 0;
pub const AERON_RES_HEADER_TYPE_NAME_TO_IP4_MD: u32 = 1;
pub const AERON_RES_HEADER_TYPE_NAME_TO_IP6_MD: u32 = 2;
pub const AERON_FRAME_MAX_MESSAGE_LENGTH: u32 = 16777216;
pub const AERON_OPT_HDR_ALIGNMENT: u32 = 4;
pub const AERON_LOGBUFFER_PARTITION_COUNT: u32 = 3;
pub const AERON_LOGBUFFER_TERM_MIN_LENGTH: u32 = 65536;
pub const AERON_LOGBUFFER_TERM_MAX_LENGTH: u32 = 1073741824;
pub const AERON_PAGE_MIN_SIZE: u32 = 4096;
pub const AERON_PAGE_MAX_SIZE: u32 = 1073741824;
pub const AERON_LOGBUFFER_DEFAULT_FRAME_HEADER_MAX_LENGTH: u32 = 128;
pub const AERON_MAX_UDP_PAYLOAD_LENGTH: u32 = 65504;
pub const AERON_LOGBUFFER_FRAME_ALIGNMENT: u32 = 32;
pub const AERON_PUBLICATIONS_DIR: &[u8; 13] = b"publications\0";
pub const AERON_IMAGES_DIR: &[u8; 7] = b"images\0";
pub const AERON_RB_PADDING_MSG_TYPE_ID: i32 = -1;
pub const AERON_BROADCAST_PADDING_MSG_TYPE_ID: i32 = -1;
pub const AERON_MAX_FLOW_CONTROL_STRATEGY_NAME: &[u8; 4] = b"max\0";
pub const AERON_MIN_FLOW_CONTROL_STRATEGY_NAME: &[u8; 4] = b"min\0";
pub const AERON_TAGGED_FLOW_CONTROL_STRATEGY_NAME: &[u8; 7] = b"tagged\0";
pub const AERON_MIN_FLOW_CONTROL_RECEIVERS_COUNTER_NAME: &[u8; 13] = b"fc-receivers\0";
pub const AERON_MAX_FLOW_CONTROL_RETRANSMIT_RECEIVER_WINDOW_MULTIPLE: u32 = 4;
pub const AERON_UNICAST_FLOW_CONTROL_RETRANSMIT_RECEIVER_WINDOW_MULTIPLE: u32 = 16;
pub const AERON_MIN_FLOW_CONTROL_RETRANSMIT_RECEIVER_WINDOW_MULTIPLE: u32 = 16;
pub const AERON_STATICWINDOWCONGESTIONCONTROL_CC_PARAM_VALUE: &[u8; 7] = b"static\0";
pub const AERON_CUBICCONGESTIONCONTROL_CC_PARAM_VALUE: &[u8; 6] = b"cubic\0";
pub const AERON_CUBICCONGESTIONCONTROL_RTT_INDICATOR_COUNTER_NAME: &[u8; 17] =
    b"rcv-cc-cubic-rtt\0";
pub const AERON_CUBICCONGESTIONCONTROL_WINDOW_INDICATOR_COUNTER_NAME: &[u8; 17] =
    b"rcv-cc-cubic-wnd\0";
pub const AERON_AGENT_STATE_UNUSED: u32 = 0;
pub const AERON_AGENT_STATE_INITED: u32 = 1;
pub const AERON_AGENT_STATE_STARTED: u32 = 2;
pub const AERON_AGENT_STATE_MANUAL: u32 = 3;
pub const AERON_AGENT_STATE_STOPPING: u32 = 4;
pub const AERON_AGENT_STATE_STOPPED: u32 = 5;
pub const AERON_IDLE_STRATEGY_BACKOFF_MAX_SPINS: u32 = 10;
pub const AERON_IDLE_STRATEGY_BACKOFF_MAX_YIELDS: u32 = 20;
pub const AERON_IDLE_STRATEGY_BACKOFF_MIN_PARK_PERIOD_NS: u32 = 1000;
pub const AERON_IDLE_STRATEGY_BACKOFF_MAX_PARK_PERIOD_NS: u32 = 1000000;
pub const AERON_COUNTER_CHANNEL_ENDPOINT_STATUS_INITIALIZING: u32 = 0;
pub const AERON_COUNTER_CHANNEL_ENDPOINT_STATUS_ERRORED: i32 = -1;
pub const AERON_COUNTER_CHANNEL_ENDPOINT_STATUS_NO_ID_ALLOCATED: i32 = -1;
pub const AERON_CNC_FILE: &[u8; 8] = b"cnc.dat\0";
pub const AERON_ERROR_MAX_TOTAL_LENGTH: u32 = 8192;
pub const AERON_MAP_DEFAULT_LOAD_FACTOR: f64 = 0.65;
pub const AERON_COMMAND_RB_CAPACITY: u32 = 131072;
pub const AERON_COMMAND_RB_RESERVE: u32 = 1024;
pub const AERON_COMMAND_DRAIN_LIMIT: u32 = 2;
pub const AERON_DRIVER_SENDER_IO_VECTOR_LENGTH_MAX: u32 = 16;
pub const AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND: u32 = 16;
pub const AERON_DRIVER_RECEIVER_IO_VECTOR_LENGTH_MAX: u32 = 16;
pub const AERON_DRIVER_RECEIVER_MAX_UDP_PACKET_LENGTH: u32 = 65536;
pub const AERON_COUNTERS_VALUES_BUFFER_LENGTH_DEFAULT: u32 = 1048576;
pub const AERON_COUNTERS_VALUES_BUFFER_LENGTH_MAX: u32 = 524288000;
pub const AERON_ERROR_BUFFER_LENGTH_DEFAULT: u32 = 1048576;
pub const AERON_COMMAND_ADD_PUBLICATION: u32 = 1;
pub const AERON_COMMAND_REMOVE_PUBLICATION: u32 = 2;
pub const AERON_COMMAND_ADD_EXCLUSIVE_PUBLICATION: u32 = 3;
pub const AERON_COMMAND_ADD_SUBSCRIPTION: u32 = 4;
pub const AERON_COMMAND_REMOVE_SUBSCRIPTION: u32 = 5;
pub const AERON_COMMAND_CLIENT_KEEPALIVE: u32 = 6;
pub const AERON_COMMAND_ADD_DESTINATION: u32 = 7;
pub const AERON_COMMAND_REMOVE_DESTINATION: u32 = 8;
pub const AERON_COMMAND_ADD_COUNTER: u32 = 9;
pub const AERON_COMMAND_REMOVE_COUNTER: u32 = 10;
pub const AERON_COMMAND_CLIENT_CLOSE: u32 = 11;
pub const AERON_COMMAND_ADD_RCV_DESTINATION: u32 = 12;
pub const AERON_COMMAND_REMOVE_RCV_DESTINATION: u32 = 13;
pub const AERON_COMMAND_TERMINATE_DRIVER: u32 = 14;
pub const AERON_COMMAND_ADD_STATIC_COUNTER: u32 = 15;
pub const AERON_COMMAND_REMOVE_DESTINATION_BY_ID: u32 = 16;
pub const AERON_RESPONSE_ON_ERROR: u32 = 3841;
pub const AERON_RESPONSE_ON_AVAILABLE_IMAGE: u32 = 3842;
pub const AERON_RESPONSE_ON_PUBLICATION_READY: u32 = 3843;
pub const AERON_RESPONSE_ON_OPERATION_SUCCESS: u32 = 3844;
pub const AERON_RESPONSE_ON_UNAVAILABLE_IMAGE: u32 = 3845;
pub const AERON_RESPONSE_ON_EXCLUSIVE_PUBLICATION_READY: u32 = 3846;
pub const AERON_RESPONSE_ON_SUBSCRIPTION_READY: u32 = 3847;
pub const AERON_RESPONSE_ON_COUNTER_READY: u32 = 3848;
pub const AERON_RESPONSE_ON_UNAVAILABLE_COUNTER: u32 = 3849;
pub const AERON_RESPONSE_ON_CLIENT_TIMEOUT: u32 = 3850;
pub const AERON_RESPONSE_ON_STATIC_COUNTER: u32 = 3851;
pub const AERON_ERROR_CODE_UNKNOWN_CODE_VALUE: i32 = -1;
pub const AERON_ERROR_CODE_UNUSED: u32 = 0;
pub const AERON_ERROR_CODE_INVALID_CHANNEL: u32 = 1;
pub const AERON_ERROR_CODE_UNKNOWN_SUBSCRIPTION: u32 = 2;
pub const AERON_ERROR_CODE_UNKNOWN_PUBLICATION: u32 = 3;
pub const AERON_ERROR_CODE_CHANNEL_ENDPOINT_ERROR: u32 = 4;
pub const AERON_ERROR_CODE_UNKNOWN_COUNTER: u32 = 5;
pub const AERON_ERROR_CODE_UNKNOWN_COMMAND_TYPE_ID: u32 = 6;
pub const AERON_ERROR_CODE_MALFORMED_COMMAND: u32 = 7;
pub const AERON_ERROR_CODE_NOT_SUPPORTED: u32 = 8;
pub const AERON_ERROR_CODE_UNKNOWN_HOST: u32 = 9;
pub const AERON_ERROR_CODE_RESOURCE_TEMPORARILY_UNAVAILABLE: u32 = 10;
pub const AERON_ERROR_CODE_GENERIC_ERROR: u32 = 11;
pub const AERON_ERROR_CODE_STORAGE_SPACE: u32 = 12;
pub const AERON_FORMAT_NUMBER_TO_LOCALE_STR_LEN: u32 = 32;
pub const AERON_NETUTIL_FORMATTED_MAX_LENGTH: u32 = 54;
pub const AERON_RETRANSMIT_HANDLER_MAX_RESEND: u32 = 16;
pub const AERON_RETRANSMIT_HANDLER_MAX_RESEND_MAX: u32 = 256;
pub const AERON_NETWORK_PUBLICATION_HEARTBEAT_TIMEOUT_NS: u32 = 100000000;
pub const AERON_NETWORK_PUBLICATION_SETUP_TIMEOUT_NS: u32 = 100000000;
pub const AERON_MAX_HOST_LENGTH: u32 = 384;
pub const AERON_MAX_PORT_LENGTH: u32 = 8;
pub const AERON_MAX_PREFIX_LENGTH: u32 = 8;
pub const AERON_NAME_RESOLVER_CSV_TABLE: &[u8; 10] = b"csv_table\0";
pub const AERON_NAME_RESOLVER_DRIVER: &[u8; 7] = b"driver\0";
pub const AERON_NAME_RESOLVER_CSV_TABLE_ARGS_ENV_VAR: &[u8; 42] =
    b"AERON_NAME_RESOLVER_CSV_LOOKUP_TABLE_ARGS\0";
pub const AERON_UDP_CHANNEL_RESERVED_VALUE_OFFSET: i32 = -8;
pub const AERON_UDP_CHANNEL_TRANSPORT_MEDIA_RCV_TIMESTAMP_NONE: u32 = 0;
pub const AERON_UDP_CHANNEL_TRANSPORT_MEDIA_RCV_TIMESTAMP_HW: u32 = 1;
pub const AERON_UDP_CHANNEL_TRANSPORT_MEDIA_RCV_TIMESTAMP_SW: u32 = 2;
pub const AERON_UDP_CHANNEL_TRANSPORT_MEDIA_RCV_TIMESTAMP: u32 = 3;
pub const AERON_UDP_CHANNEL_TRANSPORT_CHANNEL_RCV_TIMESTAMP: u32 = 4;
pub const AERON_UDP_CHANNEL_TRANSPORT_CHANNEL_SND_TIMESTAMP: u32 = 8;
pub const AERON_UDP_DESTINATION_TRACKER_DESTINATION_TIMEOUT_NS: u64 = 5000000000;
pub const AERON_SEND_CHANNEL_ENDPOINT_DESTINATION_TIMEOUT_NS: u64 = 5000000000;
pub const AERON_RECEIVE_DESTINATION_TIMEOUT_NS: u64 = 5000000000;
pub const AERON_LOSS_DETECTOR_TIMER_INACTIVE: i32 = -1;
pub const AERON_LOSS_DETECTOR_NAK_UNICAST_DELAY_NS: u32 = 60000000;
pub const AERON_LOSS_DETECTOR_NAK_MULTICAST_GROUP_SIZE: f64 = 10.0;
pub const AERON_LOSS_DETECTOR_NAK_MULTICAST_MAX_BACKOFF_NS: f64 = 60000000.0;
pub const AERON_LOSS_REPORT_FILE: &[u8; 16] = b"loss-report.dat\0";
pub const AERON_LOSS_REPORTER_ENTRY_ALIGNMENT: u32 = 64;
pub const AERON_IMAGE_SM_EOS_MULTIPLE: u32 = 5;
pub const AERON_DRIVER_CONDUCTOR_LINGER_RESOURCE_TIMEOUT_NS: u64 = 5000000000;
pub const AERON_DRIVER_CONDUCTOR_CLOCK_UPDATE_INTERNAL_NS: u32 = 1000000;
pub const AERON_UDP_TRANSPORT_POLLER_ITERATION_THRESHOLD: u32 = 5;
pub const AERON_DRIVER_RECEIVER_PENDING_SETUP_TIMEOUT_NS: u32 = 1000000000;
pub const AERON_AGENT_RUNNER_CONDUCTOR: u32 = 0;
pub const AERON_AGENT_RUNNER_SENDER: u32 = 1;
pub const AERON_AGENT_RUNNER_RECEIVER: u32 = 2;
pub const AERON_AGENT_RUNNER_SHARED_NETWORK: u32 = 1;
pub const AERON_AGENT_RUNNER_SHARED: u32 = 0;
pub const AERON_AGENT_RUNNER_MAX: u32 = 3;
unsafe extern "C" {
    pub fn aeron_alloc_no_err(
        ptr: *mut *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_alloc(ptr: *mut *mut ::std::os::raw::c_void, size: usize)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_alloc_aligned(
        ptr: *mut *mut ::std::os::raw::c_void,
        offset: *mut usize,
        size: usize,
        alignment: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_reallocf(
        ptr: *mut *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_free(ptr: *mut ::std::os::raw::c_void);
}
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_time_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_context_stct {
    _unused: [u8; 0],
}
pub type aeron_context_t = aeron_context_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_stct {
    _unused: [u8; 0],
}
pub type aeron_t = aeron_stct;
#[doc = " Structure used to hold information for a try_claim function call."]
pub type aeron_buffer_claim_t = aeron_buffer_claim_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_stct {
    _unused: [u8; 0],
}
pub type aeron_publication_t = aeron_publication_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_exclusive_publication_stct {
    _unused: [u8; 0],
}
pub type aeron_exclusive_publication_t = aeron_exclusive_publication_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_header_stct {
    _unused: [u8; 0],
}
pub type aeron_header_t = aeron_header_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_header_values_frame_stct {
    pub frame_length: i32,
    pub version: i8,
    pub flags: u8,
    pub type_: i16,
    pub term_offset: i32,
    pub session_id: i32,
    pub stream_id: i32,
    pub term_id: i32,
    pub reserved_value: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_header_values_frame_stct"]
        [::std::mem::size_of::<aeron_header_values_frame_stct>() - 32usize];
    ["Alignment of aeron_header_values_frame_stct"]
        [::std::mem::align_of::<aeron_header_values_frame_stct>() - 4usize];
    ["Offset of field: aeron_header_values_frame_stct::frame_length"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, frame_length) - 0usize];
    ["Offset of field: aeron_header_values_frame_stct::version"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, version) - 4usize];
    ["Offset of field: aeron_header_values_frame_stct::flags"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, flags) - 5usize];
    ["Offset of field: aeron_header_values_frame_stct::type_"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, type_) - 6usize];
    ["Offset of field: aeron_header_values_frame_stct::term_offset"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, term_offset) - 8usize];
    ["Offset of field: aeron_header_values_frame_stct::session_id"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, session_id) - 12usize];
    ["Offset of field: aeron_header_values_frame_stct::stream_id"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, stream_id) - 16usize];
    ["Offset of field: aeron_header_values_frame_stct::term_id"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, term_id) - 20usize];
    ["Offset of field: aeron_header_values_frame_stct::reserved_value"]
        [::std::mem::offset_of!(aeron_header_values_frame_stct, reserved_value) - 24usize];
};
pub type aeron_header_values_frame_t = aeron_header_values_frame_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_header_values_stct {
    pub frame: aeron_header_values_frame_t,
    pub initial_term_id: i32,
    pub position_bits_to_shift: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_header_values_stct"]
        [::std::mem::size_of::<aeron_header_values_stct>() - 44usize];
    ["Alignment of aeron_header_values_stct"]
        [::std::mem::align_of::<aeron_header_values_stct>() - 4usize];
    ["Offset of field: aeron_header_values_stct::frame"]
        [::std::mem::offset_of!(aeron_header_values_stct, frame) - 0usize];
    ["Offset of field: aeron_header_values_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_header_values_stct, initial_term_id) - 32usize];
    ["Offset of field: aeron_header_values_stct::position_bits_to_shift"]
        [::std::mem::offset_of!(aeron_header_values_stct, position_bits_to_shift) - 36usize];
};
pub type aeron_header_values_t = aeron_header_values_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscription_stct {
    _unused: [u8; 0],
}
pub type aeron_subscription_t = aeron_subscription_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_image_stct {
    _unused: [u8; 0],
}
pub type aeron_image_t = aeron_image_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_stct {
    _unused: [u8; 0],
}
pub type aeron_counter_t = aeron_counter_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_log_buffer_stct {
    _unused: [u8; 0],
}
pub type aeron_log_buffer_t = aeron_log_buffer_stct;
pub type aeron_counters_reader_t = aeron_counters_reader_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_client_registering_resource_stct {
    _unused: [u8; 0],
}
pub type aeron_async_add_publication_t = aeron_client_registering_resource_stct;
pub type aeron_async_add_exclusive_publication_t = aeron_client_registering_resource_stct;
pub type aeron_async_add_subscription_t = aeron_client_registering_resource_stct;
pub type aeron_async_add_counter_t = aeron_client_registering_resource_stct;
pub type aeron_async_destination_t = aeron_client_registering_resource_stct;
pub type aeron_async_destination_by_id_t = aeron_client_registering_resource_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_image_fragment_assembler_stct {
    _unused: [u8; 0],
}
pub type aeron_image_fragment_assembler_t = aeron_image_fragment_assembler_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_image_controlled_fragment_assembler_stct {
    _unused: [u8; 0],
}
pub type aeron_image_controlled_fragment_assembler_t =
    aeron_image_controlled_fragment_assembler_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_fragment_assembler_stct {
    _unused: [u8; 0],
}
pub type aeron_fragment_assembler_t = aeron_fragment_assembler_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_controlled_fragment_assembler_stct {
    _unused: [u8; 0],
}
pub type aeron_controlled_fragment_assembler_t = aeron_controlled_fragment_assembler_stct;
unsafe extern "C" {
    pub fn aeron_context_set_dir(
        context: *mut aeron_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_dir(context: *mut aeron_context_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_context_set_driver_timeout_ms(
        context: *mut aeron_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_driver_timeout_ms(context: *mut aeron_context_t) -> u64;
}
unsafe extern "C" {
    pub fn aeron_context_set_keepalive_interval_ns(
        context: *mut aeron_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_keepalive_interval_ns(context: *mut aeron_context_t) -> u64;
}
unsafe extern "C" {
    pub fn aeron_context_set_resource_linger_duration_ns(
        context: *mut aeron_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_resource_linger_duration_ns(context: *mut aeron_context_t) -> u64;
}
unsafe extern "C" {
    pub fn aeron_context_get_idle_sleep_duration_ns(context: *mut aeron_context_t) -> u64;
}
unsafe extern "C" {
    pub fn aeron_context_set_idle_sleep_duration_ns(
        context: *mut aeron_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_set_pre_touch_mapped_memory(
        context: *mut aeron_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_pre_touch_mapped_memory(context: *mut aeron_context_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_context_set_client_name(
        context: *mut aeron_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_client_name(
        context: *mut aeron_context_t,
    ) -> *const ::std::os::raw::c_char;
}
#[doc = " The error handler to be called when an error occurs."]
pub type aeron_error_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        errcode: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[doc = " Generalised notification callback."]
pub type aeron_notification_t =
    ::std::option::Option<unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn aeron_context_set_error_handler(
        context: *mut aeron_context_t,
        handler: aeron_error_handler_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_error_handler(context: *mut aeron_context_t) -> aeron_error_handler_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_error_handler_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[doc = " Function called by aeron_client_t to deliver notification that the media driver has added an aeron_publication_t\n or aeron_exclusive_publication_t successfully.\n\n Implementations should do the minimum work for passing off state to another thread for later processing.\n\n @param clientd to be returned in the call\n @param async associated with the original add publication call\n @param channel of the publication\n @param stream_id within the channel of the publication\n @param session_id of the publication\n @param correlation_id used by the publication"]
pub type aeron_on_new_publication_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        async_: *mut aeron_async_add_publication_t,
        channel: *const ::std::os::raw::c_char,
        stream_id: i32,
        session_id: i32,
        correlation_id: i64,
    ),
>;
unsafe extern "C" {
    pub fn aeron_context_set_on_new_publication(
        context: *mut aeron_context_t,
        handler: aeron_on_new_publication_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_new_publication(
        context: *mut aeron_context_t,
    ) -> aeron_on_new_publication_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_new_publication_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_context_set_on_new_exclusive_publication(
        context: *mut aeron_context_t,
        handler: aeron_on_new_publication_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_new_exclusive_publication(
        context: *mut aeron_context_t,
    ) -> aeron_on_new_publication_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_new_exclusive_publication_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[doc = " Function called by aeron_client_t to deliver notification that the media driver has added an aeron_subscription_t\n successfully.\n\n Implementations should do the minimum work for handing off state to another thread for later processing.\n\n @param clientd to be returned in the call\n @param async associated with the original aeron_add_async_subscription call\n @param channel of the subscription\n @param stream_id within the channel of the subscription\n @param session_id of the subscription\n @param correlation_id used by the subscription"]
pub type aeron_on_new_subscription_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        async_: *mut aeron_async_add_subscription_t,
        channel: *const ::std::os::raw::c_char,
        stream_id: i32,
        correlation_id: i64,
    ),
>;
unsafe extern "C" {
    pub fn aeron_context_set_on_new_subscription(
        context: *mut aeron_context_t,
        handler: aeron_on_new_subscription_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_new_subscription(
        context: *mut aeron_context_t,
    ) -> aeron_on_new_subscription_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_new_subscription_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[doc = " Function called by aeron_client_t to deliver notifications that an aeron_image_t was added.\n\n @param clientd to be returned in the call.\n @param subscription that image is part of.\n @param image that has become available."]
pub type aeron_on_available_image_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        subscription: *mut aeron_subscription_t,
        image: *mut aeron_image_t,
    ),
>;
#[doc = " Function called by aeron_client_t to deliver notifications that an aeron_image_t has been removed from use and\n should not be used any longer.\n\n @param clientd to be returned in the call.\n @param subscription that image is part of.\n @param image that has become unavailable."]
pub type aeron_on_unavailable_image_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        subscription: *mut aeron_subscription_t,
        image: *mut aeron_image_t,
    ),
>;
#[doc = " Function called by aeron_client_t to deliver notifications that a counter has been added to the driver.\n\n @param clientd to be returned in the call.\n @param counters_reader that holds the counter.\n @param registration_id of the counter.\n @param counter_id of the counter."]
pub type aeron_on_available_counter_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        counters_reader: *mut aeron_counters_reader_t,
        registration_id: i64,
        counter_id: i32,
    ),
>;
unsafe extern "C" {
    pub fn aeron_context_set_on_available_counter(
        context: *mut aeron_context_t,
        handler: aeron_on_available_counter_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_available_counter(
        context: *mut aeron_context_t,
    ) -> aeron_on_available_counter_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_available_counter_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[doc = " Function called by aeron_client_t to deliver notifications that a counter has been removed from the driver.\n\n @param clientd to be returned in the call.\n @param counters_reader that holds the counter.\n @param registration_id of the counter.\n @param counter_id of the counter."]
pub type aeron_on_unavailable_counter_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        counters_reader: *mut aeron_counters_reader_t,
        registration_id: i64,
        counter_id: i32,
    ),
>;
unsafe extern "C" {
    pub fn aeron_context_set_on_unavailable_counter(
        context: *mut aeron_context_t,
        handler: aeron_on_unavailable_counter_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_unavailable_counter(
        context: *mut aeron_context_t,
    ) -> aeron_on_unavailable_counter_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_unavailable_counter_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[doc = " Function called by aeron_client_t to deliver notifications that the client is closing.\n\n @param clientd to be returned in the call."]
pub type aeron_on_close_client_t =
    ::std::option::Option<unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn aeron_context_set_on_close_client(
        context: *mut aeron_context_t,
        handler: aeron_on_close_client_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_close_client(
        context: *mut aeron_context_t,
    ) -> aeron_on_close_client_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_on_close_client_clientd(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Whether to use an invoker to control the conductor agent or spawn a thread."]
    pub fn aeron_context_set_use_conductor_agent_invoker(
        context: *mut aeron_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_use_conductor_agent_invoker(context: *mut aeron_context_t) -> bool;
}
pub type aeron_agent_on_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        role_name: *const ::std::os::raw::c_char,
    ),
>;
unsafe extern "C" {
    pub fn aeron_context_set_agent_on_start_function(
        context: *mut aeron_context_t,
        value: aeron_agent_on_start_func_t,
        state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_context_get_agent_on_start_function(
        context: *mut aeron_context_t,
    ) -> aeron_agent_on_start_func_t;
}
unsafe extern "C" {
    pub fn aeron_context_get_agent_on_start_state(
        context: *mut aeron_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Create a aeron_context_t struct and initialize with default values.\n\n @param context to create and initialize\n @return 0 for success and -1 for error."]
    pub fn aeron_context_init(context: *mut *mut aeron_context_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Close and delete aeron_context_t struct.\n\n @param context to close and delete\n @return 0 for success and -1 for error."]
    pub fn aeron_context_close(context: *mut aeron_context_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Create a aeron_t client struct and initialize from the aeron_context_t struct.\n\n The given aeron_context_t struct will be used exclusively by the client. Do not reuse between clients.\n\n @param aeron  client to create and initialize.\n @param context to use for initialization.\n @return 0 for success and -1 for error."]
    pub fn aeron_init(
        client: *mut *mut aeron_t,
        context: *mut aeron_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Start an aeron_t. This may spawn a thread for the Client Conductor.\n\n @param client to start.\n @return 0 for success and -1 for error."]
    pub fn aeron_start(client: *mut aeron_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Call the Conductor main do_work duty cycle once.\n\n Client must have been created with use conductor invoker set to true.\n\n @param client to call do_work duty cycle on.\n @return 0 for success and -1 for error."]
    pub fn aeron_main_do_work(client: *mut aeron_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Call the Conductor Idle Strategy.\n\n @param client to idle.\n @param work_count to pass to idle strategy."]
    pub fn aeron_main_idle_strategy(client: *mut aeron_t, work_count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[doc = " Close and delete aeron_t struct.\n\n @param client to close and delete\n @return 0 for success and -1 for error."]
    pub fn aeron_close(client: *mut aeron_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Determines if the client has been closed, e.g. via a driver timeout. Don't call this method after calling\n aeron_close as that will have already freed the associated memory.\n\n @param client to check if closed.\n @return true if it has been closed, false otherwise."]
    pub fn aeron_is_closed(client: *mut aeron_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Call stream_out to print the counter labels and values.\n\n @param client to get the counters from.\n @param stream_out to call for each label and value."]
    pub fn aeron_print_counters(
        client: *mut aeron_t,
        stream_out: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char),
        >,
    );
}
unsafe extern "C" {
    #[doc = " Return the aeron_context_t that is in use by the given client.\n\n @param client to return the aeron_context_t for.\n @return the aeron_context_t for the given client or NULL for an error."]
    pub fn aeron_context(client: *mut aeron_t) -> *mut aeron_context_t;
}
unsafe extern "C" {
    #[doc = " Return the client id in use by the client.\n\n @param client to return the client id for.\n @return id value or -1 for an error."]
    pub fn aeron_client_id(client: *mut aeron_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Return a unique correlation id from the driver.\n\n @param client to use to get the id.\n @return unique correlation id or -1 for an error."]
    pub fn aeron_next_correlation_id(client: *mut aeron_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Asynchronously add a publication using the given client and return an object to use to determine when the\n publication is available.\n\n @param async object to use for polling completion.\n @param client to add the publication to.\n @param uri for the channel of the publication.\n @param stream_id for the publication.\n @return 0 for success or -1 for an error."]
    pub fn aeron_async_add_publication(
        async_: *mut *mut aeron_async_add_publication_t,
        client: *mut aeron_t,
        uri: *const ::std::os::raw::c_char,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of the aeron_async_add_publication call.\n\n @param publication to set if completed successfully.\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_async_add_publication_poll(
        publication: *mut *mut aeron_publication_t,
        async_: *mut aeron_async_add_publication_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Asynchronously add an exclusive publication using the given client and return an object to use to determine when the\n publication is available.\n\n @param async object to use for polling completion.\n @param client to add the publication to.\n @param uri for the channel of the publication.\n @param stream_id for the publication.\n @return 0 for success or -1 for an error."]
    pub fn aeron_async_add_exclusive_publication(
        async_: *mut *mut aeron_async_add_exclusive_publication_t,
        client: *mut aeron_t,
        uri: *const ::std::os::raw::c_char,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of the aeron_async_add_exclusive_publication call.\n\n @param publication to set if completed successfully.\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_async_add_exclusive_publication_poll(
        publication: *mut *mut aeron_exclusive_publication_t,
        async_: *mut aeron_async_add_exclusive_publication_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Asynchronously add a subscription using the given client and return an object to use to determine when the\n subscription is available.\n\n @param async object to use for polling completion.\n @param client to add the subscription to.\n @param uri for the channel of the subscription.\n @param stream_id for the subscription.\n @param on_available_image_handler to be called when images become available on the subscription.\n @param on_available_image_clientd to be passed when images become available on the subscription.\n @param on_unavailable_image_handler to be called when images go unavailable on the subscription.\n @param on_unavailable_image_clientd to be passed when images go unavailable on the subscription.\n @return 0 for success or -1 for an error."]
    pub fn aeron_async_add_subscription(
        async_: *mut *mut aeron_async_add_subscription_t,
        client: *mut aeron_t,
        uri: *const ::std::os::raw::c_char,
        stream_id: i32,
        on_available_image_handler: aeron_on_available_image_t,
        on_available_image_clientd: *mut ::std::os::raw::c_void,
        on_unavailable_image_handler: aeron_on_unavailable_image_t,
        on_unavailable_image_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of the aeron_async_add_subscription call.\n\n @param subscription to set if completed successfully.\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_async_add_subscription_poll(
        subscription: *mut *mut aeron_subscription_t,
        async_: *mut aeron_async_add_subscription_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return a reference to the counters reader of the given client.\n\n The aeron_counters_reader_t is maintained by the client. And should not be freed.\n\n @param client that contains the counters reader.\n @return aeron_counters_reader_t or NULL for error."]
    pub fn aeron_counters_reader(client: *mut aeron_t) -> *mut aeron_counters_reader_t;
}
unsafe extern "C" {
    #[doc = " Asynchronously add a counter using the given client and return an object to use to determine when the\n counter is available.\n\n @param async object to use for polling completion.\n @param client to add the counter to.\n @param type_id for the counter.\n @param key_buffer for the counter.\n @param key_buffer_length for the counter.\n @param label_buffer for the counter.\n @param label_buffer_length for the counter.\n @return 0 for success or -1 for an error."]
    pub fn aeron_async_add_counter(
        async_: *mut *mut aeron_async_add_counter_t,
        client: *mut aeron_t,
        type_id: i32,
        key_buffer: *const u8,
        key_buffer_length: usize,
        label_buffer: *const ::std::os::raw::c_char,
        label_buffer_length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of the <code>aeron_async_add_counter</code> or <code>aeron_async_add_static_counter</code> calls.\n\n @param counter to set if completed successfully.\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_async_add_counter_poll(
        counter: *mut *mut aeron_counter_t,
        async_: *mut aeron_async_add_counter_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Asynchronously allocates or returns an existing static counter instance using specified <code>type_id</code> and\n <code>registration_id</code>. Such counter cannot be deleted and its lifecycle is decoupled from the client that created it.\n Returns an object to use to determine when the counter is available.\n\n @param async object to use for polling completion.\n @param client to add the counter to.\n @param type_id for the counter.\n @param key_buffer for the counter.\n @param key_buffer_length for the counter.\n @param label_buffer for the counter.\n @param label_buffer_length for the counter.\n @param registration_id that uniquely identifies the counter.\n @return 0 for success or -1 for an error."]
    pub fn aeron_async_add_static_counter(
        async_: *mut *mut aeron_async_add_counter_t,
        client: *mut aeron_t,
        type_id: i32,
        key_buffer: *const u8,
        key_buffer_length: usize,
        label_buffer: *const ::std::os::raw::c_char,
        label_buffer_length: usize,
        registration_id: i64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_on_available_counter_pair_stct {
    pub handler: aeron_on_available_counter_t,
    pub clientd: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_on_available_counter_pair_stct"]
        [::std::mem::size_of::<aeron_on_available_counter_pair_stct>() - 16usize];
    ["Alignment of aeron_on_available_counter_pair_stct"]
        [::std::mem::align_of::<aeron_on_available_counter_pair_stct>() - 8usize];
    ["Offset of field: aeron_on_available_counter_pair_stct::handler"]
        [::std::mem::offset_of!(aeron_on_available_counter_pair_stct, handler) - 0usize];
    ["Offset of field: aeron_on_available_counter_pair_stct::clientd"]
        [::std::mem::offset_of!(aeron_on_available_counter_pair_stct, clientd) - 8usize];
};
pub type aeron_on_available_counter_pair_t = aeron_on_available_counter_pair_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_on_unavailable_counter_pair_stct {
    pub handler: aeron_on_unavailable_counter_t,
    pub clientd: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_on_unavailable_counter_pair_stct"]
        [::std::mem::size_of::<aeron_on_unavailable_counter_pair_stct>() - 16usize];
    ["Alignment of aeron_on_unavailable_counter_pair_stct"]
        [::std::mem::align_of::<aeron_on_unavailable_counter_pair_stct>() - 8usize];
    ["Offset of field: aeron_on_unavailable_counter_pair_stct::handler"]
        [::std::mem::offset_of!(aeron_on_unavailable_counter_pair_stct, handler) - 0usize];
    ["Offset of field: aeron_on_unavailable_counter_pair_stct::clientd"]
        [::std::mem::offset_of!(aeron_on_unavailable_counter_pair_stct, clientd) - 8usize];
};
pub type aeron_on_unavailable_counter_pair_t = aeron_on_unavailable_counter_pair_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_on_close_client_pair_stct {
    pub handler: aeron_on_close_client_t,
    pub clientd: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_on_close_client_pair_stct"]
        [::std::mem::size_of::<aeron_on_close_client_pair_stct>() - 16usize];
    ["Alignment of aeron_on_close_client_pair_stct"]
        [::std::mem::align_of::<aeron_on_close_client_pair_stct>() - 8usize];
    ["Offset of field: aeron_on_close_client_pair_stct::handler"]
        [::std::mem::offset_of!(aeron_on_close_client_pair_stct, handler) - 0usize];
    ["Offset of field: aeron_on_close_client_pair_stct::clientd"]
        [::std::mem::offset_of!(aeron_on_close_client_pair_stct, clientd) - 8usize];
};
pub type aeron_on_close_client_pair_t = aeron_on_close_client_pair_stct;
unsafe extern "C" {
    #[doc = " Add a handler to be called when a new counter becomes available.\n\n NOTE: This function blocks until the handler is added by the client conductor thread.\n\n @param client for the counter\n @param pair holding the handler to call and a clientd to pass when called.\n @return 0 for success and -1 for error"]
    pub fn aeron_add_available_counter_handler(
        client: *mut aeron_t,
        pair: *mut aeron_on_available_counter_pair_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a previously added handler to be called when a new counter becomes available.\n\n NOTE: This function blocks until the handler is removed by the client conductor thread.\n\n @param client for the counter\n @param pair holding the handler to call and a clientd to pass when called.\n @return 0 for success and -1 for error"]
    pub fn aeron_remove_available_counter_handler(
        client: *mut aeron_t,
        pair: *mut aeron_on_available_counter_pair_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Add a handler to be called when a new counter becomes unavailable or goes away.\n\n NOTE: This function blocks until the handler is added by the client conductor thread.\n\n @param client for the counter\n @param pair holding the handler to call and a clientd to pass when called.\n @return 0 for success and -1 for error"]
    pub fn aeron_add_unavailable_counter_handler(
        client: *mut aeron_t,
        pair: *mut aeron_on_unavailable_counter_pair_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a previously added handler to be called when a new counter becomes unavailable or goes away.\n\n NOTE: This function blocks until the handler is removed by the client conductor thread.\n\n @param client for the counter\n @param pair holding the handler to call and a clientd to pass when called.\n @return 0 for success and -1 for error"]
    pub fn aeron_remove_unavailable_counter_handler(
        client: *mut aeron_t,
        pair: *mut aeron_on_unavailable_counter_pair_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Add a handler to be called when client is closed.\n\n NOTE: This function blocks until the handler is added by the client conductor thread.\n\n @param client for the counter\n @param pair holding the handler to call and a clientd to pass when called.\n @return 0 for success and -1 for error"]
    pub fn aeron_add_close_handler(
        client: *mut aeron_t,
        pair: *mut aeron_on_close_client_pair_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a previously added handler to be called when client is closed.\n\n NOTE: This function blocks until the handler is removed by the client conductor thread.\n\n @param client for the counter\n @param pair holding the handler to call and a clientd to pass when called.\n @return 0 for success and -1 for error"]
    pub fn aeron_remove_close_handler(
        client: *mut aeron_t,
        pair: *mut aeron_on_close_client_pair_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_value_descriptor_stct {
    pub counter_value: i64,
    pub registration_id: i64,
    pub owner_id: i64,
    pub reference_id: i64,
    pub pad1: [u8; 96usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counter_value_descriptor_stct"]
        [::std::mem::size_of::<aeron_counter_value_descriptor_stct>() - 128usize];
    ["Alignment of aeron_counter_value_descriptor_stct"]
        [::std::mem::align_of::<aeron_counter_value_descriptor_stct>() - 4usize];
    ["Offset of field: aeron_counter_value_descriptor_stct::counter_value"]
        [::std::mem::offset_of!(aeron_counter_value_descriptor_stct, counter_value) - 0usize];
    ["Offset of field: aeron_counter_value_descriptor_stct::registration_id"]
        [::std::mem::offset_of!(aeron_counter_value_descriptor_stct, registration_id) - 8usize];
    ["Offset of field: aeron_counter_value_descriptor_stct::owner_id"]
        [::std::mem::offset_of!(aeron_counter_value_descriptor_stct, owner_id) - 16usize];
    ["Offset of field: aeron_counter_value_descriptor_stct::reference_id"]
        [::std::mem::offset_of!(aeron_counter_value_descriptor_stct, reference_id) - 24usize];
    ["Offset of field: aeron_counter_value_descriptor_stct::pad1"]
        [::std::mem::offset_of!(aeron_counter_value_descriptor_stct, pad1) - 32usize];
};
pub type aeron_counter_value_descriptor_t = aeron_counter_value_descriptor_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_metadata_descriptor_stct {
    pub state: i32,
    pub type_id: i32,
    pub free_for_reuse_deadline_ms: i64,
    pub key: [u8; 112usize],
    pub label_length: i32,
    pub label: [u8; 380usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counter_metadata_descriptor_stct"]
        [::std::mem::size_of::<aeron_counter_metadata_descriptor_stct>() - 512usize];
    ["Alignment of aeron_counter_metadata_descriptor_stct"]
        [::std::mem::align_of::<aeron_counter_metadata_descriptor_stct>() - 4usize];
    ["Offset of field: aeron_counter_metadata_descriptor_stct::state"]
        [::std::mem::offset_of!(aeron_counter_metadata_descriptor_stct, state) - 0usize];
    ["Offset of field: aeron_counter_metadata_descriptor_stct::type_id"]
        [::std::mem::offset_of!(aeron_counter_metadata_descriptor_stct, type_id) - 4usize];
    ["Offset of field: aeron_counter_metadata_descriptor_stct::free_for_reuse_deadline_ms"][::std::mem::offset_of!(
        aeron_counter_metadata_descriptor_stct,
        free_for_reuse_deadline_ms
    )
        - 8usize];
    ["Offset of field: aeron_counter_metadata_descriptor_stct::key"]
        [::std::mem::offset_of!(aeron_counter_metadata_descriptor_stct, key) - 16usize];
    ["Offset of field: aeron_counter_metadata_descriptor_stct::label_length"]
        [::std::mem::offset_of!(aeron_counter_metadata_descriptor_stct, label_length) - 128usize];
    ["Offset of field: aeron_counter_metadata_descriptor_stct::label"]
        [::std::mem::offset_of!(aeron_counter_metadata_descriptor_stct, label) - 132usize];
};
pub type aeron_counter_metadata_descriptor_t = aeron_counter_metadata_descriptor_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counters_reader_buffers_stct {
    pub values: *mut u8,
    pub metadata: *mut u8,
    pub values_length: usize,
    pub metadata_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counters_reader_buffers_stct"]
        [::std::mem::size_of::<aeron_counters_reader_buffers_stct>() - 32usize];
    ["Alignment of aeron_counters_reader_buffers_stct"]
        [::std::mem::align_of::<aeron_counters_reader_buffers_stct>() - 8usize];
    ["Offset of field: aeron_counters_reader_buffers_stct::values"]
        [::std::mem::offset_of!(aeron_counters_reader_buffers_stct, values) - 0usize];
    ["Offset of field: aeron_counters_reader_buffers_stct::metadata"]
        [::std::mem::offset_of!(aeron_counters_reader_buffers_stct, metadata) - 8usize];
    ["Offset of field: aeron_counters_reader_buffers_stct::values_length"]
        [::std::mem::offset_of!(aeron_counters_reader_buffers_stct, values_length) - 16usize];
    ["Offset of field: aeron_counters_reader_buffers_stct::metadata_length"]
        [::std::mem::offset_of!(aeron_counters_reader_buffers_stct, metadata_length) - 24usize];
};
pub type aeron_counters_reader_buffers_t = aeron_counters_reader_buffers_stct;
unsafe extern "C" {
    #[doc = " Get buffer pointers and lengths for the counters reader.\n\n @param reader reader containing the buffers.\n @param buffers output structure to return the buffers.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_get_buffers(
        reader: *mut aeron_counters_reader_t,
        buffers: *mut aeron_counters_reader_buffers_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Function called by aeron_counters_reader_foreach_counter for each counter in the aeron_counters_reader_t.\n\n @param value of the counter.\n @param id of the counter.\n @param label for the counter.\n @param label_length for the counter.\n @param clientd to be returned in the call"]
pub type aeron_counters_reader_foreach_counter_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        value: i64,
        id: i32,
        type_id: i32,
        key: *const u8,
        key_length: usize,
        label: *const ::std::os::raw::c_char,
        label_length: usize,
        clientd: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    #[doc = " Iterate over the counters in the counters_reader and call the given function for each counter.\n\n @param counters_reader to iterate over.\n @param func to call for each counter.\n @param clientd to pass for each call to func."]
    pub fn aeron_counters_reader_foreach_counter(
        counters_reader: *mut aeron_counters_reader_t,
        func: aeron_counters_reader_foreach_counter_func_t,
        clientd: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " Iterate over allocated counters and find the first matching a given type id and registration id.\n\n @param counters_reader\n @param type_id to find.\n @param registration_id to find.\n @return the counter id if found otherwise AERON_NULL_COUNTER_ID."]
    pub fn aeron_counters_reader_find_by_type_id_and_registration_id(
        counters_reader: *mut aeron_counters_reader_t,
        type_id: i32,
        registration_id: i64,
    ) -> i32;
}
unsafe extern "C" {
    #[doc = " Get the current max counter id.\n\n @param reader to query\n @return -1 on failure, max counter id on success."]
    pub fn aeron_counters_reader_max_counter_id(reader: *mut aeron_counters_reader_t) -> i32;
}
unsafe extern "C" {
    #[doc = " Get the address for a counter.\n\n @param counters_reader that contains the counter\n @param counter_id to find\n @return address of the counter value"]
    pub fn aeron_counters_reader_addr(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
    ) -> *mut i64;
}
unsafe extern "C" {
    #[doc = " Get the registration id assigned to a counter.\n\n @param counters_reader representing the this pointer.\n @param counter_id      for which the registration id is requested.\n @param registration_id pointer for value to be set on success.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_counter_registration_id(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        registration_id: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the owner id assigned to a counter which will typically be the client id.\n\n @param counters_reader representing the this pointer.\n @param counter_id      for which the owner id is requested.\n @param owner_id        pointer for value to be set on success.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_counter_owner_id(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        owner_id: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the reference id assigned to a counter which will typically be the registration id of an associated Image,\n Subscription, Publication, etc.\n\n @param counters_reader representing the this pointer.\n @param counter_id      for which the reference id is requested.\n @param reference_id    pointer for value to be set on success.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_counter_reference_id(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        reference_id: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the state for a counter.\n\n @param counters_reader that contains the counter\n @param counter_id to find\n @param state out pointer for the current state to be stored in.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_counter_state(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        state: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the type id for a counter.\n\n @param counters_reader that contains the counter\n @param counter_id to find\n @param type id out pointer for the current state to be stored in.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_counter_type_id(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        type_id: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the label for a counter.\n\n @param counters_reader that contains the counter\n @param counter_id to find\n @param buffer to store the counter in.\n @param buffer_length length of the output buffer\n @return -1 on failure, number of characters copied to buffer on success."]
    pub fn aeron_counters_reader_counter_label(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        buffer: *mut ::std::os::raw::c_char,
        buffer_length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the free for reuse deadline (ms) for a counter.\n\n @param counters_reader that contains the counter.\n @param counter_id to find.\n @param deadline_ms output value to store the deadline.\n @return -1 on failure, 0 on success."]
    pub fn aeron_counters_reader_free_for_reuse_deadline_ms(
        counters_reader: *mut aeron_counters_reader_t,
        counter_id: i32,
        deadline_ms: *mut i64,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Function called when filling in the reserved value field of a message.\n\n @param clientd passed to the offer function.\n @param buffer of the entire frame, including Aeron data header.\n @param frame_length of the entire frame."]
pub type aeron_reserved_value_supplier_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        frame_length: usize,
    ) -> i64,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_iovec_stct {
    pub iov_base: *mut u8,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_iovec_stct"][::std::mem::size_of::<aeron_iovec_stct>() - 16usize];
    ["Alignment of aeron_iovec_stct"][::std::mem::align_of::<aeron_iovec_stct>() - 8usize];
    ["Offset of field: aeron_iovec_stct::iov_base"]
        [::std::mem::offset_of!(aeron_iovec_stct, iov_base) - 0usize];
    ["Offset of field: aeron_iovec_stct::iov_len"]
        [::std::mem::offset_of!(aeron_iovec_stct, iov_len) - 8usize];
};
pub type aeron_iovec_t = aeron_iovec_stct;
#[doc = " Structure used to hold information for a try_claim function call."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_buffer_claim_stct {
    pub frame_header: *mut u8,
    pub data: *mut u8,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_buffer_claim_stct"][::std::mem::size_of::<aeron_buffer_claim_stct>() - 24usize];
    ["Alignment of aeron_buffer_claim_stct"]
        [::std::mem::align_of::<aeron_buffer_claim_stct>() - 8usize];
    ["Offset of field: aeron_buffer_claim_stct::frame_header"]
        [::std::mem::offset_of!(aeron_buffer_claim_stct, frame_header) - 0usize];
    ["Offset of field: aeron_buffer_claim_stct::data"]
        [::std::mem::offset_of!(aeron_buffer_claim_stct, data) - 8usize];
    ["Offset of field: aeron_buffer_claim_stct::length"]
        [::std::mem::offset_of!(aeron_buffer_claim_stct, length) - 16usize];
};
unsafe extern "C" {
    #[doc = " Commit the given buffer_claim as a complete message available for consumption.\n\n @param buffer_claim to commit.\n @return 0 for success or -1 for error."]
    pub fn aeron_buffer_claim_commit(
        buffer_claim: *mut aeron_buffer_claim_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Abort the given buffer_claim and assign its position as padding.\n\n @param buffer_claim to abort.\n @return 0 for success or -1 for error."]
    pub fn aeron_buffer_claim_abort(
        buffer_claim: *mut aeron_buffer_claim_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Configuration for a publication that does not change during it's lifetime."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_constants_stct {
    #[doc = " Media address for delivery to the channel.\n\n This returns a pointer only valid for the lifetime of the publication."]
    pub channel: *const ::std::os::raw::c_char,
    #[doc = " The registration used to register this Publication with the media driver by the first publisher."]
    pub original_registration_id: i64,
    #[doc = " Get the registration id used to register this Publication with the media driver.\n\n If this value is different from the original_registration_id then a previous active registration exists."]
    pub registration_id: i64,
    #[doc = " The maximum possible position this stream can reach due to its term buffer length.\n\n Maximum possible position is term-length times 2^31 in bytes."]
    pub max_possible_position: i64,
    #[doc = " Number of bits to right shift a position to get a term count for how far the stream has progressed."]
    pub position_bits_to_shift: usize,
    #[doc = " Get the length in bytes for each term partition in the log buffer."]
    pub term_buffer_length: usize,
    #[doc = " Maximum message length supported in bytes. Messages may be made of multiple fragments if greater than\n MTU length."]
    pub max_message_length: usize,
    #[doc = " Maximum length of a message payload that fits within a message fragment.\n\n This is the MTU length minus the message fragment header length."]
    pub max_payload_length: usize,
    #[doc = " Stream id of the publication."]
    pub stream_id: i32,
    #[doc = " Session id of the publication."]
    pub session_id: i32,
    #[doc = " The initial term id assigned when this publication was created. This can be used to determine how many\n terms have passed since creation."]
    pub initial_term_id: i32,
    #[doc = " Counter id for the publication limit."]
    pub publication_limit_counter_id: i32,
    #[doc = " Counter id for the channel status indicator"]
    pub channel_status_indicator_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_constants_stct"]
        [::std::mem::size_of::<aeron_publication_constants_stct>() - 88usize];
    ["Alignment of aeron_publication_constants_stct"]
        [::std::mem::align_of::<aeron_publication_constants_stct>() - 8usize];
    ["Offset of field: aeron_publication_constants_stct::channel"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, channel) - 0usize];
    ["Offset of field: aeron_publication_constants_stct::original_registration_id"][::std::mem::offset_of!(
        aeron_publication_constants_stct,
        original_registration_id
    ) - 8usize];
    ["Offset of field: aeron_publication_constants_stct::registration_id"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, registration_id) - 16usize];
    ["Offset of field: aeron_publication_constants_stct::max_possible_position"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, max_possible_position) - 24usize];
    ["Offset of field: aeron_publication_constants_stct::position_bits_to_shift"][::std::mem::offset_of!(
        aeron_publication_constants_stct,
        position_bits_to_shift
    ) - 32usize];
    ["Offset of field: aeron_publication_constants_stct::term_buffer_length"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, term_buffer_length) - 40usize];
    ["Offset of field: aeron_publication_constants_stct::max_message_length"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, max_message_length) - 48usize];
    ["Offset of field: aeron_publication_constants_stct::max_payload_length"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, max_payload_length) - 56usize];
    ["Offset of field: aeron_publication_constants_stct::stream_id"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, stream_id) - 64usize];
    ["Offset of field: aeron_publication_constants_stct::session_id"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, session_id) - 68usize];
    ["Offset of field: aeron_publication_constants_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_publication_constants_stct, initial_term_id) - 72usize];
    ["Offset of field: aeron_publication_constants_stct::publication_limit_counter_id"][::std::mem::offset_of!(
        aeron_publication_constants_stct,
        publication_limit_counter_id
    )
        - 76usize];
    ["Offset of field: aeron_publication_constants_stct::channel_status_indicator_id"][::std::mem::offset_of!(
        aeron_publication_constants_stct,
        channel_status_indicator_id
    ) - 80usize];
};
#[doc = " Configuration for a publication that does not change during it's lifetime."]
pub type aeron_publication_constants_t = aeron_publication_constants_stct;
unsafe extern "C" {
    #[doc = " Non-blocking publish of a buffer containing a message.\n\n @param publication to publish on.\n @param buffer to publish.\n @param length of the buffer.\n @param reserved_value_supplier to use for setting the reserved value field or NULL.\n @param clientd to pass to the reserved_value_supplier.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_publication_offer(
        publication: *mut aeron_publication_t,
        buffer: *const u8,
        length: usize,
        reserved_value_supplier: aeron_reserved_value_supplier_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Non-blocking publish by gathering buffer vectors into a message.\n\n @param publication to publish on.\n @param iov array for the vectors\n @param iovcnt of the number of vectors\n @param reserved_value_supplier to use for setting the reserved value field or NULL.\n @param clientd to pass to the reserved_value_supplier.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_publication_offerv(
        publication: *mut aeron_publication_t,
        iov: *mut aeron_iovec_t,
        iovcnt: usize,
        reserved_value_supplier: aeron_reserved_value_supplier_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Try to claim a range in the publication log into which a message can be written with zero copy semantics.\n Once the message has been written then aeron_buffer_claim_commit should be called thus making it available.\n A claim length cannot be greater than max payload length.\n <p>\n <b>Note:</b> This method can only be used for message lengths less than MTU length minus header.\n If the claim is held for more than the aeron.publication.unblock.timeout system property then the driver will\n assume the publication thread is dead and will unblock the claim thus allowing other threads to make progress\n and other claims to be sent to reach end-of-stream (EOS).\n\n @code\n aeron_buffer_claim_t buffer_claim;\n\n if (aeron_publication_try_claim(publication, length, &buffer_claim) > 0L)\n {\n     // work with buffer_claim->data directly.\n     aeron_buffer_claim_commit(&buffer_claim);\n }\n @endcode\n\n @param publication to publish to.\n @param length of the message.\n @param buffer_claim to be populated if the claim succeeds.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_publication_try_claim(
        publication: *mut aeron_publication_t,
        length: usize,
        buffer_claim: *mut aeron_buffer_claim_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Get the status of the media channel for this publication.\n <p>\n The status will be ERRORED (-1) if a socket exception occurs on setup and ACTIVE (1) if all is well.\n\n @param publication to check status of.\n @return 1 for ACTIVE, -1 for ERRORED"]
    pub fn aeron_publication_channel_status(publication: *mut aeron_publication_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Has the publication closed?\n\n @param publication to check\n @return true if this publication is closed."]
    pub fn aeron_publication_is_closed(publication: *mut aeron_publication_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Has the publication seen an active Subscriber recently?\n\n @param publication to check.\n @return true if this publication has recently seen an active subscriber otherwise false."]
    pub fn aeron_publication_is_connected(publication: *mut aeron_publication_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Fill in a structure with the constants in use by a publication.\n\n @param publication to get the constants for.\n @param constants structure to fill in with the constants\n @return 0 for success and -1 for error."]
    pub fn aeron_publication_constants(
        publication: *mut aeron_publication_t,
        constants: *mut aeron_publication_constants_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the current position to which the publication has advanced for this stream.\n\n @param publication to query.\n @return the current position to which the publication has advanced for this stream or a negative error value."]
    pub fn aeron_publication_position(publication: *mut aeron_publication_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Get the position limit beyond which this publication will be back pressured.\n\n This should only be used as a guide to determine when back pressure is likely to be applied.\n\n @param publication to query.\n @return the position limit beyond which this publication will be back pressured or a negative error value."]
    pub fn aeron_publication_position_limit(publication: *mut aeron_publication_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Add a destination manually to a multi-destination-cast publication.\n\n @param async object to use for polling completion.\n @param publication to add destination to.\n @param uri for the destination to add.\n @return 0 for success and -1 for error."]
    pub fn aeron_publication_async_add_destination(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        publication: *mut aeron_publication_t,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a destination manually from a multi-destination-cast publication.\n\n @param async object to use for polling completion.\n @param publication to remove destination from.\n @param uri for the destination to remove.\n @return 0 for success and -1 for error."]
    pub fn aeron_publication_async_remove_destination(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        publication: *mut aeron_publication_t,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a destination manually from a multi-destination-cast publication.\n\n @param async object to use for polling completion.\n @param publication to remove destination from.\n @param destination_registration_id for the destination to remove.\n @return 0 for success and -1 for error."]
    pub fn aeron_publication_async_remove_destination_by_id(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        publication: *mut aeron_publication_t,
        destination_registration_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of the add/remove of a destination to/from a publication.\n\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_publication_async_destination_poll(
        async_: *mut aeron_async_destination_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Add a destination manually to a multi-destination-cast exclusive publication.\n\n @param async object to use for polling completion.\n @param publication to add destination to.\n @param uri for the destination to add.\n @return 0 for success and -1 for error."]
    pub fn aeron_exclusive_publication_async_add_destination(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        publication: *mut aeron_exclusive_publication_t,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a destination manually from a multi-destination-cast exclusive publication.\n\n @param async object to use for polling completion.\n @param publication to remove destination from.\n @param uri for the destination to remove.\n @return 0 for success and -1 for error."]
    pub fn aeron_exclusive_publication_async_remove_destination(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        publication: *mut aeron_exclusive_publication_t,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a destination manually from a multi-destination-cast publication.\n\n @param async object to use for polling completion.\n @param publication to remove destination from.\n @param destination_registration_id for the destination to remove.\n @return 0 for success and -1 for error."]
    pub fn aeron_exclusive_publication_async_remove_destination_by_id(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        publication: *mut aeron_exclusive_publication_t,
        destination_registration_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of the add/remove of a destination to/from an exclusive publication.\n\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_exclusive_publication_async_destination_poll(
        async_: *mut aeron_async_destination_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Asynchronously close the publication. Will callback on the on_complete notification when the subscription is closed.\n The callback is optional, use NULL for the on_complete callback if not required.\n\n @param publication to close\n @param on_close_complete optional callback to execute once the subscription has been closed and freed. This may\n happen on a separate thread, so the caller should ensure that clientd has the appropriate lifetime.\n @param on_close_complete_clientd parameter to pass to the on_complete callback.\n @return 0 for success or -1 for error."]
    pub fn aeron_publication_close(
        publication: *mut aeron_publication_t,
        on_close_complete: aeron_notification_t,
        on_close_complete_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the publication's channel\n\n @param publication this\n @return channel uri string"]
    pub fn aeron_publication_channel(
        publication: *mut aeron_publication_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Get the publication's stream id\n\n @param publication this\n @return stream id"]
    pub fn aeron_publication_stream_id(publication: *mut aeron_publication_t) -> i32;
}
unsafe extern "C" {
    #[doc = " Get the publication's session id\n @param publication this\n @return session id"]
    pub fn aeron_publication_session_id(publication: *mut aeron_publication_t) -> i32;
}
unsafe extern "C" {
    #[doc = " Get all of the local socket addresses for this publication. Typically only one representing the control address.\n\n @param subscription to query\n @param address_vec to hold the received addresses\n @param address_vec_len available length of the vector to hold the addresses\n @return number of addresses found or -1 if there is an error.\n @see aeron_subscription_local_sockaddrs"]
    pub fn aeron_publication_local_sockaddrs(
        publication: *mut aeron_publication_t,
        address_vec: *mut aeron_iovec_t,
        address_vec_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Non-blocking publish of a buffer containing a message.\n\n @param publication to publish on.\n @param buffer to publish.\n @param length of the buffer.\n @param reserved_value_supplier to use for setting the reserved value field or NULL.\n @param clientd to pass to the reserved_value_supplier.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_exclusive_publication_offer(
        publication: *mut aeron_exclusive_publication_t,
        buffer: *const u8,
        length: usize,
        reserved_value_supplier: aeron_reserved_value_supplier_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Non-blocking publish by gathering buffer vectors into a message.\n\n @param publication to publish on.\n @param iov array for the vectors\n @param iovcnt of the number of vectors\n @param reserved_value_supplier to use for setting the reserved value field or NULL.\n @param clientd to pass to the reserved_value_supplier.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_exclusive_publication_offerv(
        publication: *mut aeron_exclusive_publication_t,
        iov: *mut aeron_iovec_t,
        iovcnt: usize,
        reserved_value_supplier: aeron_reserved_value_supplier_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Try to claim a range in the publication log into which a message can be written with zero copy semantics.\n Once the message has been written then aeron_buffer_claim_commit should be called thus making it available.\n A claim length cannot be greater than max payload length.\n <p>\n <b>Note:</b> This method can only be used for message lengths less than MTU length minus header.\n\n @code\n aeron_buffer_claim_t buffer_claim;\n\n if (aeron_exclusive_publication_try_claim(publication, length, &buffer_claim) > 0L)\n {\n     // work with buffer_claim->data directly.\n     aeron_buffer_claim_commit(&buffer_claim);\n }\n @endcode\n\n @param publication to publish to.\n @param length of the message.\n @param buffer_claim to be populated if the claim succeeds.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_exclusive_publication_try_claim(
        publication: *mut aeron_exclusive_publication_t,
        length: usize,
        buffer_claim: *mut aeron_buffer_claim_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Append a padding record log of a given length to make up the log to a position.\n\n @param length of the range to claim, in bytes.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_exclusive_publication_append_padding(
        publication: *mut aeron_exclusive_publication_t,
        length: usize,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Offer a block of pre-formatted message fragments directly into the current term.\n\n @param buffer containing the pre-formatted block of message fragments.\n @param offset offset in the buffer at which the first fragment begins.\n @param length in bytes of the encoded block.\n @return the new stream position otherwise a negative error value."]
    pub fn aeron_exclusive_publication_offer_block(
        publication: *mut aeron_exclusive_publication_t,
        buffer: *const u8,
        length: usize,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Get the status of the media channel for this publication.\n <p>\n The status will be ERRORED (-1) if a socket exception occurs on setup and ACTIVE (1) if all is well.\n\n @param publication to check status of.\n @return 1 for ACTIVE, -1 for ERRORED"]
    pub fn aeron_exclusive_publication_channel_status(
        publication: *mut aeron_exclusive_publication_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Fill in a structure with the constants in use by a publication.\n\n @param publication to get the constants for.\n @param constants structure to fill in with the constants\n @return 0 for success and -1 for error."]
    pub fn aeron_exclusive_publication_constants(
        publication: *mut aeron_exclusive_publication_t,
        constants: *mut aeron_publication_constants_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the current position to which the publication has advanced for this stream.\n\n @param publication to query.\n @return the current position to which the publication has advanced for this stream or a negative error value."]
    pub fn aeron_exclusive_publication_position(
        publication: *mut aeron_exclusive_publication_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Get the position limit beyond which this publication will be back pressured.\n\n This should only be used as a guide to determine when back pressure is likely to be applied.\n\n @param publication to query.\n @return the position limit beyond which this publication will be back pressured or a negative error value."]
    pub fn aeron_exclusive_publication_position_limit(
        publication: *mut aeron_exclusive_publication_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Asynchronously close the publication.\n\n @param publication to close\n @return 0 for success or -1 for error."]
    pub fn aeron_exclusive_publication_close(
        publication: *mut aeron_exclusive_publication_t,
        on_close_complete: aeron_notification_t,
        on_close_complete_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Has the exclusive publication closed?\n\n @param publication to check\n @return true if this publication is closed."]
    pub fn aeron_exclusive_publication_is_closed(
        publication: *mut aeron_exclusive_publication_t,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Has the exclusive publication seen an active Subscriber recently?\n\n @param publication to check.\n @return true if this publication has recently seen an active subscriber otherwise false."]
    pub fn aeron_exclusive_publication_is_connected(
        publication: *mut aeron_exclusive_publication_t,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Get all of the local socket addresses for this exclusive publication. Typically only one representing the control\n address.\n\n @see aeron_subscription_local_sockaddrs\n @param subscription to query\n @param address_vec to hold the received addresses\n @param address_vec_len available length of the vector to hold the addresses\n @return number of addresses found or -1 if there is an error."]
    pub fn aeron_exclusive_publication_local_sockaddrs(
        publication: *mut aeron_exclusive_publication_t,
        address_vec: *mut aeron_iovec_t,
        address_vec_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Callback for handling fragments of data being read from a log.\n\n The frame will either contain a whole message or a fragment of a message to be reassembled. Messages are fragmented\n if greater than the frame for MTU in length.\n\n @param clientd passed to the poll function.\n @param buffer containing the data.\n @param length of the data in bytes.\n @param header representing the meta data for the data."]
pub type aeron_fragment_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        header: *mut aeron_header_t,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_controlled_fragment_handler_action_en {
    #[doc = " Abort the current polling operation and do not advance the position for this fragment."]
    AERON_ACTION_ABORT = 1,
    #[doc = " Break from the current polling operation and commit the position as of the end of the current fragment\n being handled."]
    AERON_ACTION_BREAK = 2,
    #[doc = " Continue processing but commit the position as of the end of the current fragment so that\n flow control is applied to this point."]
    AERON_ACTION_COMMIT = 3,
    #[doc = " Continue processing until fragment limit or no fragments with position commit at end of poll as in\n aeron_fragment_handler_t."]
    AERON_ACTION_CONTINUE = 4,
}
pub use self::aeron_controlled_fragment_handler_action_en as aeron_controlled_fragment_handler_action_t;
#[doc = " Callback for handling fragments of data being read from a log.\n\n Handler for reading data that is coming from a log buffer. The frame will either contain a whole message\n or a fragment of a message to be reassembled. Messages are fragmented if greater than the frame for MTU in length.\n\n @param clientd passed to the controlled poll function.\n @param buffer containing the data.\n @param length of the data in bytes.\n @param header representing the meta data for the data.\n @return The action to be taken with regard to the stream position after the callback."]
pub type aeron_controlled_fragment_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        header: *mut aeron_header_t,
    ) -> aeron_controlled_fragment_handler_action_t,
>;
#[doc = " Callback for handling a block of messages being read from a log.\n\n @param clientd passed to the block poll function.\n @param buffer containing the block of message fragments.\n @param offset at which the block begins, including any frame headers.\n @param length of the block in bytes, including any frame headers that is aligned.\n @param session_id of the stream containing this block of message fragments.\n @param term_id of the stream containing this block of message fragments."]
pub type aeron_block_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        session_id: i32,
        term_id: i32,
    ),
>;
unsafe extern "C" {
    #[doc = " Get all of the field values from the header. This will do a memcpy into the supplied header_values_t pointer.\n\n @param header to read values from.\n @param values to copy values to, must not be null.\n @return 0 on success, -1 on failure."]
    pub fn aeron_header_values(
        header: *mut aeron_header_t,
        values: *mut aeron_header_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the current position to which the Image has advanced on reading this message.\n\n @param header the current header message\n @return the current position to which the Image has advanced on reading this message."]
    pub fn aeron_header_position(header: *mut aeron_header_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Get the number of times to left shift the term count to multiply by term length.\n\n @return number of times to left shift the term count to multiply by term length."]
    pub fn aeron_header_position_bits_to_shift(header: *mut aeron_header_t) -> usize;
}
unsafe extern "C" {
    #[doc = " Calculates the offset of the frame immediately after this one.\n\n @return the offset of the next frame."]
    pub fn aeron_header_next_term_offset(header: *mut aeron_header_t) -> i32;
}
unsafe extern "C" {
    #[doc = " Get a pointer to the context associated with this message. Only valid during poll handling. Is normally a\n pointer to an Image instance.\n\n @return a pointer to the context associated with this message."]
    pub fn aeron_header_context(header: *mut aeron_header_t) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscription_constants_stct {
    #[doc = " Media address for delivery to the channel.\n\n This returns a pointer only valid for the lifetime of the subscription."]
    pub channel: *const ::std::os::raw::c_char,
    #[doc = " Callback used to indicate when an Image becomes available under this Subscription."]
    pub on_available_image: aeron_on_available_image_t,
    #[doc = " Callback used to indicate when an Image goes unavailable under this Subscription."]
    pub on_unavailable_image: aeron_on_unavailable_image_t,
    #[doc = " Return the registration id used to register this Subscription with the media driver."]
    pub registration_id: i64,
    #[doc = " Stream identity for scoping within the channel media address."]
    pub stream_id: i32,
    #[doc = " Counter id for the channel status indicator"]
    pub channel_status_indicator_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscription_constants_stct"]
        [::std::mem::size_of::<aeron_subscription_constants_stct>() - 40usize];
    ["Alignment of aeron_subscription_constants_stct"]
        [::std::mem::align_of::<aeron_subscription_constants_stct>() - 8usize];
    ["Offset of field: aeron_subscription_constants_stct::channel"]
        [::std::mem::offset_of!(aeron_subscription_constants_stct, channel) - 0usize];
    ["Offset of field: aeron_subscription_constants_stct::on_available_image"]
        [::std::mem::offset_of!(aeron_subscription_constants_stct, on_available_image) - 8usize];
    ["Offset of field: aeron_subscription_constants_stct::on_unavailable_image"]
        [::std::mem::offset_of!(aeron_subscription_constants_stct, on_unavailable_image) - 16usize];
    ["Offset of field: aeron_subscription_constants_stct::registration_id"]
        [::std::mem::offset_of!(aeron_subscription_constants_stct, registration_id) - 24usize];
    ["Offset of field: aeron_subscription_constants_stct::stream_id"]
        [::std::mem::offset_of!(aeron_subscription_constants_stct, stream_id) - 32usize];
    ["Offset of field: aeron_subscription_constants_stct::channel_status_indicator_id"][::std::mem::offset_of!(
        aeron_subscription_constants_stct,
        channel_status_indicator_id
    )
        - 36usize];
};
pub type aeron_subscription_constants_t = aeron_subscription_constants_stct;
unsafe extern "C" {
    #[doc = " Poll the images under the subscription for available message fragments.\n <p>\n Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come\n as a series of fragments ordered within a session.\n <p>\n To assemble messages that span multiple fragments then use aeron_fragment_assembler_t.\n\n @param subscription to poll.\n @param handler for handling each message fragment as it is read.\n @param fragment_limit number of message fragments to limit when polling across multiple images.\n @return the number of fragments received or -1 for error."]
    pub fn aeron_subscription_poll(
        subscription: *mut aeron_subscription_t,
        handler: aeron_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        fragment_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll in a controlled manner the images under the subscription for available message fragments.\n Control is applied to fragments in the stream. If more fragments can be read on another stream\n they will even if BREAK or ABORT is returned from the fragment handler.\n <p>\n Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come\n as a series of fragments ordered within a session.\n <p>\n To assemble messages that span multiple fragments then use aeron_controlled_fragment_assembler_t.\n\n @param subscription to poll.\n @param handler for handling each message fragment as it is read.\n @param fragment_limit number of message fragments to limit when polling across multiple images.\n @return the number of fragments received or -1 for error."]
    pub fn aeron_subscription_controlled_poll(
        subscription: *mut aeron_subscription_t,
        handler: aeron_controlled_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        fragment_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the images under the subscription for available message fragments in blocks.\n <p>\n This method is useful for operations like bulk archiving and messaging indexing.\n\n @param subscription to poll.\n @param handler to receive a block of fragments from each image.\n @param block_length_limit for each image polled.\n @return the number of bytes consumed or -1 for error."]
    pub fn aeron_subscription_block_poll(
        subscription: *mut aeron_subscription_t,
        handler: aeron_block_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        block_length_limit: usize,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[doc = " Is this subscription connected by having at least one open publication image.\n\n @param subscription to check.\n @return true if this subscription connected by having at least one open publication image."]
    pub fn aeron_subscription_is_connected(subscription: *mut aeron_subscription_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Fill in a structure with the constants in use by a subscription.\n\n @param subscription to get the constants for.\n @param constants structure to fill in with the constants\n @return 0 for success and -1 for error."]
    pub fn aeron_subscription_constants(
        subscription: *mut aeron_subscription_t,
        constants: *mut aeron_subscription_constants_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Count of images associated to this subscription.\n\n @param subscription to count images for.\n @return count of count associated to this subscription or -1 for error."]
    pub fn aeron_subscription_image_count(
        subscription: *mut aeron_subscription_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return the image associated with the given session_id under the given subscription.\n\n Note: the returned image is considered retained by the application and thus must be released via\n aeron_image_release when finished or if the image becomes unavailable.\n\n @param subscription to search.\n @param session_id associated with the image.\n @return image associated with the given session_id or NULL if no image exists."]
    pub fn aeron_subscription_image_by_session_id(
        subscription: *mut aeron_subscription_t,
        session_id: i32,
    ) -> *mut aeron_image_t;
}
unsafe extern "C" {
    #[doc = " Return the image at the given index.\n\n Note: the returned image is considered retained by the application and thus must be released via\n aeron_image_release when finished or if the image becomes unavailable.\n\n @param subscription to search.\n @param index for the image.\n @return image at the given index or NULL if no image exists."]
    pub fn aeron_subscription_image_at_index(
        subscription: *mut aeron_subscription_t,
        index: usize,
    ) -> *mut aeron_image_t;
}
unsafe extern "C" {
    #[doc = " Iterate over the images for this subscription calling the given function.\n\n @param subscription to iterate over.\n @param handler to be called for each image.\n @param clientd to be passed to the handler."]
    pub fn aeron_subscription_for_each_image(
        subscription: *mut aeron_subscription_t,
        handler: ::std::option::Option<
            unsafe extern "C" fn(image: *mut aeron_image_t, clientd: *mut ::std::os::raw::c_void),
        >,
        clientd: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " Retain the given image for access in the application.\n\n Note: A retain call must have a corresponding release call.\n Note: Subscriptions are not threadsafe and should not be shared between subscribers.\n\n @param subscription that image is part of.\n @param image to retain\n @return 0 for success and -1 for error."]
    pub fn aeron_subscription_image_retain(
        subscription: *mut aeron_subscription_t,
        image: *mut aeron_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Release the given image and relinquish desire to use the image directly.\n\n Note: Subscriptions are not threadsafe and should not be shared between subscribers.\n\n @param subscription that image is part of.\n @param image to release\n @return 0 for success and -1 for error."]
    pub fn aeron_subscription_image_release(
        subscription: *mut aeron_subscription_t,
        image: *mut aeron_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Is the subscription closed.\n\n @param subscription to be checked.\n @return true if it has been closed otherwise false."]
    pub fn aeron_subscription_is_closed(subscription: *mut aeron_subscription_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Get the status of the media channel for this subscription.\n <p>\n The status will be ERRORED (-1) if a socket exception occurs on setup and ACTIVE (1) if all is well.\n\n @param subscription to check status of.\n @return 1 for ACTIVE, -1 for ERRORED"]
    pub fn aeron_subscription_channel_status(subscription: *mut aeron_subscription_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Add a destination manually to a multi-destination-subscription.\n\n @param async object to use for polling completion.\n @param subscription to add destination to.\n @param uri for the destination to add.\n @return 0 for success and -1 for error."]
    pub fn aeron_subscription_async_add_destination(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        subscription: *mut aeron_subscription_t,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Remove a destination manually from a multi-destination-subscription.\n\n @param async object to use for polling completion.\n @param subscription to remove destination from.\n @param uri for the destination to remove.\n @return 0 for success and -1 for error."]
    pub fn aeron_subscription_async_remove_destination(
        async_: *mut *mut aeron_async_destination_t,
        client: *mut aeron_t,
        subscription: *mut aeron_subscription_t,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll the completion of add/remove of a destination to/from a subscription.\n\n @param async to check for completion.\n @return 0 for not complete (try again), 1 for completed successfully, or -1 for an error."]
    pub fn aeron_subscription_async_destination_poll(
        async_: *mut aeron_async_destination_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Asynchronously close the subscription. Will callback on the on_complete notification when the subscription is\n closed. The callback is optional, use NULL for the on_complete callback if not required.\n\n @param subscription to close\n @param on_close_complete optional callback to execute once the subscription has been closed and freed. This may\n happen on a separate thread, so the caller should ensure that clientd has the appropriate lifetime.\n @param on_close_complete_clientd parameter to pass to the on_complete callback.\n @return 0 for success or -1 for error."]
    pub fn aeron_subscription_close(
        subscription: *mut aeron_subscription_t,
        on_close_complete: aeron_notification_t,
        on_close_complete_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get all of the local socket addresses for this subscription. Multiple addresses can occur if this is a\n multi-destination subscription. Addresses will a string representation in numeric form. IPv6 addresses will be\n surrounded by '[' and ']' so that the ':' that separate the parts are distinguishable from the port delimiter.\n E.g. [fe80::7552:c06e:6bf4:4160]:12345. As of writing the maximum length for a formatted address is 54 bytes\n including the NULL terminator. AERON_CLIENT_MAX_LOCAL_ADDRESS_STR_LEN is defined to provide enough space to fit the\n returned string. Returned strings will be NULL terminated. If the buffer to hold the address can not hold enough\n of the message it will be truncated and the last character will be null.\n\n If the address_vec_len is less the total number of addresses available then the first addresses found up to that\n length will be placed into the address_vec. However the function will return the total number of addresses available\n so if if that is larger than the input array then the client code may wish to re-query with a larger array to get\n them all.\n\n @param subscription to query\n @param address_vec to hold the received addresses\n @param address_vec_len available length of the vector to hold the addresses\n @return number of addresses found or -1 if there is an error."]
    pub fn aeron_subscription_local_sockaddrs(
        subscription: *mut aeron_subscription_t,
        address_vec: *mut aeron_iovec_t,
        address_vec_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves the first local socket address for this subscription. If this is not MDS then it will be the one\n representing endpoint for this subscription.\n\n @see aeron_subscription_local_sockaddrs\n @param subscription to query\n @param address for the received address\n @param address_len available length for the copied address.\n @return -1 on error, 0 if address not found, 1 if address is found."]
    pub fn aeron_subscription_resolved_endpoint(
        subscription: *mut aeron_subscription_t,
        address: *const ::std::os::raw::c_char,
        address_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves the channel URI for this subscription with any wildcard ports filled in. If the channel is not UDP or\n does not have a wildcard port (<code>0</code>), then it will return the original URI.\n\n @param subscription to query\n @param uri buffer to hold the resolved uri\n @param uri_len length of the buffer\n @return -1 on failure or the number of bytes written to the buffer (excluding the NULL terminator). Writing is done\n on a per key basis, so if the buffer was truncated before writing completed, it will only include the byte count up\n to the key that overflowed. However, the invariant that if the number returned >= uri_len, then output will have been\n truncated."]
    pub fn aeron_subscription_try_resolve_channel_endpoint_port(
        subscription: *mut aeron_subscription_t,
        uri: *mut ::std::os::raw::c_char,
        uri_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Configuration for an image that does not change during it's lifetime."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_image_constants_stct {
    #[doc = " The subscription to which this image belongs."]
    pub subscription: *mut aeron_subscription_t,
    #[doc = " The source identity of the sending publisher as an abstract concept appropriate for the media."]
    pub source_identity: *const ::std::os::raw::c_char,
    #[doc = " The correlationId for identification of the image with the media driver."]
    pub correlation_id: i64,
    #[doc = " Get the position the subscriber joined this stream at."]
    pub join_position: i64,
    #[doc = " Number of bits to right shift a position to get a term count for how far the stream has progressed."]
    pub position_bits_to_shift: usize,
    #[doc = " Get the length in bytes for each term partition in the log buffer."]
    pub term_buffer_length: usize,
    #[doc = " The length in bytes of the MTU (Maximum Transmission Unit) the Sender used for the datagram."]
    pub mtu_length: usize,
    #[doc = " The sessionId for the steam of messages. Sessions are unique within a subscription and unique across\n all publications from a source identity."]
    pub session_id: i32,
    #[doc = " The initial term at which the stream started for this session."]
    pub initial_term_id: i32,
    #[doc = " Counter id that refers to the subscriber position for this image."]
    pub subscriber_position_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_image_constants_stct"]
        [::std::mem::size_of::<aeron_image_constants_stct>() - 72usize];
    ["Alignment of aeron_image_constants_stct"]
        [::std::mem::align_of::<aeron_image_constants_stct>() - 8usize];
    ["Offset of field: aeron_image_constants_stct::subscription"]
        [::std::mem::offset_of!(aeron_image_constants_stct, subscription) - 0usize];
    ["Offset of field: aeron_image_constants_stct::source_identity"]
        [::std::mem::offset_of!(aeron_image_constants_stct, source_identity) - 8usize];
    ["Offset of field: aeron_image_constants_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_image_constants_stct, correlation_id) - 16usize];
    ["Offset of field: aeron_image_constants_stct::join_position"]
        [::std::mem::offset_of!(aeron_image_constants_stct, join_position) - 24usize];
    ["Offset of field: aeron_image_constants_stct::position_bits_to_shift"]
        [::std::mem::offset_of!(aeron_image_constants_stct, position_bits_to_shift) - 32usize];
    ["Offset of field: aeron_image_constants_stct::term_buffer_length"]
        [::std::mem::offset_of!(aeron_image_constants_stct, term_buffer_length) - 40usize];
    ["Offset of field: aeron_image_constants_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_image_constants_stct, mtu_length) - 48usize];
    ["Offset of field: aeron_image_constants_stct::session_id"]
        [::std::mem::offset_of!(aeron_image_constants_stct, session_id) - 56usize];
    ["Offset of field: aeron_image_constants_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_image_constants_stct, initial_term_id) - 60usize];
    ["Offset of field: aeron_image_constants_stct::subscriber_position_id"]
        [::std::mem::offset_of!(aeron_image_constants_stct, subscriber_position_id) - 64usize];
};
#[doc = " Configuration for an image that does not change during it's lifetime."]
pub type aeron_image_constants_t = aeron_image_constants_stct;
unsafe extern "C" {
    #[doc = " Fill in a structure with the constants in use by a image.\n\n @param image to get the constants for.\n @param constants structure to fill in with the constants\n @return 0 for success and -1 for error."]
    pub fn aeron_image_constants(
        image: *mut aeron_image_t,
        constants: *mut aeron_image_constants_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " The position this image has been consumed to by the subscriber.\n\n @param image to query position of.\n @return the position this image has been consumed to by the subscriber."]
    pub fn aeron_image_position(image: *mut aeron_image_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Set the subscriber position for this image to indicate where it has been consumed to.\n\n @param image to set the position of.\n @param new_position for the consumption point."]
    pub fn aeron_image_set_position(
        image: *mut aeron_image_t,
        position: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Is the current consumed position at the end of the stream?\n\n @param image to check.\n @return true if at the end of the stream or false if not."]
    pub fn aeron_image_is_end_of_stream(image: *mut aeron_image_t) -> bool;
}
unsafe extern "C" {
    #[doc = " The position the stream reached when EOS was received from the publisher. The position will be\n INT64_MAX until the stream ends and EOS is set.\n\n @param image to check.\n @return position the stream reached when EOS was received from the publisher."]
    pub fn aeron_image_end_of_stream_position(image: *mut aeron_image_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Count of observed active transports within the image liveness timeout.\n\n If the image is closed, then this is 0. This may also be 0 if no actual datagrams have arrived. IPC\n Images also will be 0.\n\n @param image to check.\n @return count of active transports - 0 if Image is closed, no datagrams yet, or IPC. Or -1 for error."]
    pub fn aeron_image_active_transport_count(image: *mut aeron_image_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll for new messages in a stream. If new messages are found beyond the last consumed position then they\n will be delivered to the handler up to a limited number of fragments as specified.\n <p>\n Use a fragment assembler to assemble messages which span multiple fragments.\n\n @param image to poll.\n @param handler to which message fragments are delivered.\n @param clientd to pass to the handler.\n @param fragment_limit for the number of fragments to be consumed during one polling operation.\n @return the number of fragments that have been consumed or -1 for error."]
    pub fn aeron_image_poll(
        image: *mut aeron_image_t,
        handler: aeron_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        fragment_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll for new messages in a stream. If new messages are found beyond the last consumed position then they\n will be delivered to the handler up to a limited number of fragments as specified.\n <p>\n Use a controlled fragment assembler to assemble messages which span multiple fragments.\n\n @param image to poll.\n @param handler to which message fragments are delivered.\n @param clientd to pass to the handler.\n @param fragment_limit for the number of fragments to be consumed during one polling operation.\n @return the number of fragments that have been consumed or -1 for error."]
    pub fn aeron_image_controlled_poll(
        image: *mut aeron_image_t,
        handler: aeron_controlled_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        fragment_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll for new messages in a stream. If new messages are found beyond the last consumed position then they\n will be delivered to the handler up to a limited number of fragments as specified or the maximum position specified.\n <p>\n Use a fragment assembler to assemble messages which span multiple fragments.\n\n @param image to poll.\n @param handler to which message fragments are delivered.\n @param clientd to pass to the handler.\n @param limit_position to consume messages up to.\n @param fragment_limit for the number of fragments to be consumed during one polling operation.\n @return the number of fragments that have been consumed or -1 for error."]
    pub fn aeron_image_bounded_poll(
        image: *mut aeron_image_t,
        handler: aeron_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        limit_position: i64,
        fragment_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Poll for new messages in a stream. If new messages are found beyond the last consumed position then they\n will be delivered to the handler up to a limited number of fragments as specified or the maximum position specified.\n <p>\n Use a controlled fragment assembler to assemble messages which span multiple fragments.\n\n @param image to poll.\n @param handler to which message fragments are delivered.\n @param clientd to pass to the handler.\n @param limit_position to consume messages up to.\n @param fragment_limit for the number of fragments to be consumed during one polling operation.\n @return the number of fragments that have been consumed or -1 for error."]
    pub fn aeron_image_bounded_controlled_poll(
        image: *mut aeron_image_t,
        handler: aeron_controlled_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        limit_position: i64,
        fragment_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Peek for new messages in a stream by scanning forward from an initial position. If new messages are found then\n they will be delivered to the handler up to a limited position.\n <p>\n Use a controlled fragment assembler to assemble messages which span multiple fragments. Scans must also\n start at the beginning of a message so that the assembler is reset.\n\n @param image to peek.\n @param initial_position from which to peek forward.\n @param handler to which message fragments are delivered.\n @param clientd to pass to the handler.\n @param limit_position up to which can be scanned.\n @return the resulting position after the scan terminates which is a complete message or -1 for error."]
    pub fn aeron_image_controlled_peek(
        image: *mut aeron_image_t,
        initial_position: i64,
        handler: aeron_controlled_fragment_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        limit_position: i64,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Poll for new messages in a stream. If new messages are found beyond the last consumed position then they\n will be delivered to the handler up to a limited number of bytes.\n <p>\n A scan will terminate if a padding frame is encountered. If first frame in a scan is padding then a block\n for the padding is notified. If the padding comes after the first frame in a scan then the scan terminates\n at the offset the padding frame begins. Padding frames are delivered singularly in a block.\n <p>\n Padding frames may be for a greater range than the limit offset but only the header needs to be valid so\n relevant length of the frame is data header length.\n\n @param image to poll.\n @param handler to which block is delivered.\n @param clientd to pass to the handler.\n @param block_length_limit up to which a block may be in length.\n @return the number of bytes that have been consumed or -1 for error."]
    pub fn aeron_image_block_poll(
        image: *mut aeron_image_t,
        handler: aeron_block_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        block_length_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_image_is_closed(image: *mut aeron_image_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Create an image fragment assembler for use with a single image.\n\n @param assembler to be set when created successfully.\n @param delegate to call on completed.\n @param delegate_clientd to pass to delegate handler.\n @return 0 for success and -1 for error."]
    pub fn aeron_image_fragment_assembler_create(
        assembler: *mut *mut aeron_image_fragment_assembler_t,
        delegate: aeron_fragment_handler_t,
        delegate_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Delete an image fragment assembler.\n\n @param assembler to delete.\n @return 0 for success or -1 for error."]
    pub fn aeron_image_fragment_assembler_delete(
        assembler: *mut aeron_image_fragment_assembler_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Handler function to be passed for handling fragment assembly.\n\n @param clientd passed in the poll call (must be a aeron_image_fragment_assembler_t)\n @param buffer containing the data.\n @param length of the data in bytes.\n @param header representing the meta data for the data."]
    pub fn aeron_image_fragment_assembler_handler(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        header: *mut aeron_header_t,
    );
}
unsafe extern "C" {
    #[doc = " Create an image controlled fragment assembler for use with a single image.\n\n @param assembler to be set when created successfully.\n @param delegate to call on completed\n @param delegate_clientd to pass to delegate handler.\n @return 0 for success and -1 for error."]
    pub fn aeron_image_controlled_fragment_assembler_create(
        assembler: *mut *mut aeron_image_controlled_fragment_assembler_t,
        delegate: aeron_controlled_fragment_handler_t,
        delegate_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Delete an image controlled fragment assembler.\n\n @param assembler to delete.\n @return 0 for success or -1 for error."]
    pub fn aeron_image_controlled_fragment_assembler_delete(
        assembler: *mut aeron_image_controlled_fragment_assembler_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Handler function to be passed for handling fragment assembly.\n\n @param clientd passed in the poll call (must be a aeron_image_controlled_fragment_assembler_t)\n @param buffer containing the data.\n @param length of the data in bytes.\n @param header representing the meta data for the data.\n @return The action to be taken with regard to the stream position after the callback."]
    pub fn aeron_image_controlled_fragment_assembler_handler(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        header: *mut aeron_header_t,
    ) -> aeron_controlled_fragment_handler_action_t;
}
unsafe extern "C" {
    #[doc = " Create a fragment assembler for use with a subscription.\n\n @param assembler to be set when created successfully.\n @param delegate to call on completed\n @param delegate_clientd to pass to delegate handler.\n @return 0 for success and -1 for error."]
    pub fn aeron_fragment_assembler_create(
        assembler: *mut *mut aeron_fragment_assembler_t,
        delegate: aeron_fragment_handler_t,
        delegate_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Delete a fragment assembler.\n\n @param assembler to delete.\n @return 0 for success or -1 for error."]
    pub fn aeron_fragment_assembler_delete(
        assembler: *mut aeron_fragment_assembler_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Handler function to be passed for handling fragment assembly.\n\n @param clientd passed in the poll call (must be a aeron_fragment_assembler_t)\n @param buffer containing the data.\n @param length of the data in bytes.\n @param header representing the meta data for the data."]
    pub fn aeron_fragment_assembler_handler(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        header: *mut aeron_header_t,
    );
}
unsafe extern "C" {
    #[doc = " Create a controlled fragment assembler for use with a subscription.\n\n @param assembler to be set when created successfully.\n @param delegate to call on completed\n @param delegate_clientd to pass to delegate handler.\n @return 0 for success and -1 for error."]
    pub fn aeron_controlled_fragment_assembler_create(
        assembler: *mut *mut aeron_controlled_fragment_assembler_t,
        delegate: aeron_controlled_fragment_handler_t,
        delegate_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Delete a controlled fragment assembler.\n\n @param assembler to delete.\n @return 0 for success or -1 for error."]
    pub fn aeron_controlled_fragment_assembler_delete(
        assembler: *mut aeron_controlled_fragment_assembler_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Handler function to be passed for handling fragment assembly.\n\n @param clientd passed in the poll call (must be a aeron_controlled_fragment_assembler_t)\n @param buffer containing the data.\n @param length of the data in bytes.\n @param header representing the meta data for the data.\n @return The action to be taken with regard to the stream position after the callback."]
    pub fn aeron_controlled_fragment_assembler_handler(
        clientd: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        length: usize,
        header: *mut aeron_header_t,
    ) -> aeron_controlled_fragment_handler_action_t;
}
unsafe extern "C" {
    #[doc = " Return a pointer to the counter value.\n\n @param counter to pointer to.\n @return pointer to the counter value."]
    pub fn aeron_counter_addr(counter: *mut aeron_counter_t) -> *mut i64;
}
#[doc = " Configuration for a counter that does not change during it's lifetime."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_constants_stct {
    #[doc = " Return the registration id used to register this counter with the media driver."]
    pub registration_id: i64,
    #[doc = " Identity for the counter within the counters reader and counters manager."]
    pub counter_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counter_constants_stct"]
        [::std::mem::size_of::<aeron_counter_constants_stct>() - 16usize];
    ["Alignment of aeron_counter_constants_stct"]
        [::std::mem::align_of::<aeron_counter_constants_stct>() - 8usize];
    ["Offset of field: aeron_counter_constants_stct::registration_id"]
        [::std::mem::offset_of!(aeron_counter_constants_stct, registration_id) - 0usize];
    ["Offset of field: aeron_counter_constants_stct::counter_id"]
        [::std::mem::offset_of!(aeron_counter_constants_stct, counter_id) - 8usize];
};
#[doc = " Configuration for a counter that does not change during it's lifetime."]
pub type aeron_counter_constants_t = aeron_counter_constants_stct;
unsafe extern "C" {
    #[doc = " Fill in a structure with the constants in use by a counter.\n\n @param counter to get the constants for.\n @param constants structure to fill in with the constants.\n @return 0 for success and -1 for error."]
    pub fn aeron_counter_constants(
        counter: *mut aeron_counter_t,
        constants: *mut aeron_counter_constants_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Asynchronously close the counter.\n\n @param counter to close.\n @return 0 for success or -1 for error."]
    pub fn aeron_counter_close(
        counter: *mut aeron_counter_t,
        on_close_complete: aeron_notification_t,
        on_close_complete_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Check if the counter is closed\n @param counter to check\n @return true if closed, false otherwise."]
    pub fn aeron_counter_is_closed(counter: *mut aeron_counter_t) -> bool;
}
unsafe extern "C" {
    #[doc = " Return full version and build string.\n\n @return full version and build string."]
    pub fn aeron_version_full() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Return version text.\n\n @return version text."]
    pub fn aeron_version_text() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Return major version number.\n\n @return major version number."]
    pub fn aeron_version_major() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return minor version number.\n\n @return minor version number."]
    pub fn aeron_version_minor() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return patch version number.\n\n @return patch version number."]
    pub fn aeron_version_patch() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return the git sha for the current build.\n\n @return git version"]
    pub fn aeron_version_gitsha() -> *const ::std::os::raw::c_char;
}
#[doc = " Clock function used by aeron."]
pub type aeron_clock_func_t = ::std::option::Option<unsafe extern "C" fn() -> i64>;
unsafe extern "C" {
    #[doc = " Return time in nanoseconds for machine. Is not wall clock time.\n\n @return nanoseconds since epoch for machine."]
    pub fn aeron_nano_clock() -> i64;
}
unsafe extern "C" {
    #[doc = " Return time in milliseconds since epoch. Is wall clock time.\n\n @return milliseconds since epoch."]
    pub fn aeron_epoch_clock() -> i64;
}
#[doc = " Function to return logging information."]
pub type aeron_log_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>;
unsafe extern "C" {
    #[doc = " Determine if an aeron driver is using a given aeron directory.\n\n @param dirname  for aeron directory\n @param timeout_ms  to use to determine activity for aeron directory\n @param log_func to call during activity check to log diagnostic information.\n @return true for active driver or false for no active driver."]
    pub fn aeron_is_driver_active(
        dirname: *const ::std::os::raw::c_char,
        timeout_ms: i64,
        log_func: aeron_log_func_t,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Load properties from a string containing name=value pairs and set appropriate environment variables for the\n process so that subsequent calls to aeron_driver_context_init will use those values.\n\n @param buffer containing properties and values.\n @return 0 for success and -1 for error."]
    pub fn aeron_properties_buffer_load(
        buffer: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Load properties file and set appropriate environment variables for the process so that subsequent\n calls to aeron_driver_context_init will use those values.\n\n @param filename to load.\n @return 0 for success and -1 for error."]
    pub fn aeron_properties_file_load(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Load properties from HTTP URL and set environment variables for the process so that subsequent\n calls to aeron_driver_context_init will use those values.\n\n @param url to attempt to retrieve and load.\n @return 0 for success and -1 for error."]
    pub fn aeron_properties_http_load(url: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Load properties based on URL or filename. If string contains file or http URL, it will attempt\n to load properties from a file or http as indicated. If not a URL, then it will try to load the string\n as a filename.\n\n @param url_or_filename to load properties from.\n @return 0 for success and -1 for error."]
    pub fn aeron_properties_load(
        url_or_filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return current aeron error code (errno) for calling thread.\n\n @return aeron error code for calling thread."]
    pub fn aeron_errcode() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Return the current aeron error message for calling thread.\n\n @return aeron error message for calling thread."]
    pub fn aeron_errmsg() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Get the default path used by the Aeron media driver.\n\n @param path buffer to store the path.\n @param path_length space available in the buffer\n @return -1 if there is an issue or the number of bytes written to path excluding the terminator <code>\\0</code>. If this\n is equal to or greater than the path_length then the path has been truncated."]
    pub fn aeron_default_path(
        path: *mut ::std::os::raw::c_char,
        path_length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Gets the registration id for addition of the counter. Note that using this after a call to poll the succeeds or\n errors is undefined behaviour. As the async_add_counter_t may have been freed.\n\n @param add_counter used to check for completion.\n @return registration id for the counter."]
    pub fn aeron_async_add_counter_get_registration_id(
        add_counter: *mut aeron_async_add_counter_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Gets the registration id for addition of the publication. Note that using this after a call to poll the succeeds or\n errors is undefined behaviour. As the async_add_publication_t may have been freed.\n\n @param add_publication used to check for completion.\n @return registration id for the publication."]
    pub fn aeron_async_add_publication_get_registration_id(
        add_publication: *mut aeron_async_add_publication_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Gets the registration id for addition of the exclusive_publication. Note that using this after a call to poll the\n succeeds or errors is undefined behaviour. As the async_add_exclusive_publication_t may have been freed.\n\n @param add_exclusive_publication used to check for completion.\n @return registration id for the exclusive_publication."]
    pub fn aeron_async_add_exclusive_exclusive_publication_get_registration_id(
        add_exclusive_publication: *mut aeron_async_add_exclusive_publication_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Gets the registration id for addition of the subscription. Note that using this after a call to poll the succeeds or\n errors is undefined behaviour. As the async_add_subscription_t may have been freed.\n\n @param add_subscription used to check for completion.\n @return registration id for the subscription."]
    pub fn aeron_async_add_subscription_get_registration_id(
        add_subscription: *mut aeron_async_add_subscription_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Gets the registration_id for the destination command supplied. Note that this is the correlation_id used for\n the specified destination command, not the registration_id for the original parent resource (publication,\n subscription).\n\n @param async_destination tracking the current destination command.\n @return correlation_id sent to driver."]
    pub fn aeron_async_destination_get_registration_id(
        async_destination: *mut aeron_async_destination_t,
    ) -> i64;
}
unsafe extern "C" {
    #[doc = " Request the media driver terminates operation and closes all resources.\n\n @param directory    in which the media driver is running.\n @param token_buffer containing the authentication token confirming the client is allowed to terminate the driver.\n @param token_length of the token in the buffer.\n @return"]
    pub fn aeron_context_request_driver_termination(
        directory: *const ::std::os::raw::c_char,
        token_buffer: *const u8,
        token_length: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_cnc_stct {
    _unused: [u8; 0],
}
pub type aeron_cnc_t = aeron_cnc_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_cnc_constants_stct {
    pub cnc_version: i32,
    pub to_driver_buffer_length: i32,
    pub to_clients_buffer_length: i32,
    pub counter_metadata_buffer_length: i32,
    pub counter_values_buffer_length: i32,
    pub error_log_buffer_length: i32,
    pub client_liveness_timeout: i64,
    pub start_timestamp: i64,
    pub pid: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_cnc_constants_stct"]
        [::std::mem::size_of::<aeron_cnc_constants_stct>() - 48usize];
    ["Alignment of aeron_cnc_constants_stct"]
        [::std::mem::align_of::<aeron_cnc_constants_stct>() - 4usize];
    ["Offset of field: aeron_cnc_constants_stct::cnc_version"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, cnc_version) - 0usize];
    ["Offset of field: aeron_cnc_constants_stct::to_driver_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, to_driver_buffer_length) - 4usize];
    ["Offset of field: aeron_cnc_constants_stct::to_clients_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, to_clients_buffer_length) - 8usize];
    ["Offset of field: aeron_cnc_constants_stct::counter_metadata_buffer_length"][::std::mem::offset_of!(
        aeron_cnc_constants_stct,
        counter_metadata_buffer_length
    ) - 12usize];
    ["Offset of field: aeron_cnc_constants_stct::counter_values_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, counter_values_buffer_length) - 16usize];
    ["Offset of field: aeron_cnc_constants_stct::error_log_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, error_log_buffer_length) - 20usize];
    ["Offset of field: aeron_cnc_constants_stct::client_liveness_timeout"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, client_liveness_timeout) - 24usize];
    ["Offset of field: aeron_cnc_constants_stct::start_timestamp"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, start_timestamp) - 32usize];
    ["Offset of field: aeron_cnc_constants_stct::pid"]
        [::std::mem::offset_of!(aeron_cnc_constants_stct, pid) - 40usize];
};
pub type aeron_cnc_constants_t = aeron_cnc_constants_stct;
unsafe extern "C" {
    #[doc = " Initialise an aeron_cnc, which gives user level access to the command and control file used to communicate\n with the media driver. Will wait until the media driver has loaded and the cnc file is created, up to timeout_ms.\n Use a value of 0 for a non-blocking initialisation.\n\n @param aeron_cnc to hold the loaded aeron_cnc\n @param base_path media driver's base path\n @param timeout_ms Number of milliseconds to wait before timing out.\n @return 0 on success, -1 on failure."]
    pub fn aeron_cnc_init(
        aeron_cnc: *mut *mut aeron_cnc_t,
        base_path: *const ::std::os::raw::c_char,
        timeout_ms: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Fetch the sets of constant values associated with this command and control file.\n\n @param aeron_cnc to query\n @param constants user supplied structure to hold return values.\n @return 0 on success, -1 on failure."]
    pub fn aeron_cnc_constants(
        aeron_cnc: *mut aeron_cnc_t,
        constants: *mut aeron_cnc_constants_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the current file name of the cnc file.\n\n @param aeron_cnc to query\n @return name of the cnc file"]
    pub fn aeron_cnc_filename(aeron_cnc: *mut aeron_cnc_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Gets the timestamp of the last heartbeat sent to the media driver from any client.\n\n @param aeron_cnc to query\n @return last heartbeat timestamp in ms."]
    pub fn aeron_cnc_to_driver_heartbeat(aeron_cnc: *mut aeron_cnc_t) -> i64;
}
pub type aeron_error_log_reader_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        observation_count: i32,
        first_observation_timestamp: i64,
        last_observation_timestamp: i64,
        error: *const ::std::os::raw::c_char,
        error_length: usize,
        clientd: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    #[doc = " Reads the current error log for this driver.\n\n @param aeron_cnc to query\n @param callback called for every distinct error observation\n @param clientd client data to be passed to the callback\n @param since_timestamp only return errors after this timestamp (0 returns all)\n @return the number of distinct errors seen"]
    pub fn aeron_cnc_error_log_read(
        aeron_cnc: *mut aeron_cnc_t,
        callback: aeron_error_log_reader_func_t,
        clientd: *mut ::std::os::raw::c_void,
        since_timestamp: i64,
    ) -> usize;
}
unsafe extern "C" {
    #[doc = " Gets a counters reader for this command and control file. This does not need to be closed manually, resources\n are tied to the instance of aeron_cnc.\n\n @param aeron_cnc to query\n @return pointer to a counters reader."]
    pub fn aeron_cnc_counters_reader(aeron_cnc: *mut aeron_cnc_t) -> *mut aeron_counters_reader_t;
}
pub type aeron_loss_reporter_read_entry_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        observation_count: i64,
        total_bytes_lost: i64,
        first_observation_timestamp: i64,
        last_observation_timestamp: i64,
        session_id: i32,
        stream_id: i32,
        channel: *const ::std::os::raw::c_char,
        channel_length: i32,
        source: *const ::std::os::raw::c_char,
        source_length: i32,
    ),
>;
unsafe extern "C" {
    #[doc = " Read all of the data loss observations from the report in the same media driver instances as the cnc file.\n\n @param aeron_cnc to query\n @param entry_func callback for each observation found\n @param clientd client data to be passed to the callback.\n @return -1 on failure, number of observations on success (could be 0)."]
    pub fn aeron_cnc_loss_reporter_read(
        aeron_cnc: *mut aeron_cnc_t,
        entry_func: aeron_loss_reporter_read_entry_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Closes the instance of the aeron cnc and frees its resources.\n\n @param aeron_cnc to close"]
    pub fn aeron_cnc_close(aeron_cnc: *mut aeron_cnc_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
unsafe extern "C" {
    pub fn aeron_randomised_int32() -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_clock_cache_stct {
    pub pre_pad: [u8; 56usize],
    pub cached_epoch_time: i64,
    pub cached_nano_time: i64,
    pub post_pad: [u8; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_clock_cache_stct"][::std::mem::size_of::<aeron_clock_cache_stct>() - 128usize];
    ["Alignment of aeron_clock_cache_stct"]
        [::std::mem::align_of::<aeron_clock_cache_stct>() - 8usize];
    ["Offset of field: aeron_clock_cache_stct::pre_pad"]
        [::std::mem::offset_of!(aeron_clock_cache_stct, pre_pad) - 0usize];
    ["Offset of field: aeron_clock_cache_stct::cached_epoch_time"]
        [::std::mem::offset_of!(aeron_clock_cache_stct, cached_epoch_time) - 56usize];
    ["Offset of field: aeron_clock_cache_stct::cached_nano_time"]
        [::std::mem::offset_of!(aeron_clock_cache_stct, cached_nano_time) - 64usize];
    ["Offset of field: aeron_clock_cache_stct::post_pad"]
        [::std::mem::offset_of!(aeron_clock_cache_stct, post_pad) - 72usize];
};
pub type aeron_clock_cache_t = aeron_clock_cache_stct;
unsafe extern "C" {
    #[doc = " Update the cached clock with the current epoch and nano time values.\n\n @param cached_clock 'this'\n @param epoch_time current ms since epoch.\n @param nano_time current ns time."]
    pub fn aeron_clock_update_cached_time(
        cached_clock: *mut aeron_clock_cache_t,
        epoch_time: i64,
        nano_time: i64,
    );
}
unsafe extern "C" {
    #[doc = " Update the cached clock with the current epoch time value.\n\n @param cached_clock 'this'\n @param epoch_time current ms since epoch."]
    pub fn aeron_clock_update_cached_epoch_time(
        cached_clock: *mut aeron_clock_cache_t,
        epoch_time: i64,
    );
}
unsafe extern "C" {
    #[doc = " Update the cached clock with the current nano time value.\n\n @param cached_clock 'this'\n @param nano_time current ns time."]
    pub fn aeron_clock_update_cached_nano_time(
        cached_clock: *mut aeron_clock_cache_t,
        nano_time: i64,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves the cached epoch time from supplied cached clock.\n\n @param cached_clock 'this'\n @return The current cached value for the epoch time."]
    pub fn aeron_clock_cached_epoch_time(cached_clock: *mut aeron_clock_cache_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Retrieves the cached nano time from supplied cached clock.\n\n @param cached_clock 'this'\n @return The current cached value for the nano time."]
    pub fn aeron_clock_cached_nano_time(cached_clock: *mut aeron_clock_cache_t) -> i64;
}
unsafe extern "C" {
    #[doc = " Allocate a cached clock.\n\n @param cached_clock Pointer to the pointer to be initialised with the new cached clock\n @return -1 if allocation fails, e.g. out of memory."]
    pub fn aeron_clock_cache_alloc(
        cached_clock: *mut *mut aeron_clock_cache_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the realtime from the system in timespec format\n\n @param time value to fill with the current time\n @return 0 on success, -1 on failure."]
    pub fn aeron_clock_gettime_realtime(time: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_thread_set_name(role_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn aeron_nano_sleep(nanoseconds: u64);
}
unsafe extern "C" {
    pub fn aeron_micro_sleep(microseconds: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn aeron_thread_set_affinity(
        role_name: *const ::std::os::raw::c_char,
        cpu_affinity_no: u8,
    ) -> ::std::os::raw::c_int;
}
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_t = __darwin_pthread_t;
pub type aeron_mutex_t = pthread_mutex_t;
pub type aeron_thread_t = pthread_t;
pub type aeron_thread_attr_t = pthread_attr_t;
pub type aeron_cond_t = pthread_cond_t;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_error_log_entry_stct {
    pub length: i32,
    pub observation_count: i32,
    pub last_observation_timestamp: i64,
    pub first_observation_timestamp: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_error_log_entry_stct"]
        [::std::mem::size_of::<aeron_error_log_entry_stct>() - 24usize];
    ["Alignment of aeron_error_log_entry_stct"]
        [::std::mem::align_of::<aeron_error_log_entry_stct>() - 4usize];
    ["Offset of field: aeron_error_log_entry_stct::length"]
        [::std::mem::offset_of!(aeron_error_log_entry_stct, length) - 0usize];
    ["Offset of field: aeron_error_log_entry_stct::observation_count"]
        [::std::mem::offset_of!(aeron_error_log_entry_stct, observation_count) - 4usize];
    ["Offset of field: aeron_error_log_entry_stct::last_observation_timestamp"]
        [::std::mem::offset_of!(aeron_error_log_entry_stct, last_observation_timestamp) - 8usize];
    ["Offset of field: aeron_error_log_entry_stct::first_observation_timestamp"]
        [::std::mem::offset_of!(aeron_error_log_entry_stct, first_observation_timestamp) - 16usize];
};
pub type aeron_error_log_entry_t = aeron_error_log_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_distinct_observation_stct {
    pub description: *const ::std::os::raw::c_char,
    pub error_code: ::std::os::raw::c_int,
    pub offset: usize,
    pub description_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_distinct_observation_stct"]
        [::std::mem::size_of::<aeron_distinct_observation_stct>() - 32usize];
    ["Alignment of aeron_distinct_observation_stct"]
        [::std::mem::align_of::<aeron_distinct_observation_stct>() - 8usize];
    ["Offset of field: aeron_distinct_observation_stct::description"]
        [::std::mem::offset_of!(aeron_distinct_observation_stct, description) - 0usize];
    ["Offset of field: aeron_distinct_observation_stct::error_code"]
        [::std::mem::offset_of!(aeron_distinct_observation_stct, error_code) - 8usize];
    ["Offset of field: aeron_distinct_observation_stct::offset"]
        [::std::mem::offset_of!(aeron_distinct_observation_stct, offset) - 16usize];
    ["Offset of field: aeron_distinct_observation_stct::description_length"]
        [::std::mem::offset_of!(aeron_distinct_observation_stct, description_length) - 24usize];
};
pub type aeron_distinct_observation_t = aeron_distinct_observation_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_distinct_error_log_observation_list_stct {
    pub num_observations: u64,
    pub observations: *mut aeron_distinct_observation_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_distinct_error_log_observation_list_stct"]
        [::std::mem::size_of::<aeron_distinct_error_log_observation_list_stct>() - 16usize];
    ["Alignment of aeron_distinct_error_log_observation_list_stct"]
        [::std::mem::align_of::<aeron_distinct_error_log_observation_list_stct>() - 8usize];
    ["Offset of field: aeron_distinct_error_log_observation_list_stct::num_observations"][::std::mem::offset_of!(
        aeron_distinct_error_log_observation_list_stct,
        num_observations
    )
        - 0usize];
    ["Offset of field: aeron_distinct_error_log_observation_list_stct::observations"][::std::mem::offset_of!(
        aeron_distinct_error_log_observation_list_stct,
        observations
    ) - 8usize];
};
pub type aeron_distinct_error_log_observation_list_t =
    aeron_distinct_error_log_observation_list_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_distinct_error_log_stct {
    pub buffer: *mut u8,
    pub observation_list: *mut aeron_distinct_error_log_observation_list_t,
    pub buffer_capacity: usize,
    pub next_offset: usize,
    pub clock: aeron_clock_func_t,
    pub mutex: aeron_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_distinct_error_log_stct"]
        [::std::mem::size_of::<aeron_distinct_error_log_stct>() - 104usize];
    ["Alignment of aeron_distinct_error_log_stct"]
        [::std::mem::align_of::<aeron_distinct_error_log_stct>() - 8usize];
    ["Offset of field: aeron_distinct_error_log_stct::buffer"]
        [::std::mem::offset_of!(aeron_distinct_error_log_stct, buffer) - 0usize];
    ["Offset of field: aeron_distinct_error_log_stct::observation_list"]
        [::std::mem::offset_of!(aeron_distinct_error_log_stct, observation_list) - 8usize];
    ["Offset of field: aeron_distinct_error_log_stct::buffer_capacity"]
        [::std::mem::offset_of!(aeron_distinct_error_log_stct, buffer_capacity) - 16usize];
    ["Offset of field: aeron_distinct_error_log_stct::next_offset"]
        [::std::mem::offset_of!(aeron_distinct_error_log_stct, next_offset) - 24usize];
    ["Offset of field: aeron_distinct_error_log_stct::clock"]
        [::std::mem::offset_of!(aeron_distinct_error_log_stct, clock) - 32usize];
    ["Offset of field: aeron_distinct_error_log_stct::mutex"]
        [::std::mem::offset_of!(aeron_distinct_error_log_stct, mutex) - 40usize];
};
pub type aeron_distinct_error_log_t = aeron_distinct_error_log_stct;
unsafe extern "C" {
    pub fn aeron_distinct_error_log_init(
        log: *mut aeron_distinct_error_log_t,
        buffer: *mut u8,
        buffer_size: usize,
        clock: aeron_clock_func_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_distinct_error_log_close(log: *mut aeron_distinct_error_log_t);
}
unsafe extern "C" {
    pub fn aeron_distinct_error_log_record(
        log: *mut aeron_distinct_error_log_t,
        error_code: ::std::os::raw::c_int,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_error_log_exists(buffer: *const u8, buffer_size: usize) -> bool;
}
unsafe extern "C" {
    pub fn aeron_error_log_read(
        buffer: *const u8,
        buffer_size: usize,
        reader: aeron_error_log_reader_func_t,
        clientd: *mut ::std::os::raw::c_void,
        since_timestamp: i64,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_distinct_error_log_num_observations(log: *mut aeron_distinct_error_log_t)
        -> usize;
}
pub type aeron_idle_strategy_func_t = ::std::option::Option<
    unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, work_count: ::std::os::raw::c_int),
>;
pub type aeron_idle_strategy_init_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut *mut ::std::os::raw::c_void,
        env_var: *const ::std::os::raw::c_char,
        init_args: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn aeron_semantic_version_compose(major: u8, minor: u8, patch: u8) -> i32;
}
unsafe extern "C" {
    pub fn aeron_semantic_version_major(version: i32) -> u8;
}
unsafe extern "C" {
    pub fn aeron_semantic_version_minor(version: i32) -> u8;
}
unsafe extern "C" {
    pub fn aeron_semantic_version_patch(version: i32) -> u8;
}
pub type aeron_fptr_t = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_uri_param_stct {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_uri_param_stct"][::std::mem::size_of::<aeron_uri_param_stct>() - 16usize];
    ["Alignment of aeron_uri_param_stct"][::std::mem::align_of::<aeron_uri_param_stct>() - 8usize];
    ["Offset of field: aeron_uri_param_stct::key"]
        [::std::mem::offset_of!(aeron_uri_param_stct, key) - 0usize];
    ["Offset of field: aeron_uri_param_stct::value"]
        [::std::mem::offset_of!(aeron_uri_param_stct, value) - 8usize];
};
pub type aeron_uri_param_t = aeron_uri_param_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_uri_params_stct {
    pub length: usize,
    pub array: *mut aeron_uri_param_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_uri_params_stct"][::std::mem::size_of::<aeron_uri_params_stct>() - 16usize];
    ["Alignment of aeron_uri_params_stct"]
        [::std::mem::align_of::<aeron_uri_params_stct>() - 8usize];
    ["Offset of field: aeron_uri_params_stct::length"]
        [::std::mem::offset_of!(aeron_uri_params_stct, length) - 0usize];
    ["Offset of field: aeron_uri_params_stct::array"]
        [::std::mem::offset_of!(aeron_uri_params_stct, array) - 8usize];
};
pub type aeron_uri_params_t = aeron_uri_params_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_params_stct {
    pub endpoint: *const ::std::os::raw::c_char,
    pub bind_interface: *const ::std::os::raw::c_char,
    pub control: *const ::std::os::raw::c_char,
    pub control_mode: *const ::std::os::raw::c_char,
    pub channel_tag: *const ::std::os::raw::c_char,
    pub entity_tag: *const ::std::os::raw::c_char,
    pub ttl: *const ::std::os::raw::c_char,
    pub additional_params: aeron_uri_params_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_params_stct"]
        [::std::mem::size_of::<aeron_udp_channel_params_stct>() - 72usize];
    ["Alignment of aeron_udp_channel_params_stct"]
        [::std::mem::align_of::<aeron_udp_channel_params_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_params_stct::endpoint"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, endpoint) - 0usize];
    ["Offset of field: aeron_udp_channel_params_stct::bind_interface"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, bind_interface) - 8usize];
    ["Offset of field: aeron_udp_channel_params_stct::control"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, control) - 16usize];
    ["Offset of field: aeron_udp_channel_params_stct::control_mode"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, control_mode) - 24usize];
    ["Offset of field: aeron_udp_channel_params_stct::channel_tag"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, channel_tag) - 32usize];
    ["Offset of field: aeron_udp_channel_params_stct::entity_tag"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, entity_tag) - 40usize];
    ["Offset of field: aeron_udp_channel_params_stct::ttl"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, ttl) - 48usize];
    ["Offset of field: aeron_udp_channel_params_stct::additional_params"]
        [::std::mem::offset_of!(aeron_udp_channel_params_stct, additional_params) - 56usize];
};
pub type aeron_udp_channel_params_t = aeron_udp_channel_params_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_ipc_channel_params_stct {
    pub channel_tag: *const ::std::os::raw::c_char,
    pub entity_tag: *const ::std::os::raw::c_char,
    pub additional_params: aeron_uri_params_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_ipc_channel_params_stct"]
        [::std::mem::size_of::<aeron_ipc_channel_params_stct>() - 32usize];
    ["Alignment of aeron_ipc_channel_params_stct"]
        [::std::mem::align_of::<aeron_ipc_channel_params_stct>() - 8usize];
    ["Offset of field: aeron_ipc_channel_params_stct::channel_tag"]
        [::std::mem::offset_of!(aeron_ipc_channel_params_stct, channel_tag) - 0usize];
    ["Offset of field: aeron_ipc_channel_params_stct::entity_tag"]
        [::std::mem::offset_of!(aeron_ipc_channel_params_stct, entity_tag) - 8usize];
    ["Offset of field: aeron_ipc_channel_params_stct::additional_params"]
        [::std::mem::offset_of!(aeron_ipc_channel_params_stct, additional_params) - 16usize];
};
pub type aeron_ipc_channel_params_t = aeron_ipc_channel_params_stct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_uri_type_enum {
    AERON_URI_UDP = 0,
    AERON_URI_IPC = 1,
    AERON_URI_UNKNOWN = 2,
}
pub use self::aeron_uri_type_enum as aeron_uri_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aeron_uri_stct {
    pub mutable_uri: [::std::os::raw::c_char; 384usize],
    pub type_: aeron_uri_type_t,
    pub params: aeron_uri_stct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union aeron_uri_stct__bindgen_ty_1 {
    pub udp: aeron_udp_channel_params_t,
    pub ipc: aeron_ipc_channel_params_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_uri_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_uri_stct__bindgen_ty_1>() - 72usize];
    ["Alignment of aeron_uri_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_uri_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_uri_stct__bindgen_ty_1::udp"]
        [::std::mem::offset_of!(aeron_uri_stct__bindgen_ty_1, udp) - 0usize];
    ["Offset of field: aeron_uri_stct__bindgen_ty_1::ipc"]
        [::std::mem::offset_of!(aeron_uri_stct__bindgen_ty_1, ipc) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_uri_stct"][::std::mem::size_of::<aeron_uri_stct>() - 464usize];
    ["Alignment of aeron_uri_stct"][::std::mem::align_of::<aeron_uri_stct>() - 8usize];
    ["Offset of field: aeron_uri_stct::mutable_uri"]
        [::std::mem::offset_of!(aeron_uri_stct, mutable_uri) - 0usize];
    ["Offset of field: aeron_uri_stct::type_"]
        [::std::mem::offset_of!(aeron_uri_stct, type_) - 384usize];
    ["Offset of field: aeron_uri_stct::params"]
        [::std::mem::offset_of!(aeron_uri_stct, params) - 392usize];
};
pub type aeron_uri_t = aeron_uri_stct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_uri_ats_status_en {
    AERON_URI_ATS_STATUS_DEFAULT = 0,
    AERON_URI_ATS_STATUS_ENABLED = 1,
    AERON_URI_ATS_STATUS_DISABLED = 2,
}
pub use self::aeron_uri_ats_status_en as aeron_uri_ats_status_t;
pub type aeron_uri_parse_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn aeron_uri_parse_params(
        uri: *mut ::std::os::raw::c_char,
        param_func: aeron_uri_parse_callback_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_uri_parse(
        uri: *mut ::std::os::raw::c_char,
        params: *mut aeron_udp_channel_params_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_ipc_uri_parse(
        uri: *mut ::std::os::raw::c_char,
        params: *mut aeron_ipc_channel_params_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_parse(
        uri_length: usize,
        uri: *const ::std::os::raw::c_char,
        params: *mut aeron_uri_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_close(params: *mut aeron_uri_t);
}
unsafe extern "C" {
    pub fn aeron_uri_multicast_ttl(uri: *mut aeron_uri_t) -> u8;
}
unsafe extern "C" {
    pub fn aeron_uri_find_param_value(
        uri_params: *const aeron_uri_params_t,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_uri_get_int32(
        uri_params: *mut aeron_uri_params_t,
        key: *const ::std::os::raw::c_char,
        retval: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_get_int64(
        uri_params: *mut aeron_uri_params_t,
        key: *const ::std::os::raw::c_char,
        default_val: i64,
        retval: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_get_bool(
        uri_params: *mut aeron_uri_params_t,
        key: *const ::std::os::raw::c_char,
        retval: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_get_ats(
        uri_params: *mut aeron_uri_params_t,
        uri_ats_status: *mut aeron_uri_ats_status_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_get_timeout(
        uri_params: *mut aeron_uri_params_t,
        param_name: *const ::std::os::raw::c_char,
        timeout_ns: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_sprint(
        uri: *mut aeron_uri_t,
        buffer: *mut ::std::os::raw::c_char,
        buffer_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_get_socket_buf_lengths(
        uri_params: *mut aeron_uri_params_t,
        socket_sndbuf_length: *mut usize,
        socket_rcvbuf_length: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_get_receiver_window_length(
        uri_params: *mut aeron_uri_params_t,
        receiver_window_length: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_uri_parse_tag(tag_str: *const ::std::os::raw::c_char) -> i64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_managed_resource_stct {
    pub registration_id: i64,
    pub time_of_last_state_change_ns: i64,
    pub clientd: *mut ::std::os::raw::c_void,
    pub decref: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub incref: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_managed_resource_stct"]
        [::std::mem::size_of::<aeron_driver_managed_resource_stct>() - 40usize];
    ["Alignment of aeron_driver_managed_resource_stct"]
        [::std::mem::align_of::<aeron_driver_managed_resource_stct>() - 8usize];
    ["Offset of field: aeron_driver_managed_resource_stct::registration_id"]
        [::std::mem::offset_of!(aeron_driver_managed_resource_stct, registration_id) - 0usize];
    ["Offset of field: aeron_driver_managed_resource_stct::time_of_last_state_change_ns"][::std::mem::offset_of!(
        aeron_driver_managed_resource_stct,
        time_of_last_state_change_ns
    )
        - 8usize];
    ["Offset of field: aeron_driver_managed_resource_stct::clientd"]
        [::std::mem::offset_of!(aeron_driver_managed_resource_stct, clientd) - 16usize];
    ["Offset of field: aeron_driver_managed_resource_stct::decref"]
        [::std::mem::offset_of!(aeron_driver_managed_resource_stct, decref) - 24usize];
    ["Offset of field: aeron_driver_managed_resource_stct::incref"]
        [::std::mem::offset_of!(aeron_driver_managed_resource_stct, incref) - 32usize];
};
pub type aeron_driver_managed_resource_t = aeron_driver_managed_resource_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_position_stct {
    pub counter_id: i32,
    pub value_addr: *mut i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_position_stct"][::std::mem::size_of::<aeron_position_stct>() - 16usize];
    ["Alignment of aeron_position_stct"][::std::mem::align_of::<aeron_position_stct>() - 8usize];
    ["Offset of field: aeron_position_stct::counter_id"]
        [::std::mem::offset_of!(aeron_position_stct, counter_id) - 0usize];
    ["Offset of field: aeron_position_stct::value_addr"]
        [::std::mem::offset_of!(aeron_position_stct, value_addr) - 8usize];
};
pub type aeron_position_t = aeron_position_stct;
pub type aeron_atomic_counter_t = aeron_position_stct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_subscription_tether_state_enum {
    AERON_SUBSCRIPTION_TETHER_ACTIVE = 0,
    AERON_SUBSCRIPTION_TETHER_LINGER = 1,
    AERON_SUBSCRIPTION_TETHER_RESTING = 2,
}
pub use self::aeron_subscription_tether_state_enum as aeron_subscription_tether_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_tetherable_position_stct {
    pub is_tether: bool,
    pub state: aeron_subscription_tether_state_t,
    pub counter_id: i32,
    pub value_addr: *mut i64,
    pub subscription_registration_id: i64,
    pub time_of_last_update_ns: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_tetherable_position_stct"]
        [::std::mem::size_of::<aeron_tetherable_position_stct>() - 40usize];
    ["Alignment of aeron_tetherable_position_stct"]
        [::std::mem::align_of::<aeron_tetherable_position_stct>() - 8usize];
    ["Offset of field: aeron_tetherable_position_stct::is_tether"]
        [::std::mem::offset_of!(aeron_tetherable_position_stct, is_tether) - 0usize];
    ["Offset of field: aeron_tetherable_position_stct::state"]
        [::std::mem::offset_of!(aeron_tetherable_position_stct, state) - 4usize];
    ["Offset of field: aeron_tetherable_position_stct::counter_id"]
        [::std::mem::offset_of!(aeron_tetherable_position_stct, counter_id) - 8usize];
    ["Offset of field: aeron_tetherable_position_stct::value_addr"]
        [::std::mem::offset_of!(aeron_tetherable_position_stct, value_addr) - 16usize];
    ["Offset of field: aeron_tetherable_position_stct::subscription_registration_id"][::std::mem::offset_of!(
        aeron_tetherable_position_stct,
        subscription_registration_id
    ) - 24usize];
    ["Offset of field: aeron_tetherable_position_stct::time_of_last_update_ns"]
        [::std::mem::offset_of!(aeron_tetherable_position_stct, time_of_last_update_ns) - 32usize];
};
pub type aeron_tetherable_position_t = aeron_tetherable_position_stct;
pub type aeron_untethered_subscription_state_change_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        tetherable_position: *mut aeron_tetherable_position_t,
        now_ns: i64,
        new_state: aeron_subscription_tether_state_t,
        stream_id: i32,
        session_id: i32,
    ),
>;
unsafe extern "C" {
    pub fn aeron_untethered_subscription_state_change(
        tetherable_position: *mut aeron_tetherable_position_t,
        now_ns: i64,
        new_state: aeron_subscription_tether_state_t,
        stream_id: i32,
        session_id: i32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscribable_stct {
    pub correlation_id: i64,
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_tetherable_position_t,
    pub resting_count: usize,
    pub add_position_hook_func: ::std::option::Option<
        unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void, value_addr: *mut i64),
    >,
    pub remove_position_hook_func: ::std::option::Option<
        unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void, value_addr: *mut i64),
    >,
    pub clientd: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscribable_stct"][::std::mem::size_of::<aeron_subscribable_stct>() - 64usize];
    ["Alignment of aeron_subscribable_stct"]
        [::std::mem::align_of::<aeron_subscribable_stct>() - 8usize];
    ["Offset of field: aeron_subscribable_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_subscribable_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_subscribable_stct::length"]
        [::std::mem::offset_of!(aeron_subscribable_stct, length) - 8usize];
    ["Offset of field: aeron_subscribable_stct::capacity"]
        [::std::mem::offset_of!(aeron_subscribable_stct, capacity) - 16usize];
    ["Offset of field: aeron_subscribable_stct::array"]
        [::std::mem::offset_of!(aeron_subscribable_stct, array) - 24usize];
    ["Offset of field: aeron_subscribable_stct::resting_count"]
        [::std::mem::offset_of!(aeron_subscribable_stct, resting_count) - 32usize];
    ["Offset of field: aeron_subscribable_stct::add_position_hook_func"]
        [::std::mem::offset_of!(aeron_subscribable_stct, add_position_hook_func) - 40usize];
    ["Offset of field: aeron_subscribable_stct::remove_position_hook_func"]
        [::std::mem::offset_of!(aeron_subscribable_stct, remove_position_hook_func) - 48usize];
    ["Offset of field: aeron_subscribable_stct::clientd"]
        [::std::mem::offset_of!(aeron_subscribable_stct, clientd) - 56usize];
};
pub type aeron_subscribable_t = aeron_subscribable_stct;
unsafe extern "C" {
    pub fn aeron_driver_subscribable_state(
        subscribable: *mut aeron_subscribable_t,
        tetherable_position: *mut aeron_tetherable_position_t,
        state: aeron_subscription_tether_state_t,
        now_ns: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_subscribable_working_position_count(
        subscribable: *mut aeron_subscribable_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_subscribable_has_working_positions(
        subscribable: *mut aeron_subscribable_t,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_base_stct {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            clientd: *mut ::std::os::raw::c_void,
            command: *mut ::std::os::raw::c_void,
        ),
    >,
    pub item: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_base_stct"][::std::mem::size_of::<aeron_command_base_stct>() - 16usize];
    ["Alignment of aeron_command_base_stct"]
        [::std::mem::align_of::<aeron_command_base_stct>() - 8usize];
    ["Offset of field: aeron_command_base_stct::func"]
        [::std::mem::offset_of!(aeron_command_base_stct, func) - 0usize];
    ["Offset of field: aeron_command_base_stct::item"]
        [::std::mem::offset_of!(aeron_command_base_stct, item) - 8usize];
};
pub type aeron_command_base_t = aeron_command_base_stct;
pub type aeron_feedback_delay_generator_state_t = aeron_feedback_delay_generator_state_stct;
pub type aeron_feedback_delay_generator_func_t = ::std::option::Option<
    unsafe extern "C" fn(state: *mut aeron_feedback_delay_generator_state_t, retry: bool) -> i64,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_feedback_delay_generator_state_stct {
    pub static_delay: aeron_feedback_delay_generator_state_stct_static_delay_stct,
    pub optimal_delay: aeron_feedback_delay_generator_state_stct_optimal_delay_stct,
    pub delay_generator: aeron_feedback_delay_generator_func_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_feedback_delay_generator_state_stct_static_delay_stct {
    pub delay_ns: i64,
    pub retry_ns: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_feedback_delay_generator_state_stct_static_delay_stct"][::std::mem::size_of::<
        aeron_feedback_delay_generator_state_stct_static_delay_stct,
    >() - 16usize];
    ["Alignment of aeron_feedback_delay_generator_state_stct_static_delay_stct"]
        [::std::mem::align_of::<aeron_feedback_delay_generator_state_stct_static_delay_stct>()
            - 8usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct_static_delay_stct::delay_ns"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct_static_delay_stct,
        delay_ns
    )
        - 0usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct_static_delay_stct::retry_ns"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct_static_delay_stct,
        retry_ns
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_feedback_delay_generator_state_stct_optimal_delay_stct {
    pub rand_max: f64,
    pub base_x: f64,
    pub constant_t: f64,
    pub factor_t: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_feedback_delay_generator_state_stct_optimal_delay_stct"][::std::mem::size_of::<
        aeron_feedback_delay_generator_state_stct_optimal_delay_stct,
    >() - 32usize];
    ["Alignment of aeron_feedback_delay_generator_state_stct_optimal_delay_stct"]
        [::std::mem::align_of::<aeron_feedback_delay_generator_state_stct_optimal_delay_stct>()
            - 8usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct_optimal_delay_stct::rand_max"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct_optimal_delay_stct,
        rand_max
    )
        - 0usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct_optimal_delay_stct::base_x"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct_optimal_delay_stct,
        base_x
    )
        - 8usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct_optimal_delay_stct::constant_t"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct_optimal_delay_stct,
        constant_t
    )
        - 16usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct_optimal_delay_stct::factor_t"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct_optimal_delay_stct,
        factor_t
    )
        - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_feedback_delay_generator_state_stct"]
        [::std::mem::size_of::<aeron_feedback_delay_generator_state_stct>() - 56usize];
    ["Alignment of aeron_feedback_delay_generator_state_stct"]
        [::std::mem::align_of::<aeron_feedback_delay_generator_state_stct>() - 8usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct::static_delay"]
        [::std::mem::offset_of!(aeron_feedback_delay_generator_state_stct, static_delay) - 0usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct::optimal_delay"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct,
        optimal_delay
    ) - 16usize];
    ["Offset of field: aeron_feedback_delay_generator_state_stct::delay_generator"][::std::mem::offset_of!(
        aeron_feedback_delay_generator_state_stct,
        delay_generator
    ) - 48usize];
};
unsafe extern "C" {
    pub fn aeron_driver_subscribable_remove_position(
        subscribable: *mut aeron_subscribable_t,
        counter_id: i32,
    );
}
pub type aeron_on_remove_publication_cleanup_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        session_id: i32,
        stream_id: i32,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
    ),
>;
pub type aeron_on_remove_subscription_cleanup_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: i64,
        stream_id: i32,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
    ),
>;
pub type aeron_on_remove_image_cleanup_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: i64,
        session_id: i32,
        stream_id: i32,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
    ),
>;
pub type aeron_on_endpoint_change_func_t =
    ::std::option::Option<unsafe extern "C" fn(channel: *const ::std::os::raw::c_void)>;
pub type aeron_driver_context_t = aeron_driver_context_stct;
pub type aeron_driver_t = aeron_driver_stct;
unsafe extern "C" {
    pub fn aeron_driver_context_set_dir(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_dir(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_dir_warn_if_exists(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_dir_warn_if_exists(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_threading_mode_enum {
    AERON_THREADING_MODE_DEDICATED = 0,
    AERON_THREADING_MODE_SHARED_NETWORK = 1,
    AERON_THREADING_MODE_SHARED = 2,
    AERON_THREADING_MODE_INVOKER = 3,
}
pub use self::aeron_threading_mode_enum as aeron_threading_mode_t;
unsafe extern "C" {
    pub fn aeron_driver_context_set_threading_mode(
        context: *mut aeron_driver_context_t,
        mode: aeron_threading_mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_threading_mode(
        context: *mut aeron_driver_context_t,
    ) -> aeron_threading_mode_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_dir_delete_on_start(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_dir_delete_on_start(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_dir_delete_on_shutdown(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_dir_delete_on_shutdown(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_to_conductor_buffer_length(
        context: *mut aeron_driver_context_t,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_to_conductor_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_to_clients_buffer_length(
        context: *mut aeron_driver_context_t,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_to_clients_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_counters_buffer_length(
        context: *mut aeron_driver_context_t,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_counters_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_error_buffer_length(
        context: *mut aeron_driver_context_t,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_error_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_client_liveness_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_client_liveness_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_term_buffer_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_term_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_ipc_term_buffer_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_ipc_term_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_term_buffer_sparse_file(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_term_buffer_sparse_file(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_perform_storage_checks(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_perform_storage_checks(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_low_file_store_warning_threshold(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_low_file_store_warning_threshold(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_spies_simulate_connection(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_spies_simulate_connection(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_file_page_size(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_file_page_size(context: *mut aeron_driver_context_t) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_mtu_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_mtu_length(context: *mut aeron_driver_context_t) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_ipc_mtu_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_ipc_mtu_length(context: *mut aeron_driver_context_t) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_ipc_publication_term_window_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_ipc_publication_term_window_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_publication_term_window_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_publication_term_window_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_publication_linger_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_publication_linger_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_socket_so_rcvbuf(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_socket_so_rcvbuf(context: *mut aeron_driver_context_t)
        -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_socket_so_sndbuf(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_socket_so_sndbuf(context: *mut aeron_driver_context_t)
        -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_socket_multicast_ttl(
        context: *mut aeron_driver_context_t,
        value: u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_socket_multicast_ttl(
        context: *mut aeron_driver_context_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_send_to_status_poll_ratio(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_send_to_status_poll_ratio(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_rcv_status_message_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_rcv_status_message_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
pub type aeron_flow_control_strategy_t = aeron_flow_control_strategy_stct;
pub type aeron_counters_manager_t = aeron_counters_manager_stct;
pub type aeron_udp_channel_t = aeron_udp_channel_stct;
pub type aeron_flow_control_strategy_supplier_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        strategy: *mut *mut aeron_flow_control_strategy_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        channel: *const aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        initial_term_id: i32,
        term_length: usize,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    #[doc = " Return a flow control strategy supplier function pointer associated with the given name. This only will find\n strategies built into the driver and will not try to dynamically load nor find any in the current executable.\n\n @param name of the strategy\n @return function pointer to supplier associated with the name"]
    pub fn aeron_flow_control_strategy_supplier_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> aeron_flow_control_strategy_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_multicast_flowcontrol_supplier(
        context: *mut aeron_driver_context_t,
        value: aeron_flow_control_strategy_supplier_func_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_multicast_flowcontrol_supplier(
        context: *mut aeron_driver_context_t,
    ) -> aeron_flow_control_strategy_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_unicast_flowcontrol_supplier(
        context: *mut aeron_driver_context_t,
        value: aeron_flow_control_strategy_supplier_func_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_unicast_flowcontrol_supplier(
        context: *mut aeron_driver_context_t,
    ) -> aeron_flow_control_strategy_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_image_liveness_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_image_liveness_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_rcv_initial_window_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_rcv_initial_window_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
pub type aeron_congestion_control_strategy_t = aeron_congestion_control_strategy_stct;
pub type aeron_congestion_control_strategy_supplier_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        strategy: *mut *mut aeron_congestion_control_strategy_t,
        channel: *mut aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        term_length: i32,
        sender_mtu_length: i32,
        control_address: *mut sockaddr_storage,
        src_address: *mut sockaddr_storage,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn aeron_driver_context_set_congestioncontrol_supplier(
        context: *mut aeron_driver_context_t,
        value: aeron_congestion_control_strategy_supplier_func_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_congestioncontrol_supplier(
        context: *mut aeron_driver_context_t,
    ) -> aeron_congestion_control_strategy_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_loss_report_buffer_length(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_loss_report_buffer_length(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_publication_unblock_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_publication_unblock_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_publication_connection_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_publication_connection_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_timer_interval_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_timer_interval_ns(context: *mut aeron_driver_context_t) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_idle_strategy(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_idle_strategy(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_conductor_idle_strategy(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_conductor_idle_strategy(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_idle_strategy(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_idle_strategy(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sharednetwork_idle_strategy(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sharednetwork_idle_strategy(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_shared_idle_strategy(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_shared_idle_strategy(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_conductor_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_conductor_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sharednetwork_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sharednetwork_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_shared_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_shared_idle_strategy_init_args(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_agent_on_start_function(
        context: *mut aeron_driver_context_t,
        value: aeron_agent_on_start_func_t,
        state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_agent_on_start_function(
        context: *mut aeron_driver_context_t,
    ) -> aeron_agent_on_start_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_agent_on_start_state(
        context: *mut aeron_driver_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_counters_free_to_reuse_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_counters_free_to_reuse_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_flow_control_receiver_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_flow_control_receiver_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_flow_control_group_tag(
        context: *mut aeron_driver_context_t,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_flow_control_group_tag(
        context: *mut aeron_driver_context_t,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_flow_control_group_min_size(
        context: *mut aeron_driver_context_t,
        value: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_flow_control_group_min_size(
        context: *mut aeron_driver_context_t,
    ) -> i32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_group_tag(
        context: *mut aeron_driver_context_t,
        is_present: bool,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_group_tag_is_present(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_group_tag_value(
        context: *mut aeron_driver_context_t,
    ) -> i64;
}
pub type aeron_driver_termination_validator_func_t = ::std::option::Option<
    unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, buffer: *mut u8, length: i32) -> bool,
>;
unsafe extern "C" {
    pub fn aeron_driver_context_set_driver_termination_validator(
        context: *mut aeron_driver_context_t,
        value: aeron_driver_termination_validator_func_t,
        state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_driver_termination_validator(
        context: *mut aeron_driver_context_t,
    ) -> aeron_driver_termination_validator_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_driver_termination_validator_state(
        context: *mut aeron_driver_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type aeron_driver_termination_hook_func_t =
    ::std::option::Option<unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn aeron_driver_context_set_driver_termination_hook(
        context: *mut aeron_driver_context_t,
        value: aeron_driver_termination_hook_func_t,
        state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_driver_termination_hook(
        context: *mut aeron_driver_context_t,
    ) -> aeron_driver_termination_hook_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_driver_termination_hook_state(
        context: *mut aeron_driver_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_print_configuration(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_print_configuration(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_reliable_stream(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_reliable_stream(context: *mut aeron_driver_context_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_tether_subscriptions(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_tether_subscriptions(
        context: *mut aeron_driver_context_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_untethered_window_limit_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_untethered_window_limit_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_untethered_resting_timeout_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_untethered_resting_timeout_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_driver_timeout_ms(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_driver_timeout_ms(context: *mut aeron_driver_context_t) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_nak_multicast_group_size(
        context: *mut aeron_driver_context_t,
        value: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_nak_multicast_group_size(
        context: *mut aeron_driver_context_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_nak_multicast_max_backoff_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_nak_multicast_max_backoff_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_nak_unicast_delay_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_nak_unicast_delay_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_nak_unicast_retry_delay_ratio(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_nak_unicast_retry_delay_ratio(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_max_resend(
        context: *mut aeron_driver_context_t,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_max_resend(context: *mut aeron_driver_context_t) -> u32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_retransmit_unicast_delay_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_retransmit_unicast_delay_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_retransmit_unicast_linger_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_retransmit_unicast_linger_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_inferable_boolean_enum {
    AERON_FORCE_FALSE = 0,
    AERON_FORCE_TRUE = 1,
    AERON_INFER = 2,
}
pub use self::aeron_inferable_boolean_enum as aeron_inferable_boolean_t;
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_group_consideration(
        context: *mut aeron_driver_context_t,
        value: aeron_inferable_boolean_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_group_consideration(
        context: *mut aeron_driver_context_t,
    ) -> aeron_inferable_boolean_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_rejoin_stream(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_rejoin_stream(context: *mut aeron_driver_context_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_connect_enabled(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_connect_enabled(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_udp_channel_transport_bindings_t = aeron_udp_channel_transport_bindings_stct;
unsafe extern "C" {
    pub fn aeron_driver_context_set_udp_channel_transport_bindings(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_udp_channel_transport_bindings_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_udp_channel_transport_bindings(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_udp_channel_transport_bindings_t;
}
pub type aeron_udp_channel_interceptor_bindings_t = aeron_udp_channel_interceptor_bindings_stct;
unsafe extern "C" {
    pub fn aeron_driver_context_set_udp_channel_outgoing_interceptors(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_udp_channel_interceptor_bindings_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_udp_channel_outgoing_interceptors(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_udp_channel_interceptor_bindings_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_udp_channel_incoming_interceptors(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_udp_channel_interceptor_bindings_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_udp_channel_incoming_interceptors(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_udp_channel_interceptor_bindings_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_publication_reserved_session_id_low(
        context: *mut aeron_driver_context_t,
        value: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_publication_reserved_session_id_low(
        context: *mut aeron_driver_context_t,
    ) -> i32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_publication_reserved_session_id_high(
        context: *mut aeron_driver_context_t,
        value: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_publication_reserved_session_id_high(
        context: *mut aeron_driver_context_t,
    ) -> i32;
}
pub type aeron_name_resolver_t = aeron_name_resolver_stct;
pub type aeron_name_resolver_supplier_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        resolver: *mut aeron_name_resolver_t,
        args: *const ::std::os::raw::c_char,
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn aeron_driver_context_set_resolver_name(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_resolver_name(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_resolver_interface(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_resolver_interface(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_resolver_bootstrap_neighbor(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_resolver_bootstrap_neighbor(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_name_resolver_supplier(
        context: *mut aeron_driver_context_t,
        value: aeron_name_resolver_supplier_func_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_name_resolver_supplier(
        context: *mut aeron_driver_context_t,
    ) -> aeron_name_resolver_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_name_resolver_init_args(
        context: *mut aeron_driver_context_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_name_resolver_init_args(
        context: *mut aeron_driver_context_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_re_resolution_check_interval_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_re_resolution_check_interval_ns(
        context: *mut aeron_driver_context_t,
    ) -> u64;
}
pub type aeron_duty_cycle_tracker_t = aeron_duty_cycle_tracker_stct;
unsafe extern "C" {
    pub fn aeron_driver_context_set_conductor_duty_cycle_tracker(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_duty_cycle_tracker_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_conductor_duty_cycle_tracker(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_duty_cycle_tracker_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_duty_cycle_tracker(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_duty_cycle_tracker_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_duty_cycle_tracker(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_duty_cycle_tracker_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_duty_cycle_tracker(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_duty_cycle_tracker_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_duty_cycle_tracker(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_duty_cycle_tracker_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_name_resolver_time_tracker(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_duty_cycle_tracker_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_name_resolver_time_tracker(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_duty_cycle_tracker_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_wildcard_port_range(
        context: *mut aeron_driver_context_t,
        low_port: u16,
        high_port: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_wildcard_port_range(
        context: *mut aeron_driver_context_t,
        low_port: *mut u16,
        high_port: *mut u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_wildcard_port_range(
        context: *mut aeron_driver_context_t,
        low_port: u16,
        high_port: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_wildcard_port_range(
        context: *mut aeron_driver_context_t,
        low_port: *mut u16,
        high_port: *mut u16,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_port_manager_t = aeron_port_manager_stct;
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_port_manager(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_port_manager_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_port_manager(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_port_manager_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_port_manager(
        context: *mut aeron_driver_context_t,
        value: *mut aeron_port_manager_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_port_manager(
        context: *mut aeron_driver_context_t,
    ) -> *mut aeron_port_manager_t;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_conductor_cycle_threshold_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_conductor_cycle_threshold_ns(
        context: *mut aeron_driver_context_t,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_cycle_threshold_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_cycle_threshold_ns(
        context: *mut aeron_driver_context_t,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_cycle_threshold_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_cycle_threshold_ns(
        context: *mut aeron_driver_context_t,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_name_resolver_threshold_ns(
        context: *mut aeron_driver_context_t,
        value: u64,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_name_resolver_threshold_ns(
        context: *mut aeron_driver_context_t,
    ) -> i64;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_receiver_io_vector_capacity(
        context: *mut aeron_driver_context_t,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_receiver_io_vector_capacity(
        context: *mut aeron_driver_context_t,
    ) -> u32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_sender_io_vector_capacity(
        context: *mut aeron_driver_context_t,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_sender_io_vector_capacity(
        context: *mut aeron_driver_context_t,
    ) -> u32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_network_publication_max_messages_per_send(
        context: *mut aeron_driver_context_t,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_network_publication_max_messages_per_send(
        context: *mut aeron_driver_context_t,
    ) -> u32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_resource_free_limit(
        context: *mut aeron_driver_context_t,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_resource_free_limit(
        context: *mut aeron_driver_context_t,
    ) -> u32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_async_executor_threads(
        context: *mut aeron_driver_context_t,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_async_executor_threads(
        context: *mut aeron_driver_context_t,
    ) -> u32;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_enable_experimental_features(
        context: *mut aeron_driver_context_t,
        value: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_enable_experimental_features(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_set_stream_session_limit(
        context: *mut aeron_driver_context_t,
        value: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_get_stream_session_limit(
        context: *mut aeron_driver_context_t,
    ) -> i32;
}
unsafe extern "C" {
    #[doc = " Create a aeron_driver_context_t struct and initialize with default values.\n\n @param context to create and initialize\n @return 0 for success and -1 for error."]
    pub fn aeron_driver_context_init(
        context: *mut *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Close and delete aeron_driver_context_t struct.\n\n @param context to close and delete\n @return 0 for success and -1 for error."]
    pub fn aeron_driver_context_close(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Create a aeron_driver_t struct and initialize from the aeron_driver_context_t struct.\n\n The given aeron_driver_context_t struct will be used exclusively by the driver. Do not reuse between drivers.\n\n @param driver  to create and initialize.\n @param context to use for initialization.\n @return 0 for success and -1 for error."]
    pub fn aeron_driver_init(
        driver: *mut *mut aeron_driver_t,
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Start an aeron_driver_t given the threading mode. This may spawn threads for the Sender, Receiver, and Conductor\n depending on threading mode used.\n\n @param driver to start.\n @param manual_main_loop to be called by the caller for the Conductor do_work cycle.\n @return 0 for success and -1 for error."]
    pub fn aeron_driver_start(
        driver: *mut aeron_driver_t,
        manual_main_loop: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Call the Conductor (or Shared) main do_work duty cycle once.\n\n Driver must have been created with manual_main_loop set to true.\n\n @param driver to call do_work duty cycle on.\n @return 0 for success and -1 for error."]
    pub fn aeron_driver_main_do_work(driver: *mut aeron_driver_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Call the Conductor (or Shared) Idle Strategy.\n\n @param driver to idle.\n @param work_count to pass to idle strategy."]
    pub fn aeron_driver_main_idle_strategy(
        driver: *mut aeron_driver_t,
        work_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Close and delete aeron_driver_t struct.\n\n @param driver to close and delete\n @return 0 for success and -1 for error."]
    pub fn aeron_driver_close(driver: *mut aeron_driver_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Delete the given aeron directory.\n\n @param dirname to delete.\n @return 0 for success and -1 for error."]
    pub fn aeron_delete_directory(dirname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Affinity setting function that complies with the aeron_agent_on_start_func_t structure that can\n be used as an agent start function.  The state should be the aeron_driver_context_t* and the function\n will match the values \"conductor\", \"sender\", \"receiver\" and use the respective configuration options from\n the aeron_driver_context_t.\n\n @param state client information passed to function, should be the aeron_driver_context_t*.\n @param role_name name of the role specified on the agent."]
    pub fn aeron_set_thread_affinity_on_start(
        state: *mut ::std::os::raw::c_void,
        role_name: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_uri_publication_params_stct {
    pub has_position: bool,
    pub is_sparse: bool,
    pub signal_eos: bool,
    pub spies_simulate_connection: bool,
    pub has_mtu_length: bool,
    pub mtu_length: usize,
    pub has_term_length: bool,
    pub term_length: usize,
    pub term_offset: usize,
    pub initial_term_id: i32,
    pub term_id: i32,
    pub linger_timeout_ns: u64,
    pub untethered_window_limit_timeout_ns: u64,
    pub untethered_resting_timeout_ns: u64,
    pub has_session_id: bool,
    pub session_id: i32,
    pub entity_tag: i64,
    pub response_correlation_id: i64,
    pub has_max_resend: bool,
    pub max_resend: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_uri_publication_params_stct"]
        [::std::mem::size_of::<aeron_driver_uri_publication_params_stct>() - 104usize];
    ["Alignment of aeron_driver_uri_publication_params_stct"]
        [::std::mem::align_of::<aeron_driver_uri_publication_params_stct>() - 8usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::has_position"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, has_position) - 0usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::is_sparse"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, is_sparse) - 1usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::signal_eos"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, signal_eos) - 2usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::spies_simulate_connection"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        spies_simulate_connection
    )
        - 3usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::has_mtu_length"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, has_mtu_length) - 4usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, mtu_length) - 8usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::has_term_length"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        has_term_length
    ) - 16usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::term_length"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, term_length) - 24usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::term_offset"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, term_offset) - 32usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::initial_term_id"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        initial_term_id
    ) - 40usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::term_id"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, term_id) - 44usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::linger_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        linger_timeout_ns
    ) - 48usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::untethered_window_limit_timeout_ns"] [:: std :: mem :: offset_of ! (aeron_driver_uri_publication_params_stct , untethered_window_limit_timeout_ns) - 56usize] ;
    ["Offset of field: aeron_driver_uri_publication_params_stct::untethered_resting_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        untethered_resting_timeout_ns
    )
        - 64usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::has_session_id"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        has_session_id
    ) - 72usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::session_id"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, session_id) - 76usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::entity_tag"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, entity_tag) - 80usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::response_correlation_id"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        response_correlation_id
    )
        - 88usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::has_max_resend"][::std::mem::offset_of!(
        aeron_driver_uri_publication_params_stct,
        has_max_resend
    ) - 96usize];
    ["Offset of field: aeron_driver_uri_publication_params_stct::max_resend"]
        [::std::mem::offset_of!(aeron_driver_uri_publication_params_stct, max_resend) - 100usize];
};
pub type aeron_driver_uri_publication_params_t = aeron_driver_uri_publication_params_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_uri_subscription_params_stct {
    pub is_reliable: bool,
    pub is_sparse: bool,
    pub is_tether: bool,
    pub is_rejoin: bool,
    pub group: aeron_inferable_boolean_t,
    pub has_session_id: bool,
    pub session_id: i32,
    pub initial_window_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_uri_subscription_params_stct"]
        [::std::mem::size_of::<aeron_driver_uri_subscription_params_stct>() - 24usize];
    ["Alignment of aeron_driver_uri_subscription_params_stct"]
        [::std::mem::align_of::<aeron_driver_uri_subscription_params_stct>() - 8usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::is_reliable"]
        [::std::mem::offset_of!(aeron_driver_uri_subscription_params_stct, is_reliable) - 0usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::is_sparse"]
        [::std::mem::offset_of!(aeron_driver_uri_subscription_params_stct, is_sparse) - 1usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::is_tether"]
        [::std::mem::offset_of!(aeron_driver_uri_subscription_params_stct, is_tether) - 2usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::is_rejoin"]
        [::std::mem::offset_of!(aeron_driver_uri_subscription_params_stct, is_rejoin) - 3usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::group"]
        [::std::mem::offset_of!(aeron_driver_uri_subscription_params_stct, group) - 4usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::has_session_id"][::std::mem::offset_of!(
        aeron_driver_uri_subscription_params_stct,
        has_session_id
    ) - 8usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::session_id"]
        [::std::mem::offset_of!(aeron_driver_uri_subscription_params_stct, session_id) - 12usize];
    ["Offset of field: aeron_driver_uri_subscription_params_stct::initial_window_length"][::std::mem::offset_of!(
        aeron_driver_uri_subscription_params_stct,
        initial_window_length
    )
        - 16usize];
};
pub type aeron_driver_uri_subscription_params_t = aeron_driver_uri_subscription_params_stct;
pub type aeron_driver_conductor_t = aeron_driver_conductor_stct;
unsafe extern "C" {
    pub fn aeron_diver_uri_publication_params(
        uri: *mut aeron_uri_t,
        params: *mut aeron_driver_uri_publication_params_t,
        conductor: *mut aeron_driver_conductor_t,
        is_exclusive: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_uri_subscription_params(
        uri: *mut aeron_uri_t,
        params: *mut aeron_driver_uri_subscription_params_t,
        conductor: *mut aeron_driver_conductor_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_params_validate_mtu_for_sndbuf(
        params: *mut aeron_driver_uri_publication_params_t,
        endpoint_socket_sndbuf: usize,
        channel_socket_sndbuf: usize,
        context_socket_sndbuf: usize,
        os_default_socket_sndbuf: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_subscription_params_validate_initial_window_for_rcvbuf(
        params: *mut aeron_driver_uri_subscription_params_t,
        endpoint_socket_rcvbuf: usize,
        os_default_socket_rcvbuf: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_uri_get_timestamp_offset(
        uri: *mut aeron_uri_t,
        key: *const ::std::os::raw::c_char,
        offset: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_uri_get_offset_info(offset: i32) -> *const ::std::os::raw::c_char;
}
pub type in_addr_t = __uint32_t;
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 1usize];
    ["Offset of field: sockaddr::sa_len"][::std::mem::offset_of!(sockaddr, sa_len) - 0usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 1usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_len"]
        [::std::mem::offset_of!(sockaddr_storage, ss_len) - 0usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 1usize];
    ["Offset of field: sockaddr_storage::__ss_pad1"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad1) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 8usize];
    ["Offset of field: sockaddr_storage::__ss_pad2"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 48usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__u6_addr"][::std::mem::offset_of!(in6_addr, __u6_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::std::mem::size_of::<addrinfo>() - 48usize];
    ["Alignment of addrinfo"][::std::mem::align_of::<addrinfo>() - 8usize];
    ["Offset of field: addrinfo::ai_flags"][::std::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::std::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::std::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::std::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::std::mem::offset_of!(addrinfo, ai_canonname) - 24usize];
    ["Offset of field: addrinfo::ai_addr"][::std::mem::offset_of!(addrinfo, ai_addr) - 32usize];
    ["Offset of field: addrinfo::ai_next"][::std::mem::offset_of!(addrinfo, ai_next) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_dstaddr: *mut sockaddr,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifaddrs"][::std::mem::size_of::<ifaddrs>() - 56usize];
    ["Alignment of ifaddrs"][::std::mem::align_of::<ifaddrs>() - 8usize];
    ["Offset of field: ifaddrs::ifa_next"][::std::mem::offset_of!(ifaddrs, ifa_next) - 0usize];
    ["Offset of field: ifaddrs::ifa_name"][::std::mem::offset_of!(ifaddrs, ifa_name) - 8usize];
    ["Offset of field: ifaddrs::ifa_flags"][::std::mem::offset_of!(ifaddrs, ifa_flags) - 16usize];
    ["Offset of field: ifaddrs::ifa_addr"][::std::mem::offset_of!(ifaddrs, ifa_addr) - 24usize];
    ["Offset of field: ifaddrs::ifa_netmask"]
        [::std::mem::offset_of!(ifaddrs, ifa_netmask) - 32usize];
    ["Offset of field: ifaddrs::ifa_dstaddr"]
        [::std::mem::offset_of!(ifaddrs, ifa_dstaddr) - 40usize];
    ["Offset of field: ifaddrs::ifa_data"][::std::mem::offset_of!(ifaddrs, ifa_data) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pollfd"][::std::mem::size_of::<pollfd>() - 8usize];
    ["Alignment of pollfd"][::std::mem::align_of::<pollfd>() - 4usize];
    ["Offset of field: pollfd::fd"][::std::mem::offset_of!(pollfd, fd) - 0usize];
    ["Offset of field: pollfd::events"][::std::mem::offset_of!(pollfd, events) - 4usize];
    ["Offset of field: pollfd::revents"][::std::mem::offset_of!(pollfd, revents) - 6usize];
};
pub type aeron_socket_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn aeron_set_socket_non_blocking(fd: aeron_socket_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_socket(
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> aeron_socket_t;
}
unsafe extern "C" {
    pub fn aeron_close_socket(socket: aeron_socket_t);
}
unsafe extern "C" {
    pub fn aeron_connect(
        fd: aeron_socket_t,
        address: *mut sockaddr,
        address_length: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_bind(
        fd: aeron_socket_t,
        address: *mut sockaddr,
        address_length: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_net_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_getsockopt(
        fd: aeron_socket_t,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *mut ::std::os::raw::c_void,
        optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_setsockopt(
        fd: aeron_socket_t,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *const ::std::os::raw::c_void,
        optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_getifaddrs(ifap: *mut *mut ifaddrs) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_freeifaddrs(ifa: *mut ifaddrs);
}
unsafe extern "C" {
    pub fn aeron_sendmsg(
        fd: aeron_socket_t,
        msghdr: *mut msghdr,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn aeron_send(
        fd: aeron_socket_t,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn aeron_recvmsg(
        fd: aeron_socket_t,
        msghdr: *mut msghdr,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn aeron_poll(
        fds: *mut pollfd,
        nfds: ::std::os::raw::c_ulong,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_udp_channel_transport_affinity_en {
    AERON_UDP_CHANNEL_TRANSPORT_AFFINITY_SENDER = 0,
    AERON_UDP_CHANNEL_TRANSPORT_AFFINITY_RECEIVER = 1,
    AERON_UDP_CHANNEL_TRANSPORT_AFFINITY_CONDUCTOR = 2,
}
pub use self::aeron_udp_channel_transport_affinity_en as aeron_udp_channel_transport_affinity_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmsghdr {
    _unused: [u8; 0],
}
pub type aeron_udp_channel_transport_params_t = aeron_udp_channel_transport_params_stct;
pub type aeron_udp_channel_transport_t = aeron_udp_channel_transport_stct;
pub type aeron_network_publication_t = aeron_network_publication_stct;
pub type aeron_publication_image_t = aeron_publication_image_stct;
pub type aeron_udp_transport_poller_t = aeron_udp_transport_poller_stct;
pub type aeron_udp_channel_data_paths_t = aeron_udp_channel_data_paths_stct;
pub type aeron_data_packet_dispatcher_t = aeron_data_packet_dispatcher_stct;
pub type aeron_udp_channel_transport_init_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        transport: *mut aeron_udp_channel_transport_t,
        bind_addr: *mut sockaddr_storage,
        multicast_if_addr: *mut sockaddr_storage,
        connect_addr: *mut sockaddr_storage,
        params: *mut aeron_udp_channel_transport_params_t,
        context: *mut aeron_driver_context_t,
        affinity: aeron_udp_channel_transport_affinity_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_transport_reconnect_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        transport: *mut aeron_udp_channel_transport_t,
        connect_addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_transport_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(transport: *mut aeron_udp_channel_transport_t) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_transport_recv_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        transport: *mut aeron_udp_channel_transport_t,
        receiver_clientd: *mut ::std::os::raw::c_void,
        endpoint_clientd: *mut ::std::os::raw::c_void,
        destination_clientd: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
        media_timestamp: *mut timespec,
    ),
>;
pub type aeron_udp_channel_transport_recvmmsg_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        transport: *mut aeron_udp_channel_transport_t,
        msgvec: *mut mmsghdr,
        vlen: usize,
        bytes_rcved: *mut i64,
        recv_func: aeron_udp_transport_recv_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_transport_send_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        transport: *mut aeron_udp_channel_transport_t,
        address: *mut sockaddr_storage,
        iov: *mut iovec,
        iov_length: usize,
        bytes_sent: *mut i64,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_transport_get_so_rcvbuf_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        transport: *mut aeron_udp_channel_transport_t,
        so_rcvbuf: *mut usize,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_transport_bind_addr_and_port_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        transport: *mut aeron_udp_channel_transport_t,
        buffer: *mut ::std::os::raw::c_char,
        length: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_transport_poller_init_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        poller: *mut aeron_udp_transport_poller_t,
        context: *mut aeron_driver_context_t,
        affinity: aeron_udp_channel_transport_affinity_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_transport_poller_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(poller: *mut aeron_udp_transport_poller_t) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_transport_poller_add_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        poller: *mut aeron_udp_transport_poller_t,
        transport: *mut aeron_udp_channel_transport_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_transport_poller_remove_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        poller: *mut aeron_udp_transport_poller_t,
        transport: *mut aeron_udp_channel_transport_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_transport_poller_poll_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        poller: *mut aeron_udp_transport_poller_t,
        msgvec: *mut mmsghdr,
        vlen: usize,
        bytes_rcved: *mut i64,
        recv_func: aeron_udp_transport_recv_func_t,
        recvmmsg_func: aeron_udp_channel_transport_recvmmsg_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_transport_bindings_stct {
    pub init_func: aeron_udp_channel_transport_init_func_t,
    pub reconnect_func: aeron_udp_channel_transport_reconnect_func_t,
    pub close_func: aeron_udp_channel_transport_close_func_t,
    pub recvmmsg_func: aeron_udp_channel_transport_recvmmsg_func_t,
    pub send_func: aeron_udp_channel_transport_send_func_t,
    pub get_so_rcvbuf_func: aeron_udp_channel_transport_get_so_rcvbuf_func_t,
    pub bind_addr_and_port_func: aeron_udp_channel_transport_bind_addr_and_port_func_t,
    pub poller_init_func: aeron_udp_transport_poller_init_func_t,
    pub poller_close_func: aeron_udp_transport_poller_close_func_t,
    pub poller_add_func: aeron_udp_transport_poller_add_func_t,
    pub poller_remove_func: aeron_udp_transport_poller_remove_func_t,
    pub poller_poll_func: aeron_udp_transport_poller_poll_func_t,
    pub meta_info: aeron_udp_channel_transport_bindings_stct_meta_info_fields,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_transport_bindings_stct_meta_info_fields {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub source_symbol: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_transport_bindings_stct_meta_info_fields"][::std::mem::size_of::<
        aeron_udp_channel_transport_bindings_stct_meta_info_fields,
    >() - 24usize];
    ["Alignment of aeron_udp_channel_transport_bindings_stct_meta_info_fields"][::std::mem::align_of::<
        aeron_udp_channel_transport_bindings_stct_meta_info_fields,
    >() - 8usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct_meta_info_fields::name"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct_meta_info_fields,
        name
    )
        - 0usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct_meta_info_fields::type_"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct_meta_info_fields,
        type_
    )
        - 8usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct_meta_info_fields::source_symbol"] [:: std :: mem :: offset_of ! (aeron_udp_channel_transport_bindings_stct_meta_info_fields , source_symbol) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_transport_bindings_stct"]
        [::std::mem::size_of::<aeron_udp_channel_transport_bindings_stct>() - 120usize];
    ["Alignment of aeron_udp_channel_transport_bindings_stct"]
        [::std::mem::align_of::<aeron_udp_channel_transport_bindings_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::init_func"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_bindings_stct, init_func) - 0usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::reconnect_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        reconnect_func
    ) - 8usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::close_func"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_bindings_stct, close_func) - 16usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::recvmmsg_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        recvmmsg_func
    ) - 24usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::send_func"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_bindings_stct, send_func) - 32usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::get_so_rcvbuf_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        get_so_rcvbuf_func
    ) - 40usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::bind_addr_and_port_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        bind_addr_and_port_func
    )
        - 48usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::poller_init_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        poller_init_func
    ) - 56usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::poller_close_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        poller_close_func
    ) - 64usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::poller_add_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        poller_add_func
    ) - 72usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::poller_remove_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        poller_remove_func
    ) - 80usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::poller_poll_func"][::std::mem::offset_of!(
        aeron_udp_channel_transport_bindings_stct,
        poller_poll_func
    ) - 88usize];
    ["Offset of field: aeron_udp_channel_transport_bindings_stct::meta_info"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_bindings_stct, meta_info) - 96usize];
};
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_bindings_load_media(
        bindings_name: *const ::std::os::raw::c_char,
    ) -> *mut aeron_udp_channel_transport_bindings_t;
}
pub type aeron_udp_channel_interceptor_bindings_load_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        delegate_bindings: *mut aeron_udp_channel_interceptor_bindings_t,
    ) -> *mut aeron_udp_channel_interceptor_bindings_t,
>;
unsafe extern "C" {
    pub fn aeron_udp_channel_interceptor_bindings_load(
        existing_interceptor_bindings: *mut aeron_udp_channel_interceptor_bindings_t,
        interceptors: *const ::std::os::raw::c_char,
    ) -> *mut aeron_udp_channel_interceptor_bindings_t;
}
pub type aeron_udp_channel_outgoing_interceptor_t = aeron_udp_channel_outgoing_interceptor_stct;
pub type aeron_udp_channel_incoming_interceptor_t = aeron_udp_channel_incoming_interceptor_stct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_udp_channel_interceptor_notification_type_en {
    AERON_UDP_CHANNEL_INTERCEPTOR_ADD_NOTIFICATION = 0,
    AERON_UDP_CHANNEL_INTERCEPTOR_REMOVE_NOTIFICATION = 1,
}
pub use self::aeron_udp_channel_interceptor_notification_type_en as aeron_udp_channel_interceptor_notification_type_t;
pub type aeron_udp_channel_interceptor_outgoing_send_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        interceptor_state: *mut ::std::os::raw::c_void,
        delegate: *mut aeron_udp_channel_outgoing_interceptor_t,
        transport: *mut aeron_udp_channel_transport_t,
        address: *mut sockaddr_storage,
        iov: *mut iovec,
        iov_length: usize,
        bytes_sent: *mut i64,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_interceptor_incoming_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        interceptor_state: *mut ::std::os::raw::c_void,
        delegate: *mut aeron_udp_channel_incoming_interceptor_t,
        transport: *mut aeron_udp_channel_transport_t,
        receiver_clientd: *mut ::std::os::raw::c_void,
        endpoint_clientd: *mut ::std::os::raw::c_void,
        destination_clientd: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
        media_timestamp: *mut timespec,
    ),
>;
pub type aeron_udp_channel_interceptor_init_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        interceptor_state: *mut *mut ::std::os::raw::c_void,
        context: *mut aeron_driver_context_t,
        affinity: aeron_udp_channel_transport_affinity_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_interceptor_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(interceptor_state: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_interceptor_transport_notification_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        interceptor_state: *mut ::std::os::raw::c_void,
        transport: *mut aeron_udp_channel_transport_t,
        udp_channel: *const aeron_udp_channel_t,
        data_packet_dispatcher: *mut aeron_data_packet_dispatcher_t,
        type_: aeron_udp_channel_interceptor_notification_type_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_interceptor_publication_notification_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        interceptor_state: *mut ::std::os::raw::c_void,
        transport: *mut aeron_udp_channel_transport_t,
        publication: *mut aeron_network_publication_t,
        type_: aeron_udp_channel_interceptor_notification_type_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_udp_channel_interceptor_image_notification_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        interceptor_state: *mut ::std::os::raw::c_void,
        transport: *mut aeron_udp_channel_transport_t,
        image: *mut aeron_publication_image_t,
        type_: aeron_udp_channel_interceptor_notification_type_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_interceptor_bindings_stct {
    pub outgoing_init_func: aeron_udp_channel_interceptor_init_func_t,
    pub incoming_init_func: aeron_udp_channel_interceptor_init_func_t,
    pub outgoing_send_func: aeron_udp_channel_interceptor_outgoing_send_func_t,
    pub incoming_func: aeron_udp_channel_interceptor_incoming_func_t,
    pub outgoing_close_func: aeron_udp_channel_interceptor_close_func_t,
    pub incoming_close_func: aeron_udp_channel_interceptor_close_func_t,
    pub outgoing_transport_notification_func:
        aeron_udp_channel_interceptor_transport_notification_func_t,
    pub incoming_transport_notification_func:
        aeron_udp_channel_interceptor_transport_notification_func_t,
    pub outgoing_publication_notification_func:
        aeron_udp_channel_interceptor_publication_notification_func_t,
    pub incoming_publication_notification_func:
        aeron_udp_channel_interceptor_publication_notification_func_t,
    pub outgoing_image_notification_func: aeron_udp_channel_interceptor_image_notification_func_t,
    pub incoming_image_notification_func: aeron_udp_channel_interceptor_image_notification_func_t,
    pub meta_info: aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub next_interceptor_bindings: *const aeron_udp_channel_interceptor_bindings_t,
    pub source_symbol: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields"]
        [::std::mem::size_of::<
            aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields,
        >() - 32usize];
    ["Alignment of aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields"]
        [::std::mem::align_of::<
            aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields,
        >() - 8usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields::name"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields , name) - 0usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields::type_"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields , type_) - 8usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields::next_interceptor_bindings"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields , next_interceptor_bindings) - 16usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields::source_symbol"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct_interceptor_meta_info_fields , source_symbol) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_interceptor_bindings_stct"]
        [::std::mem::size_of::<aeron_udp_channel_interceptor_bindings_stct>() - 128usize];
    ["Alignment of aeron_udp_channel_interceptor_bindings_stct"]
        [::std::mem::align_of::<aeron_udp_channel_interceptor_bindings_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::outgoing_init_func"][::std::mem::offset_of!(
        aeron_udp_channel_interceptor_bindings_stct,
        outgoing_init_func
    )
        - 0usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::incoming_init_func"][::std::mem::offset_of!(
        aeron_udp_channel_interceptor_bindings_stct,
        incoming_init_func
    )
        - 8usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::outgoing_send_func"][::std::mem::offset_of!(
        aeron_udp_channel_interceptor_bindings_stct,
        outgoing_send_func
    )
        - 16usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::incoming_func"][::std::mem::offset_of!(
        aeron_udp_channel_interceptor_bindings_stct,
        incoming_func
    ) - 24usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::outgoing_close_func"][::std::mem::offset_of!(
        aeron_udp_channel_interceptor_bindings_stct,
        outgoing_close_func
    )
        - 32usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::incoming_close_func"][::std::mem::offset_of!(
        aeron_udp_channel_interceptor_bindings_stct,
        incoming_close_func
    )
        - 40usize];
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::outgoing_transport_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct , outgoing_transport_notification_func) - 48usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::incoming_transport_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct , incoming_transport_notification_func) - 56usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::outgoing_publication_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct , outgoing_publication_notification_func) - 64usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::incoming_publication_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct , incoming_publication_notification_func) - 72usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::outgoing_image_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct , outgoing_image_notification_func) - 80usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::incoming_image_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_interceptor_bindings_stct , incoming_image_notification_func) - 88usize] ;
    ["Offset of field: aeron_udp_channel_interceptor_bindings_stct::meta_info"]
        [::std::mem::offset_of!(aeron_udp_channel_interceptor_bindings_stct, meta_info) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_outgoing_interceptor_stct {
    pub interceptor_state: *mut ::std::os::raw::c_void,
    pub outgoing_send_func: aeron_udp_channel_interceptor_outgoing_send_func_t,
    pub close_func: aeron_udp_channel_interceptor_close_func_t,
    pub outgoing_transport_notification_func:
        aeron_udp_channel_interceptor_transport_notification_func_t,
    pub outgoing_publication_notification_func:
        aeron_udp_channel_interceptor_publication_notification_func_t,
    pub outgoing_image_notification_func: aeron_udp_channel_interceptor_image_notification_func_t,
    pub next_interceptor: *mut aeron_udp_channel_outgoing_interceptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_outgoing_interceptor_stct"]
        [::std::mem::size_of::<aeron_udp_channel_outgoing_interceptor_stct>() - 56usize];
    ["Alignment of aeron_udp_channel_outgoing_interceptor_stct"]
        [::std::mem::align_of::<aeron_udp_channel_outgoing_interceptor_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::interceptor_state"][::std::mem::offset_of!(
        aeron_udp_channel_outgoing_interceptor_stct,
        interceptor_state
    ) - 0usize];
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::outgoing_send_func"][::std::mem::offset_of!(
        aeron_udp_channel_outgoing_interceptor_stct,
        outgoing_send_func
    )
        - 8usize];
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::close_func"]
        [::std::mem::offset_of!(aeron_udp_channel_outgoing_interceptor_stct, close_func) - 16usize];
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::outgoing_transport_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_outgoing_interceptor_stct , outgoing_transport_notification_func) - 24usize] ;
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::outgoing_publication_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_outgoing_interceptor_stct , outgoing_publication_notification_func) - 32usize] ;
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::outgoing_image_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_outgoing_interceptor_stct , outgoing_image_notification_func) - 40usize] ;
    ["Offset of field: aeron_udp_channel_outgoing_interceptor_stct::next_interceptor"][::std::mem::offset_of!(
        aeron_udp_channel_outgoing_interceptor_stct,
        next_interceptor
    ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_incoming_interceptor_stct {
    pub interceptor_state: *mut ::std::os::raw::c_void,
    pub incoming_func: aeron_udp_channel_interceptor_incoming_func_t,
    pub close_func: aeron_udp_channel_interceptor_close_func_t,
    pub incoming_transport_notification_func:
        aeron_udp_channel_interceptor_transport_notification_func_t,
    pub incoming_publication_notification_func:
        aeron_udp_channel_interceptor_publication_notification_func_t,
    pub incoming_image_notification_func: aeron_udp_channel_interceptor_image_notification_func_t,
    pub next_interceptor: *mut aeron_udp_channel_incoming_interceptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_incoming_interceptor_stct"]
        [::std::mem::size_of::<aeron_udp_channel_incoming_interceptor_stct>() - 56usize];
    ["Alignment of aeron_udp_channel_incoming_interceptor_stct"]
        [::std::mem::align_of::<aeron_udp_channel_incoming_interceptor_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::interceptor_state"][::std::mem::offset_of!(
        aeron_udp_channel_incoming_interceptor_stct,
        interceptor_state
    ) - 0usize];
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::incoming_func"][::std::mem::offset_of!(
        aeron_udp_channel_incoming_interceptor_stct,
        incoming_func
    ) - 8usize];
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::close_func"]
        [::std::mem::offset_of!(aeron_udp_channel_incoming_interceptor_stct, close_func) - 16usize];
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::incoming_transport_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_incoming_interceptor_stct , incoming_transport_notification_func) - 24usize] ;
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::incoming_publication_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_incoming_interceptor_stct , incoming_publication_notification_func) - 32usize] ;
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::incoming_image_notification_func"] [:: std :: mem :: offset_of ! (aeron_udp_channel_incoming_interceptor_stct , incoming_image_notification_func) - 40usize] ;
    ["Offset of field: aeron_udp_channel_incoming_interceptor_stct::next_interceptor"][::std::mem::offset_of!(
        aeron_udp_channel_incoming_interceptor_stct,
        next_interceptor
    ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_data_paths_stct {
    pub outgoing_interceptors: *mut aeron_udp_channel_outgoing_interceptor_t,
    pub incoming_interceptors: *mut aeron_udp_channel_incoming_interceptor_t,
    pub send_func: aeron_udp_channel_transport_send_func_t,
    pub recv_func: aeron_udp_transport_recv_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_data_paths_stct"]
        [::std::mem::size_of::<aeron_udp_channel_data_paths_stct>() - 32usize];
    ["Alignment of aeron_udp_channel_data_paths_stct"]
        [::std::mem::align_of::<aeron_udp_channel_data_paths_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_data_paths_stct::outgoing_interceptors"]
        [::std::mem::offset_of!(aeron_udp_channel_data_paths_stct, outgoing_interceptors) - 0usize];
    ["Offset of field: aeron_udp_channel_data_paths_stct::incoming_interceptors"]
        [::std::mem::offset_of!(aeron_udp_channel_data_paths_stct, incoming_interceptors) - 8usize];
    ["Offset of field: aeron_udp_channel_data_paths_stct::send_func"]
        [::std::mem::offset_of!(aeron_udp_channel_data_paths_stct, send_func) - 16usize];
    ["Offset of field: aeron_udp_channel_data_paths_stct::recv_func"]
        [::std::mem::offset_of!(aeron_udp_channel_data_paths_stct, recv_func) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_transport_recv_func_holder_stct {
    pub func: aeron_udp_transport_recv_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_transport_recv_func_holder_stct"]
        [::std::mem::size_of::<aeron_udp_channel_transport_recv_func_holder_stct>() - 8usize];
    ["Alignment of aeron_udp_channel_transport_recv_func_holder_stct"]
        [::std::mem::align_of::<aeron_udp_channel_transport_recv_func_holder_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_transport_recv_func_holder_stct::func"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_recv_func_holder_stct, func) - 0usize];
};
pub type aeron_udp_channel_transport_recv_func_holder_t =
    aeron_udp_channel_transport_recv_func_holder_stct;
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_recv_func_holder_close(
        holder: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_incoming_interceptor_recv_func(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        transport: *mut aeron_udp_channel_transport_t,
        receiver_clientd: *mut ::std::os::raw::c_void,
        endpoint_clientd: *mut ::std::os::raw::c_void,
        destination_clientd: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
        media_timestamp: *mut timespec,
    );
}
unsafe extern "C" {
    pub fn aeron_udp_channel_data_paths_init(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        outgoing_interceptor_bindings: *mut aeron_udp_channel_interceptor_bindings_t,
        incoming_interceptor_bindings: *mut aeron_udp_channel_interceptor_bindings_t,
        media_bindings: *mut aeron_udp_channel_transport_bindings_t,
        recv_func: aeron_udp_transport_recv_func_t,
        context: *mut aeron_driver_context_t,
        affinity: aeron_udp_channel_transport_affinity_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_data_paths_delete(
        data_paths: *mut aeron_udp_channel_data_paths_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_frame_header_stct {
    pub frame_length: i32,
    pub version: i8,
    pub flags: u8,
    pub type_: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_frame_header_stct"][::std::mem::size_of::<aeron_frame_header_stct>() - 8usize];
    ["Alignment of aeron_frame_header_stct"]
        [::std::mem::align_of::<aeron_frame_header_stct>() - 4usize];
    ["Offset of field: aeron_frame_header_stct::frame_length"]
        [::std::mem::offset_of!(aeron_frame_header_stct, frame_length) - 0usize];
    ["Offset of field: aeron_frame_header_stct::version"]
        [::std::mem::offset_of!(aeron_frame_header_stct, version) - 4usize];
    ["Offset of field: aeron_frame_header_stct::flags"]
        [::std::mem::offset_of!(aeron_frame_header_stct, flags) - 5usize];
    ["Offset of field: aeron_frame_header_stct::type_"]
        [::std::mem::offset_of!(aeron_frame_header_stct, type_) - 6usize];
};
pub type aeron_frame_header_t = aeron_frame_header_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_setup_header_stct {
    pub frame_header: aeron_frame_header_t,
    pub term_offset: i32,
    pub session_id: i32,
    pub stream_id: i32,
    pub initial_term_id: i32,
    pub active_term_id: i32,
    pub term_length: i32,
    pub mtu: i32,
    pub ttl: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_setup_header_stct"][::std::mem::size_of::<aeron_setup_header_stct>() - 40usize];
    ["Alignment of aeron_setup_header_stct"]
        [::std::mem::align_of::<aeron_setup_header_stct>() - 4usize];
    ["Offset of field: aeron_setup_header_stct::frame_header"]
        [::std::mem::offset_of!(aeron_setup_header_stct, frame_header) - 0usize];
    ["Offset of field: aeron_setup_header_stct::term_offset"]
        [::std::mem::offset_of!(aeron_setup_header_stct, term_offset) - 8usize];
    ["Offset of field: aeron_setup_header_stct::session_id"]
        [::std::mem::offset_of!(aeron_setup_header_stct, session_id) - 12usize];
    ["Offset of field: aeron_setup_header_stct::stream_id"]
        [::std::mem::offset_of!(aeron_setup_header_stct, stream_id) - 16usize];
    ["Offset of field: aeron_setup_header_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_setup_header_stct, initial_term_id) - 20usize];
    ["Offset of field: aeron_setup_header_stct::active_term_id"]
        [::std::mem::offset_of!(aeron_setup_header_stct, active_term_id) - 24usize];
    ["Offset of field: aeron_setup_header_stct::term_length"]
        [::std::mem::offset_of!(aeron_setup_header_stct, term_length) - 28usize];
    ["Offset of field: aeron_setup_header_stct::mtu"]
        [::std::mem::offset_of!(aeron_setup_header_stct, mtu) - 32usize];
    ["Offset of field: aeron_setup_header_stct::ttl"]
        [::std::mem::offset_of!(aeron_setup_header_stct, ttl) - 36usize];
};
pub type aeron_setup_header_t = aeron_setup_header_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_data_header_stct {
    pub frame_header: aeron_frame_header_t,
    pub term_offset: i32,
    pub session_id: i32,
    pub stream_id: i32,
    pub term_id: i32,
    pub reserved_value: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_data_header_stct"][::std::mem::size_of::<aeron_data_header_stct>() - 32usize];
    ["Alignment of aeron_data_header_stct"]
        [::std::mem::align_of::<aeron_data_header_stct>() - 4usize];
    ["Offset of field: aeron_data_header_stct::frame_header"]
        [::std::mem::offset_of!(aeron_data_header_stct, frame_header) - 0usize];
    ["Offset of field: aeron_data_header_stct::term_offset"]
        [::std::mem::offset_of!(aeron_data_header_stct, term_offset) - 8usize];
    ["Offset of field: aeron_data_header_stct::session_id"]
        [::std::mem::offset_of!(aeron_data_header_stct, session_id) - 12usize];
    ["Offset of field: aeron_data_header_stct::stream_id"]
        [::std::mem::offset_of!(aeron_data_header_stct, stream_id) - 16usize];
    ["Offset of field: aeron_data_header_stct::term_id"]
        [::std::mem::offset_of!(aeron_data_header_stct, term_id) - 20usize];
    ["Offset of field: aeron_data_header_stct::reserved_value"]
        [::std::mem::offset_of!(aeron_data_header_stct, reserved_value) - 24usize];
};
pub type aeron_data_header_t = aeron_data_header_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_nak_header_stct {
    pub frame_header: aeron_frame_header_t,
    pub session_id: i32,
    pub stream_id: i32,
    pub term_id: i32,
    pub term_offset: i32,
    pub length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_nak_header_stct"][::std::mem::size_of::<aeron_nak_header_stct>() - 28usize];
    ["Alignment of aeron_nak_header_stct"]
        [::std::mem::align_of::<aeron_nak_header_stct>() - 4usize];
    ["Offset of field: aeron_nak_header_stct::frame_header"]
        [::std::mem::offset_of!(aeron_nak_header_stct, frame_header) - 0usize];
    ["Offset of field: aeron_nak_header_stct::session_id"]
        [::std::mem::offset_of!(aeron_nak_header_stct, session_id) - 8usize];
    ["Offset of field: aeron_nak_header_stct::stream_id"]
        [::std::mem::offset_of!(aeron_nak_header_stct, stream_id) - 12usize];
    ["Offset of field: aeron_nak_header_stct::term_id"]
        [::std::mem::offset_of!(aeron_nak_header_stct, term_id) - 16usize];
    ["Offset of field: aeron_nak_header_stct::term_offset"]
        [::std::mem::offset_of!(aeron_nak_header_stct, term_offset) - 20usize];
    ["Offset of field: aeron_nak_header_stct::length"]
        [::std::mem::offset_of!(aeron_nak_header_stct, length) - 24usize];
};
pub type aeron_nak_header_t = aeron_nak_header_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_status_message_header_stct {
    pub frame_header: aeron_frame_header_t,
    pub session_id: i32,
    pub stream_id: i32,
    pub consumption_term_id: i32,
    pub consumption_term_offset: i32,
    pub receiver_window: i32,
    pub receiver_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_status_message_header_stct"]
        [::std::mem::size_of::<aeron_status_message_header_stct>() - 36usize];
    ["Alignment of aeron_status_message_header_stct"]
        [::std::mem::align_of::<aeron_status_message_header_stct>() - 4usize];
    ["Offset of field: aeron_status_message_header_stct::frame_header"]
        [::std::mem::offset_of!(aeron_status_message_header_stct, frame_header) - 0usize];
    ["Offset of field: aeron_status_message_header_stct::session_id"]
        [::std::mem::offset_of!(aeron_status_message_header_stct, session_id) - 8usize];
    ["Offset of field: aeron_status_message_header_stct::stream_id"]
        [::std::mem::offset_of!(aeron_status_message_header_stct, stream_id) - 12usize];
    ["Offset of field: aeron_status_message_header_stct::consumption_term_id"]
        [::std::mem::offset_of!(aeron_status_message_header_stct, consumption_term_id) - 16usize];
    ["Offset of field: aeron_status_message_header_stct::consumption_term_offset"][::std::mem::offset_of!(
        aeron_status_message_header_stct,
        consumption_term_offset
    ) - 20usize];
    ["Offset of field: aeron_status_message_header_stct::receiver_window"]
        [::std::mem::offset_of!(aeron_status_message_header_stct, receiver_window) - 24usize];
    ["Offset of field: aeron_status_message_header_stct::receiver_id"]
        [::std::mem::offset_of!(aeron_status_message_header_stct, receiver_id) - 28usize];
};
pub type aeron_status_message_header_t = aeron_status_message_header_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_status_message_optional_header_stct {
    pub group_tag: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_status_message_optional_header_stct"]
        [::std::mem::size_of::<aeron_status_message_optional_header_stct>() - 8usize];
    ["Alignment of aeron_status_message_optional_header_stct"]
        [::std::mem::align_of::<aeron_status_message_optional_header_stct>() - 4usize];
    ["Offset of field: aeron_status_message_optional_header_stct::group_tag"]
        [::std::mem::offset_of!(aeron_status_message_optional_header_stct, group_tag) - 0usize];
};
pub type aeron_status_message_optional_header_t = aeron_status_message_optional_header_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_rttm_header_stct {
    pub frame_header: aeron_frame_header_t,
    pub session_id: i32,
    pub stream_id: i32,
    pub echo_timestamp: i64,
    pub reception_delta: i64,
    pub receiver_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_rttm_header_stct"][::std::mem::size_of::<aeron_rttm_header_stct>() - 40usize];
    ["Alignment of aeron_rttm_header_stct"]
        [::std::mem::align_of::<aeron_rttm_header_stct>() - 4usize];
    ["Offset of field: aeron_rttm_header_stct::frame_header"]
        [::std::mem::offset_of!(aeron_rttm_header_stct, frame_header) - 0usize];
    ["Offset of field: aeron_rttm_header_stct::session_id"]
        [::std::mem::offset_of!(aeron_rttm_header_stct, session_id) - 8usize];
    ["Offset of field: aeron_rttm_header_stct::stream_id"]
        [::std::mem::offset_of!(aeron_rttm_header_stct, stream_id) - 12usize];
    ["Offset of field: aeron_rttm_header_stct::echo_timestamp"]
        [::std::mem::offset_of!(aeron_rttm_header_stct, echo_timestamp) - 16usize];
    ["Offset of field: aeron_rttm_header_stct::reception_delta"]
        [::std::mem::offset_of!(aeron_rttm_header_stct, reception_delta) - 24usize];
    ["Offset of field: aeron_rttm_header_stct::receiver_id"]
        [::std::mem::offset_of!(aeron_rttm_header_stct, receiver_id) - 32usize];
};
pub type aeron_rttm_header_t = aeron_rttm_header_stct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_resolution_header_stct {
    pub res_type: i8,
    pub res_flags: u8,
    pub udp_port: u16,
    pub age_in_ms: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_resolution_header_stct"]
        [::std::mem::size_of::<aeron_resolution_header_stct>() - 8usize];
    ["Alignment of aeron_resolution_header_stct"]
        [::std::mem::align_of::<aeron_resolution_header_stct>() - 1usize];
    ["Offset of field: aeron_resolution_header_stct::res_type"]
        [::std::mem::offset_of!(aeron_resolution_header_stct, res_type) - 0usize];
    ["Offset of field: aeron_resolution_header_stct::res_flags"]
        [::std::mem::offset_of!(aeron_resolution_header_stct, res_flags) - 1usize];
    ["Offset of field: aeron_resolution_header_stct::udp_port"]
        [::std::mem::offset_of!(aeron_resolution_header_stct, udp_port) - 2usize];
    ["Offset of field: aeron_resolution_header_stct::age_in_ms"]
        [::std::mem::offset_of!(aeron_resolution_header_stct, age_in_ms) - 4usize];
};
pub type aeron_resolution_header_t = aeron_resolution_header_stct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_resolution_header_ipv4_stct {
    pub resolution_header: aeron_resolution_header_t,
    pub addr: [u8; 4usize],
    pub name_length: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_resolution_header_ipv4_stct"]
        [::std::mem::size_of::<aeron_resolution_header_ipv4_stct>() - 14usize];
    ["Alignment of aeron_resolution_header_ipv4_stct"]
        [::std::mem::align_of::<aeron_resolution_header_ipv4_stct>() - 1usize];
    ["Offset of field: aeron_resolution_header_ipv4_stct::resolution_header"]
        [::std::mem::offset_of!(aeron_resolution_header_ipv4_stct, resolution_header) - 0usize];
    ["Offset of field: aeron_resolution_header_ipv4_stct::addr"]
        [::std::mem::offset_of!(aeron_resolution_header_ipv4_stct, addr) - 8usize];
    ["Offset of field: aeron_resolution_header_ipv4_stct::name_length"]
        [::std::mem::offset_of!(aeron_resolution_header_ipv4_stct, name_length) - 12usize];
};
pub type aeron_resolution_header_ipv4_t = aeron_resolution_header_ipv4_stct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_resolution_header_ipv6_stct {
    pub resolution_header: aeron_resolution_header_t,
    pub addr: [u8; 16usize],
    pub name_length: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_resolution_header_ipv6_stct"]
        [::std::mem::size_of::<aeron_resolution_header_ipv6_stct>() - 26usize];
    ["Alignment of aeron_resolution_header_ipv6_stct"]
        [::std::mem::align_of::<aeron_resolution_header_ipv6_stct>() - 1usize];
    ["Offset of field: aeron_resolution_header_ipv6_stct::resolution_header"]
        [::std::mem::offset_of!(aeron_resolution_header_ipv6_stct, resolution_header) - 0usize];
    ["Offset of field: aeron_resolution_header_ipv6_stct::addr"]
        [::std::mem::offset_of!(aeron_resolution_header_ipv6_stct, addr) - 8usize];
    ["Offset of field: aeron_resolution_header_ipv6_stct::name_length"]
        [::std::mem::offset_of!(aeron_resolution_header_ipv6_stct, name_length) - 24usize];
};
pub type aeron_resolution_header_ipv6_t = aeron_resolution_header_ipv6_stct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_option_header_stct {
    pub option_length: u16,
    pub type_: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_option_header_stct"]
        [::std::mem::size_of::<aeron_option_header_stct>() - 4usize];
    ["Alignment of aeron_option_header_stct"]
        [::std::mem::align_of::<aeron_option_header_stct>() - 1usize];
    ["Offset of field: aeron_option_header_stct::option_length"]
        [::std::mem::offset_of!(aeron_option_header_stct, option_length) - 0usize];
    ["Offset of field: aeron_option_header_stct::type_"]
        [::std::mem::offset_of!(aeron_option_header_stct, type_) - 2usize];
};
pub type aeron_option_header_t = aeron_option_header_stct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_response_setup_header_stct {
    pub frame_header: aeron_frame_header_t,
    pub session_id: i32,
    pub stream_id: i32,
    pub response_session_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_response_setup_header_stct"]
        [::std::mem::size_of::<aeron_response_setup_header_stct>() - 20usize];
    ["Alignment of aeron_response_setup_header_stct"]
        [::std::mem::align_of::<aeron_response_setup_header_stct>() - 1usize];
    ["Offset of field: aeron_response_setup_header_stct::frame_header"]
        [::std::mem::offset_of!(aeron_response_setup_header_stct, frame_header) - 0usize];
    ["Offset of field: aeron_response_setup_header_stct::session_id"]
        [::std::mem::offset_of!(aeron_response_setup_header_stct, session_id) - 8usize];
    ["Offset of field: aeron_response_setup_header_stct::stream_id"]
        [::std::mem::offset_of!(aeron_response_setup_header_stct, stream_id) - 12usize];
    ["Offset of field: aeron_response_setup_header_stct::response_session_id"]
        [::std::mem::offset_of!(aeron_response_setup_header_stct, response_session_id) - 16usize];
};
pub type aeron_response_setup_header_t = aeron_response_setup_header_stct;
unsafe extern "C" {
    pub fn aeron_udp_protocol_group_tag(
        sm: *mut aeron_status_message_header_t,
        group_tag: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_res_header_entry_length_ipv4(header: *mut aeron_resolution_header_ipv4_t)
        -> usize;
}
unsafe extern "C" {
    pub fn aeron_res_header_entry_length_ipv6(header: *mut aeron_resolution_header_ipv6_t)
        -> usize;
}
unsafe extern "C" {
    pub fn aeron_res_header_entry_length(
        res: *mut ::std::os::raw::c_void,
        remaining: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_logbuffer_metadata_stct {
    pub term_tail_counters: [i64; 3usize],
    pub active_term_count: i32,
    pub pad1: [u8; 100usize],
    pub end_of_stream_position: i64,
    pub is_connected: i32,
    pub active_transport_count: i32,
    pub pad2: [u8; 112usize],
    pub correlation_id: i64,
    pub initial_term_id: i32,
    pub default_frame_header_length: i32,
    pub mtu_length: i32,
    pub term_length: i32,
    pub page_size: i32,
    pub pad3: [u8; 36usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_logbuffer_metadata_stct"]
        [::std::mem::size_of::<aeron_logbuffer_metadata_stct>() - 320usize];
    ["Alignment of aeron_logbuffer_metadata_stct"]
        [::std::mem::align_of::<aeron_logbuffer_metadata_stct>() - 4usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::term_tail_counters"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, term_tail_counters) - 0usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::active_term_count"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, active_term_count) - 24usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::pad1"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, pad1) - 28usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::end_of_stream_position"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, end_of_stream_position) - 128usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::is_connected"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, is_connected) - 136usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::active_transport_count"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, active_transport_count) - 140usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::pad2"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, pad2) - 144usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, correlation_id) - 256usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, initial_term_id) - 264usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::default_frame_header_length"][::std::mem::offset_of!(
        aeron_logbuffer_metadata_stct,
        default_frame_header_length
    ) - 268usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, mtu_length) - 272usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::term_length"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, term_length) - 276usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::page_size"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, page_size) - 280usize];
    ["Offset of field: aeron_logbuffer_metadata_stct::pad3"]
        [::std::mem::offset_of!(aeron_logbuffer_metadata_stct, pad3) - 284usize];
};
pub type aeron_logbuffer_metadata_t = aeron_logbuffer_metadata_stct;
unsafe extern "C" {
    pub fn aeron_logbuffer_check_term_length(term_length: u64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_logbuffer_check_page_size(page_size: u64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mapped_file_stct {
    pub addr: *mut ::std::os::raw::c_void,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mapped_file_stct"][::std::mem::size_of::<aeron_mapped_file_stct>() - 16usize];
    ["Alignment of aeron_mapped_file_stct"]
        [::std::mem::align_of::<aeron_mapped_file_stct>() - 8usize];
    ["Offset of field: aeron_mapped_file_stct::addr"]
        [::std::mem::offset_of!(aeron_mapped_file_stct, addr) - 0usize];
    ["Offset of field: aeron_mapped_file_stct::length"]
        [::std::mem::offset_of!(aeron_mapped_file_stct, length) - 8usize];
};
pub type aeron_mapped_file_t = aeron_mapped_file_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mapped_buffer_stct {
    pub addr: *mut u8,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mapped_buffer_stct"]
        [::std::mem::size_of::<aeron_mapped_buffer_stct>() - 16usize];
    ["Alignment of aeron_mapped_buffer_stct"]
        [::std::mem::align_of::<aeron_mapped_buffer_stct>() - 8usize];
    ["Offset of field: aeron_mapped_buffer_stct::addr"]
        [::std::mem::offset_of!(aeron_mapped_buffer_stct, addr) - 0usize];
    ["Offset of field: aeron_mapped_buffer_stct::length"]
        [::std::mem::offset_of!(aeron_mapped_buffer_stct, length) - 8usize];
};
pub type aeron_mapped_buffer_t = aeron_mapped_buffer_stct;
unsafe extern "C" {
    pub fn aeron_is_directory(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_mkdir_recursive(
        pathname: *const ::std::os::raw::c_char,
        permission: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_map_new_file(
        mapped_file: *mut aeron_mapped_file_t,
        path: *const ::std::os::raw::c_char,
        fill_with_zeroes: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_map_existing_file(
        mapped_file: *mut aeron_mapped_file_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_unmap(mapped_file: *mut aeron_mapped_file_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_msync(addr: *mut ::std::os::raw::c_void, length: usize) -> ::std::os::raw::c_int;
}
pub type aeron_usable_fs_space_func_t =
    ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> u64>;
unsafe extern "C" {
    pub fn aeron_file_length(path: *const ::std::os::raw::c_char) -> i64;
}
unsafe extern "C" {
    pub fn aeron_usable_fs_space(path: *const ::std::os::raw::c_char) -> u64;
}
unsafe extern "C" {
    pub fn aeron_usable_fs_space_disabled(path: *const ::std::os::raw::c_char) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mapped_raw_log_stct {
    pub term_buffers: [aeron_mapped_buffer_t; 3usize],
    pub log_meta_data: aeron_mapped_buffer_t,
    pub mapped_file: aeron_mapped_file_t,
    pub term_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mapped_raw_log_stct"]
        [::std::mem::size_of::<aeron_mapped_raw_log_stct>() - 88usize];
    ["Alignment of aeron_mapped_raw_log_stct"]
        [::std::mem::align_of::<aeron_mapped_raw_log_stct>() - 8usize];
    ["Offset of field: aeron_mapped_raw_log_stct::term_buffers"]
        [::std::mem::offset_of!(aeron_mapped_raw_log_stct, term_buffers) - 0usize];
    ["Offset of field: aeron_mapped_raw_log_stct::log_meta_data"]
        [::std::mem::offset_of!(aeron_mapped_raw_log_stct, log_meta_data) - 48usize];
    ["Offset of field: aeron_mapped_raw_log_stct::mapped_file"]
        [::std::mem::offset_of!(aeron_mapped_raw_log_stct, mapped_file) - 64usize];
    ["Offset of field: aeron_mapped_raw_log_stct::term_length"]
        [::std::mem::offset_of!(aeron_mapped_raw_log_stct, term_length) - 80usize];
};
pub type aeron_mapped_raw_log_t = aeron_mapped_raw_log_stct;
unsafe extern "C" {
    pub fn aeron_ipc_publication_location(
        dst: *mut ::std::os::raw::c_char,
        length: usize,
        aeron_dir: *const ::std::os::raw::c_char,
        correlation_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_location(
        dst: *mut ::std::os::raw::c_char,
        length: usize,
        aeron_dir: *const ::std::os::raw::c_char,
        correlation_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_location(
        dst: *mut ::std::os::raw::c_char,
        length: usize,
        aeron_dir: *const ::std::os::raw::c_char,
        correlation_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_temp_filename(filename: *mut ::std::os::raw::c_char, length: usize) -> usize;
}
pub type aeron_raw_log_map_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut aeron_mapped_raw_log_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
        arg4: u64,
        arg5: u64,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_raw_log_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut aeron_mapped_raw_log_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_raw_log_free_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut aeron_mapped_raw_log_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool,
>;
unsafe extern "C" {
    pub fn aeron_raw_log_map(
        mapped_raw_log: *mut aeron_mapped_raw_log_t,
        path: *const ::std::os::raw::c_char,
        use_sparse_files: bool,
        term_length: u64,
        page_size: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_raw_log_map_existing(
        mapped_raw_log: *mut aeron_mapped_raw_log_t,
        path: *const ::std::os::raw::c_char,
        pre_touch: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_raw_log_close(
        mapped_raw_log: *mut aeron_mapped_raw_log_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_raw_log_free(
        mapped_raw_log: *mut aeron_mapped_raw_log_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_file_resolve(
        parent: *const ::std::os::raw::c_char,
        child: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        buffer_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_queue_offer_result_stct {
    AERON_OFFER_SUCCESS = 0,
    AERON_OFFER_ERROR = -2,
    AERON_OFFER_FULL = -1,
}
pub use self::aeron_queue_offer_result_stct as aeron_queue_offer_result_t;
pub type aeron_queue_drain_func_t = ::std::option::Option<
    unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void, item: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_spsc_concurrent_array_queue_stct {
    pub padding: [i8; 56usize],
    pub producer: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1,
    pub consumer: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2,
    pub capacity: usize,
    pub mask: usize,
    pub buffer: *mut *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1 {
    pub tail: u64,
    pub head_cache: u64,
    pub padding: [i8; 48usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1>() - 64usize];
    ["Alignment of aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1::tail"][::std::mem::offset_of!(
        aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1,
        tail
    ) - 0usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1::head_cache"][::std::mem::offset_of!(
        aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1,
        head_cache
    )
        - 8usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1::padding"][::std::mem::offset_of!(
        aeron_spsc_concurrent_array_queue_stct__bindgen_ty_1,
        padding
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2 {
    pub head: u64,
    pub padding: [i8; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2"]
        [::std::mem::size_of::<aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2>() - 64usize];
    ["Alignment of aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2"]
        [::std::mem::align_of::<aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2>() - 8usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2::head"][::std::mem::offset_of!(
        aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2,
        head
    ) - 0usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2::padding"][::std::mem::offset_of!(
        aeron_spsc_concurrent_array_queue_stct__bindgen_ty_2,
        padding
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_spsc_concurrent_array_queue_stct"]
        [::std::mem::size_of::<aeron_spsc_concurrent_array_queue_stct>() - 208usize];
    ["Alignment of aeron_spsc_concurrent_array_queue_stct"]
        [::std::mem::align_of::<aeron_spsc_concurrent_array_queue_stct>() - 8usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct::padding"]
        [::std::mem::offset_of!(aeron_spsc_concurrent_array_queue_stct, padding) - 0usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct::producer"]
        [::std::mem::offset_of!(aeron_spsc_concurrent_array_queue_stct, producer) - 56usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct::consumer"]
        [::std::mem::offset_of!(aeron_spsc_concurrent_array_queue_stct, consumer) - 120usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct::capacity"]
        [::std::mem::offset_of!(aeron_spsc_concurrent_array_queue_stct, capacity) - 184usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct::mask"]
        [::std::mem::offset_of!(aeron_spsc_concurrent_array_queue_stct, mask) - 192usize];
    ["Offset of field: aeron_spsc_concurrent_array_queue_stct::buffer"]
        [::std::mem::offset_of!(aeron_spsc_concurrent_array_queue_stct, buffer) - 200usize];
};
pub type aeron_spsc_concurrent_array_queue_t = aeron_spsc_concurrent_array_queue_stct;
unsafe extern "C" {
    pub fn aeron_spsc_concurrent_array_queue_init(
        queue: *mut aeron_spsc_concurrent_array_queue_t,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_spsc_concurrent_array_queue_close(
        queue: *mut aeron_spsc_concurrent_array_queue_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mpsc_concurrent_array_queue_stct {
    pub padding: [i8; 56usize],
    pub producer: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1,
    pub consumer: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2,
    pub capacity: usize,
    pub mask: usize,
    pub buffer: *mut *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1 {
    pub tail: u64,
    pub head_cache: u64,
    pub shared_head_cache: u64,
    pub padding: [i8; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1>() - 64usize];
    ["Alignment of aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1::tail"][::std::mem::offset_of!(
        aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1,
        tail
    ) - 0usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1::head_cache"][::std::mem::offset_of!(
        aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1,
        head_cache
    )
        - 8usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1::shared_head_cache"][::std::mem::offset_of!(
        aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1,
        shared_head_cache
    )
        - 16usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1::padding"][::std::mem::offset_of!(
        aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_1,
        padding
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2 {
    pub head: u64,
    pub padding: [i8; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2"]
        [::std::mem::size_of::<aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2>() - 64usize];
    ["Alignment of aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2"]
        [::std::mem::align_of::<aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2>() - 8usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2::head"][::std::mem::offset_of!(
        aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2,
        head
    ) - 0usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2::padding"][::std::mem::offset_of!(
        aeron_mpsc_concurrent_array_queue_stct__bindgen_ty_2,
        padding
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mpsc_concurrent_array_queue_stct"]
        [::std::mem::size_of::<aeron_mpsc_concurrent_array_queue_stct>() - 208usize];
    ["Alignment of aeron_mpsc_concurrent_array_queue_stct"]
        [::std::mem::align_of::<aeron_mpsc_concurrent_array_queue_stct>() - 8usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct::padding"]
        [::std::mem::offset_of!(aeron_mpsc_concurrent_array_queue_stct, padding) - 0usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct::producer"]
        [::std::mem::offset_of!(aeron_mpsc_concurrent_array_queue_stct, producer) - 56usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct::consumer"]
        [::std::mem::offset_of!(aeron_mpsc_concurrent_array_queue_stct, consumer) - 120usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct::capacity"]
        [::std::mem::offset_of!(aeron_mpsc_concurrent_array_queue_stct, capacity) - 184usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct::mask"]
        [::std::mem::offset_of!(aeron_mpsc_concurrent_array_queue_stct, mask) - 192usize];
    ["Offset of field: aeron_mpsc_concurrent_array_queue_stct::buffer"]
        [::std::mem::offset_of!(aeron_mpsc_concurrent_array_queue_stct, buffer) - 200usize];
};
pub type aeron_mpsc_concurrent_array_queue_t = aeron_mpsc_concurrent_array_queue_stct;
unsafe extern "C" {
    pub fn aeron_mpsc_concurrent_array_queue_init(
        queue: *mut aeron_mpsc_concurrent_array_queue_t,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_mpsc_concurrent_array_queue_close(
        queue: *mut aeron_mpsc_concurrent_array_queue_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_rb_descriptor_stct {
    pub begin_pad: [u8; 128usize],
    pub tail_position: i64,
    pub tail_pad: [u8; 120usize],
    pub head_cache_position: i64,
    pub head_cache_pad: [u8; 120usize],
    pub head_position: i64,
    pub head_pad: [u8; 120usize],
    pub correlation_counter: i64,
    pub correlation_counter_pad: [u8; 120usize],
    pub consumer_heartbeat: i64,
    pub consumer_heartbeat_pad: [u8; 120usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_rb_descriptor_stct"]
        [::std::mem::size_of::<aeron_rb_descriptor_stct>() - 768usize];
    ["Alignment of aeron_rb_descriptor_stct"]
        [::std::mem::align_of::<aeron_rb_descriptor_stct>() - 4usize];
    ["Offset of field: aeron_rb_descriptor_stct::begin_pad"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, begin_pad) - 0usize];
    ["Offset of field: aeron_rb_descriptor_stct::tail_position"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, tail_position) - 128usize];
    ["Offset of field: aeron_rb_descriptor_stct::tail_pad"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, tail_pad) - 136usize];
    ["Offset of field: aeron_rb_descriptor_stct::head_cache_position"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, head_cache_position) - 256usize];
    ["Offset of field: aeron_rb_descriptor_stct::head_cache_pad"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, head_cache_pad) - 264usize];
    ["Offset of field: aeron_rb_descriptor_stct::head_position"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, head_position) - 384usize];
    ["Offset of field: aeron_rb_descriptor_stct::head_pad"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, head_pad) - 392usize];
    ["Offset of field: aeron_rb_descriptor_stct::correlation_counter"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, correlation_counter) - 512usize];
    ["Offset of field: aeron_rb_descriptor_stct::correlation_counter_pad"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, correlation_counter_pad) - 520usize];
    ["Offset of field: aeron_rb_descriptor_stct::consumer_heartbeat"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, consumer_heartbeat) - 640usize];
    ["Offset of field: aeron_rb_descriptor_stct::consumer_heartbeat_pad"]
        [::std::mem::offset_of!(aeron_rb_descriptor_stct, consumer_heartbeat_pad) - 648usize];
};
pub type aeron_rb_descriptor_t = aeron_rb_descriptor_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_rb_record_descriptor_stct {
    pub length: i32,
    pub msg_type_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_rb_record_descriptor_stct"]
        [::std::mem::size_of::<aeron_rb_record_descriptor_stct>() - 8usize];
    ["Alignment of aeron_rb_record_descriptor_stct"]
        [::std::mem::align_of::<aeron_rb_record_descriptor_stct>() - 4usize];
    ["Offset of field: aeron_rb_record_descriptor_stct::length"]
        [::std::mem::offset_of!(aeron_rb_record_descriptor_stct, length) - 0usize];
    ["Offset of field: aeron_rb_record_descriptor_stct::msg_type_id"]
        [::std::mem::offset_of!(aeron_rb_record_descriptor_stct, msg_type_id) - 4usize];
};
pub type aeron_rb_record_descriptor_t = aeron_rb_record_descriptor_stct;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_rb_write_result_stct {
    AERON_RB_SUCCESS = 0,
    AERON_RB_ERROR = -2,
    AERON_RB_FULL = -1,
}
pub use self::aeron_rb_write_result_stct as aeron_rb_write_result_t;
pub type aeron_rb_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: i32,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_rb_read_action_stct {
    AERON_RB_ABORT = 0,
    AERON_RB_BREAK = 1,
    AERON_RB_COMMIT = 2,
    AERON_RB_CONTINUE = 3,
}
pub use self::aeron_rb_read_action_stct as aeron_rb_read_action_t;
pub type aeron_rb_controlled_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: i32,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_void,
    ) -> aeron_rb_read_action_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_mpsc_rb_stct {
    pub buffer: *mut u8,
    pub descriptor: *mut aeron_rb_descriptor_t,
    pub capacity: usize,
    pub max_message_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_mpsc_rb_stct"][::std::mem::size_of::<aeron_mpsc_rb_stct>() - 32usize];
    ["Alignment of aeron_mpsc_rb_stct"][::std::mem::align_of::<aeron_mpsc_rb_stct>() - 8usize];
    ["Offset of field: aeron_mpsc_rb_stct::buffer"]
        [::std::mem::offset_of!(aeron_mpsc_rb_stct, buffer) - 0usize];
    ["Offset of field: aeron_mpsc_rb_stct::descriptor"]
        [::std::mem::offset_of!(aeron_mpsc_rb_stct, descriptor) - 8usize];
    ["Offset of field: aeron_mpsc_rb_stct::capacity"]
        [::std::mem::offset_of!(aeron_mpsc_rb_stct, capacity) - 16usize];
    ["Offset of field: aeron_mpsc_rb_stct::max_message_length"]
        [::std::mem::offset_of!(aeron_mpsc_rb_stct, max_message_length) - 24usize];
};
pub type aeron_mpsc_rb_t = aeron_mpsc_rb_stct;
unsafe extern "C" {
    pub fn aeron_mpsc_rb_init(
        ring_buffer: *mut aeron_mpsc_rb_t,
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_write(
        ring_buffer: *mut aeron_mpsc_rb_t,
        msg_type_id: i32,
        msg: *const ::std::os::raw::c_void,
        length: usize,
    ) -> aeron_rb_write_result_t;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_try_claim(
        ring_buffer: *mut aeron_mpsc_rb_t,
        msg_type_id: i32,
        length: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_commit(
        ring_buffer: *mut aeron_mpsc_rb_t,
        offset: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_abort(
        ring_buffer: *mut aeron_mpsc_rb_t,
        offset: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_read(
        ring_buffer: *mut aeron_mpsc_rb_t,
        handler: aeron_rb_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        message_count_limit: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_controlled_read(
        ring_buffer: *mut aeron_mpsc_rb_t,
        handler: aeron_rb_controlled_handler_t,
        clientd: *mut ::std::os::raw::c_void,
        message_count_limit: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_next_correlation_id(ring_buffer: *mut aeron_mpsc_rb_t) -> i64;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_consumer_heartbeat_time(ring_buffer: *mut aeron_mpsc_rb_t, now_ms: i64);
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_consumer_heartbeat_time_value(ring_buffer: *mut aeron_mpsc_rb_t) -> i64;
}
unsafe extern "C" {
    pub fn aeron_mpsc_rb_unblock(ring_buffer: *mut aeron_mpsc_rb_t) -> bool;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_broadcast_descriptor_stct {
    pub tail_intent_counter: i64,
    pub tail_counter: i64,
    pub latest_counter: i64,
    pub pad: [u8; 104usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_broadcast_descriptor_stct"]
        [::std::mem::size_of::<aeron_broadcast_descriptor_stct>() - 128usize];
    ["Alignment of aeron_broadcast_descriptor_stct"]
        [::std::mem::align_of::<aeron_broadcast_descriptor_stct>() - 4usize];
    ["Offset of field: aeron_broadcast_descriptor_stct::tail_intent_counter"]
        [::std::mem::offset_of!(aeron_broadcast_descriptor_stct, tail_intent_counter) - 0usize];
    ["Offset of field: aeron_broadcast_descriptor_stct::tail_counter"]
        [::std::mem::offset_of!(aeron_broadcast_descriptor_stct, tail_counter) - 8usize];
    ["Offset of field: aeron_broadcast_descriptor_stct::latest_counter"]
        [::std::mem::offset_of!(aeron_broadcast_descriptor_stct, latest_counter) - 16usize];
    ["Offset of field: aeron_broadcast_descriptor_stct::pad"]
        [::std::mem::offset_of!(aeron_broadcast_descriptor_stct, pad) - 24usize];
};
pub type aeron_broadcast_descriptor_t = aeron_broadcast_descriptor_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_broadcast_record_descriptor_stct {
    pub length: i32,
    pub msg_type_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_broadcast_record_descriptor_stct"]
        [::std::mem::size_of::<aeron_broadcast_record_descriptor_stct>() - 8usize];
    ["Alignment of aeron_broadcast_record_descriptor_stct"]
        [::std::mem::align_of::<aeron_broadcast_record_descriptor_stct>() - 4usize];
    ["Offset of field: aeron_broadcast_record_descriptor_stct::length"]
        [::std::mem::offset_of!(aeron_broadcast_record_descriptor_stct, length) - 0usize];
    ["Offset of field: aeron_broadcast_record_descriptor_stct::msg_type_id"]
        [::std::mem::offset_of!(aeron_broadcast_record_descriptor_stct, msg_type_id) - 4usize];
};
pub type aeron_broadcast_record_descriptor_t = aeron_broadcast_record_descriptor_stct;
pub type aeron_flow_control_strategy_on_idle_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        now_ns: i64,
        snd_lmt: i64,
        snd_pos: i64,
        is_end_of_stream: bool,
    ) -> i64,
>;
pub type aeron_flow_control_strategy_on_sm_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        sm: *const u8,
        length: usize,
        recv_addr: *mut sockaddr_storage,
        snd_lmt: i64,
        initial_term_id: i32,
        position_bits_to_shift: usize,
        now_ns: i64,
    ) -> i64,
>;
pub type aeron_flow_control_strategy_on_setup_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        setup: *const u8,
        length: usize,
        now_ns: i64,
        snd_lmt: i64,
        position_bits_to_shift: usize,
        snd_pos: i64,
    ) -> i64,
>;
pub type aeron_flow_control_strategy_on_trigger_send_setup_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        sm: *const u8,
        length: usize,
        recv_addr: *mut sockaddr_storage,
        now_ns: i64,
    ),
>;
pub type aeron_flow_control_strategy_max_retransmission_length_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        term_offset: usize,
        resend_length: usize,
        term_buffer_length: usize,
        mtu_length: usize,
    ) -> usize,
>;
pub type aeron_flow_control_strategy_fini_func_t = ::std::option::Option<
    unsafe extern "C" fn(strategy: *mut aeron_flow_control_strategy_t) -> ::std::os::raw::c_int,
>;
pub type aeron_flow_control_strategy_has_required_receivers_func_t = ::std::option::Option<
    unsafe extern "C" fn(strategy: *mut aeron_flow_control_strategy_t) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_flow_control_strategy_stct {
    pub on_status_message: aeron_flow_control_strategy_on_sm_func_t,
    pub on_idle: aeron_flow_control_strategy_on_idle_func_t,
    pub on_setup: aeron_flow_control_strategy_on_setup_func_t,
    pub fini: aeron_flow_control_strategy_fini_func_t,
    pub has_required_receivers: aeron_flow_control_strategy_has_required_receivers_func_t,
    pub on_trigger_send_setup: aeron_flow_control_strategy_on_trigger_send_setup_func_t,
    pub max_retransmission_length: aeron_flow_control_strategy_max_retransmission_length_func_t,
    pub state: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_flow_control_strategy_stct"]
        [::std::mem::size_of::<aeron_flow_control_strategy_stct>() - 64usize];
    ["Alignment of aeron_flow_control_strategy_stct"]
        [::std::mem::align_of::<aeron_flow_control_strategy_stct>() - 8usize];
    ["Offset of field: aeron_flow_control_strategy_stct::on_status_message"]
        [::std::mem::offset_of!(aeron_flow_control_strategy_stct, on_status_message) - 0usize];
    ["Offset of field: aeron_flow_control_strategy_stct::on_idle"]
        [::std::mem::offset_of!(aeron_flow_control_strategy_stct, on_idle) - 8usize];
    ["Offset of field: aeron_flow_control_strategy_stct::on_setup"]
        [::std::mem::offset_of!(aeron_flow_control_strategy_stct, on_setup) - 16usize];
    ["Offset of field: aeron_flow_control_strategy_stct::fini"]
        [::std::mem::offset_of!(aeron_flow_control_strategy_stct, fini) - 24usize];
    ["Offset of field: aeron_flow_control_strategy_stct::has_required_receivers"][::std::mem::offset_of!(
        aeron_flow_control_strategy_stct,
        has_required_receivers
    ) - 32usize];
    ["Offset of field: aeron_flow_control_strategy_stct::on_trigger_send_setup"]
        [::std::mem::offset_of!(aeron_flow_control_strategy_stct, on_trigger_send_setup) - 40usize];
    ["Offset of field: aeron_flow_control_strategy_stct::max_retransmission_length"][::std::mem::offset_of!(
        aeron_flow_control_strategy_stct,
        max_retransmission_length
    ) - 48usize];
    ["Offset of field: aeron_flow_control_strategy_stct::state"]
        [::std::mem::offset_of!(aeron_flow_control_strategy_stct, state) - 56usize];
};
unsafe extern "C" {
    pub fn aeron_flow_control_strategy_has_required_receivers_default(
        strategy: *mut aeron_flow_control_strategy_t,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_flow_control_tagged_options_stct {
    pub strategy_name_length: usize,
    pub strategy_name: *const ::std::os::raw::c_char,
    pub group_tag: aeron_flow_control_tagged_options_stct__bindgen_ty_1,
    pub timeout_ns: aeron_flow_control_tagged_options_stct__bindgen_ty_2,
    pub group_min_size: aeron_flow_control_tagged_options_stct__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_flow_control_tagged_options_stct__bindgen_ty_1 {
    pub is_present: bool,
    pub value: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_flow_control_tagged_options_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_flow_control_tagged_options_stct__bindgen_ty_1>() - 16usize];
    ["Alignment of aeron_flow_control_tagged_options_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_flow_control_tagged_options_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct__bindgen_ty_1::is_present"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct__bindgen_ty_1,
        is_present
    )
        - 0usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct__bindgen_ty_1::value"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct__bindgen_ty_1,
        value
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_flow_control_tagged_options_stct__bindgen_ty_2 {
    pub is_present: bool,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_flow_control_tagged_options_stct__bindgen_ty_2"]
        [::std::mem::size_of::<aeron_flow_control_tagged_options_stct__bindgen_ty_2>() - 16usize];
    ["Alignment of aeron_flow_control_tagged_options_stct__bindgen_ty_2"]
        [::std::mem::align_of::<aeron_flow_control_tagged_options_stct__bindgen_ty_2>() - 8usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct__bindgen_ty_2::is_present"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct__bindgen_ty_2,
        is_present
    )
        - 0usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct__bindgen_ty_2::value"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct__bindgen_ty_2,
        value
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_flow_control_tagged_options_stct__bindgen_ty_3 {
    pub is_present: bool,
    pub value: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_flow_control_tagged_options_stct__bindgen_ty_3"]
        [::std::mem::size_of::<aeron_flow_control_tagged_options_stct__bindgen_ty_3>() - 8usize];
    ["Alignment of aeron_flow_control_tagged_options_stct__bindgen_ty_3"]
        [::std::mem::align_of::<aeron_flow_control_tagged_options_stct__bindgen_ty_3>() - 4usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct__bindgen_ty_3::is_present"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct__bindgen_ty_3,
        is_present
    )
        - 0usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct__bindgen_ty_3::value"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct__bindgen_ty_3,
        value
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_flow_control_tagged_options_stct"]
        [::std::mem::size_of::<aeron_flow_control_tagged_options_stct>() - 56usize];
    ["Alignment of aeron_flow_control_tagged_options_stct"]
        [::std::mem::align_of::<aeron_flow_control_tagged_options_stct>() - 8usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct::strategy_name_length"][::std::mem::offset_of!(
        aeron_flow_control_tagged_options_stct,
        strategy_name_length
    ) - 0usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct::strategy_name"]
        [::std::mem::offset_of!(aeron_flow_control_tagged_options_stct, strategy_name) - 8usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct::group_tag"]
        [::std::mem::offset_of!(aeron_flow_control_tagged_options_stct, group_tag) - 16usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct::timeout_ns"]
        [::std::mem::offset_of!(aeron_flow_control_tagged_options_stct, timeout_ns) - 32usize];
    ["Offset of field: aeron_flow_control_tagged_options_stct::group_min_size"]
        [::std::mem::offset_of!(aeron_flow_control_tagged_options_stct, group_min_size) - 48usize];
};
pub type aeron_flow_control_tagged_options_t = aeron_flow_control_tagged_options_stct;
unsafe extern "C" {
    pub fn aeron_flow_control_strategy_supplier_load(
        strategy_name: *const ::std::os::raw::c_char,
    ) -> aeron_flow_control_strategy_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_max_multicast_flow_control_strategy_supplier(
        strategy: *mut *mut aeron_flow_control_strategy_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        channel: *const aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        initial_term_id: i32,
        term_length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_unicast_flow_control_strategy_supplier(
        strategy: *mut *mut aeron_flow_control_strategy_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        channel: *const aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        initial_term_id: i32,
        term_length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_min_flow_control_strategy_supplier(
        strategy: *mut *mut aeron_flow_control_strategy_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        channel: *const aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        initial_term_id: i32,
        term_buffer_capacity: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_tagged_flow_control_strategy_supplier(
        strategy: *mut *mut aeron_flow_control_strategy_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        channel: *const aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        initial_term_id: i32,
        term_buffer_capacity: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_tagged_flow_control_strategy_to_string(
        strategy: *mut aeron_flow_control_strategy_t,
        buffer: *mut ::std::os::raw::c_char,
        buffer_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_default_multicast_flow_control_strategy_supplier(
        strategy: *mut *mut aeron_flow_control_strategy_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        channel: *const aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        initial_term_id: i32,
        term_length: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_flow_control_strategy_supplier_func_table_entry_stct {
    pub name: *const ::std::os::raw::c_char,
    pub supplier_func: aeron_flow_control_strategy_supplier_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_flow_control_strategy_supplier_func_table_entry_stct"][::std::mem::size_of::<
        aeron_flow_control_strategy_supplier_func_table_entry_stct,
    >() - 16usize];
    ["Alignment of aeron_flow_control_strategy_supplier_func_table_entry_stct"][::std::mem::align_of::<
        aeron_flow_control_strategy_supplier_func_table_entry_stct,
    >() - 8usize];
    ["Offset of field: aeron_flow_control_strategy_supplier_func_table_entry_stct::name"][::std::mem::offset_of!(
        aeron_flow_control_strategy_supplier_func_table_entry_stct,
        name
    )
        - 0usize];
    ["Offset of field: aeron_flow_control_strategy_supplier_func_table_entry_stct::supplier_func"] [:: std :: mem :: offset_of ! (aeron_flow_control_strategy_supplier_func_table_entry_stct , supplier_func) - 8usize] ;
};
pub type aeron_flow_control_strategy_supplier_func_table_entry_t =
    aeron_flow_control_strategy_supplier_func_table_entry_stct;
unsafe extern "C" {
    pub fn aeron_flow_control_parse_tagged_options(
        options_length: usize,
        options: *const ::std::os::raw::c_char,
        flow_control_options: *mut aeron_flow_control_tagged_options_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_flow_control_calculate_retransmission_length(
        resend_length: usize,
        term_buffer_length: usize,
        term_offset: usize,
        retransmit_receiver_window_multiple: usize,
    ) -> usize;
}
pub type aeron_congestion_control_strategy_should_measure_rtt_func_t = ::std::option::Option<
    unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, now_ns: i64) -> bool,
>;
pub type aeron_congestion_control_strategy_on_rttm_sent_func_t =
    ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, now_ns: i64)>;
pub type aeron_congestion_control_strategy_on_rttm_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        now_ns: i64,
        rtt_ns: i64,
        source_address: *mut sockaddr_storage,
    ),
>;
pub type aeron_congestion_control_strategy_on_track_rebuild_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        should_force_sm: *mut bool,
        now_ns: i64,
        new_consumption_position: i64,
        last_sm_position: i64,
        hwm_position: i64,
        starting_rebuild_position: i64,
        ending_rebuild_position: i64,
        loss_occurred: bool,
    ) -> i32,
>;
pub type aeron_congestion_control_strategy_initial_window_length_func_t =
    ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void) -> i32>;
pub type aeron_congestion_control_strategy_max_window_length_func_t =
    ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void) -> i32>;
pub type aeron_congestion_control_strategy_fini_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        strategy: *mut aeron_congestion_control_strategy_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_congestion_control_strategy_stct {
    pub should_measure_rtt: aeron_congestion_control_strategy_should_measure_rtt_func_t,
    pub on_rttm_sent: aeron_congestion_control_strategy_on_rttm_sent_func_t,
    pub on_rttm: aeron_congestion_control_strategy_on_rttm_func_t,
    pub on_track_rebuild: aeron_congestion_control_strategy_on_track_rebuild_func_t,
    pub initial_window_length: aeron_congestion_control_strategy_initial_window_length_func_t,
    pub max_window_length: aeron_congestion_control_strategy_max_window_length_func_t,
    pub fini: aeron_congestion_control_strategy_fini_func_t,
    pub state: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_congestion_control_strategy_stct"]
        [::std::mem::size_of::<aeron_congestion_control_strategy_stct>() - 64usize];
    ["Alignment of aeron_congestion_control_strategy_stct"]
        [::std::mem::align_of::<aeron_congestion_control_strategy_stct>() - 8usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::should_measure_rtt"][::std::mem::offset_of!(
        aeron_congestion_control_strategy_stct,
        should_measure_rtt
    ) - 0usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::on_rttm_sent"]
        [::std::mem::offset_of!(aeron_congestion_control_strategy_stct, on_rttm_sent) - 8usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::on_rttm"]
        [::std::mem::offset_of!(aeron_congestion_control_strategy_stct, on_rttm) - 16usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::on_track_rebuild"][::std::mem::offset_of!(
        aeron_congestion_control_strategy_stct,
        on_track_rebuild
    ) - 24usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::initial_window_length"][::std::mem::offset_of!(
        aeron_congestion_control_strategy_stct,
        initial_window_length
    ) - 32usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::max_window_length"][::std::mem::offset_of!(
        aeron_congestion_control_strategy_stct,
        max_window_length
    ) - 40usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::fini"]
        [::std::mem::offset_of!(aeron_congestion_control_strategy_stct, fini) - 48usize];
    ["Offset of field: aeron_congestion_control_strategy_stct::state"]
        [::std::mem::offset_of!(aeron_congestion_control_strategy_stct, state) - 56usize];
};
unsafe extern "C" {
    pub fn aeron_congestion_control_strategy_supplier_load(
        strategy_name: *const ::std::os::raw::c_char,
    ) -> aeron_congestion_control_strategy_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_congestion_control_default_strategy_supplier(
        strategy: *mut *mut aeron_congestion_control_strategy_t,
        channel: *mut aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        term_length: i32,
        sender_mtu_length: i32,
        control_address: *mut sockaddr_storage,
        src_address: *mut sockaddr_storage,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_static_window_congestion_control_strategy_supplier(
        strategy: *mut *mut aeron_congestion_control_strategy_t,
        channel: *mut aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        term_length: i32,
        sender_mtu_length: i32,
        control_address: *mut sockaddr_storage,
        src_address: *mut sockaddr_storage,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_cubic_congestion_control_strategy_supplier(
        strategy: *mut *mut aeron_congestion_control_strategy_t,
        channel: *mut aeron_udp_channel_t,
        stream_id: i32,
        session_id: i32,
        registration_id: i64,
        term_length: i32,
        sender_mtu_length: i32,
        control_address: *mut sockaddr_storage,
        src_address: *mut sockaddr_storage,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_agent_do_work_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type aeron_agent_on_close_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_idle_strategy_stct {
    pub idle: aeron_idle_strategy_func_t,
    pub init: aeron_idle_strategy_init_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_idle_strategy_stct"]
        [::std::mem::size_of::<aeron_idle_strategy_stct>() - 16usize];
    ["Alignment of aeron_idle_strategy_stct"]
        [::std::mem::align_of::<aeron_idle_strategy_stct>() - 8usize];
    ["Offset of field: aeron_idle_strategy_stct::idle"]
        [::std::mem::offset_of!(aeron_idle_strategy_stct, idle) - 0usize];
    ["Offset of field: aeron_idle_strategy_stct::init"]
        [::std::mem::offset_of!(aeron_idle_strategy_stct, init) - 8usize];
};
pub type aeron_idle_strategy_t = aeron_idle_strategy_stct;
unsafe extern "C" {
    pub fn aeron_idle_strategy_sleeping_idle(
        state: *mut ::std::os::raw::c_void,
        work_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn aeron_idle_strategy_yielding_idle(
        state: *mut ::std::os::raw::c_void,
        work_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn aeron_idle_strategy_busy_spinning_idle(
        state: *mut ::std::os::raw::c_void,
        work_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn aeron_idle_strategy_noop_idle(
        state: *mut ::std::os::raw::c_void,
        work_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn aeron_idle_strategy_backoff_idle(
        state: *mut ::std::os::raw::c_void,
        work_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn aeron_idle_strategy_backoff_state_init(
        state: *mut *mut ::std::os::raw::c_void,
        max_spins: u64,
        max_yields: u64,
        min_park_period_ns: u64,
        max_park_period_ns: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_idle_strategy_init_null(
        state: *mut *mut ::std::os::raw::c_void,
        env_var: *const ::std::os::raw::c_char,
        load_args: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_agent_runner_stct {
    pub role_name: *const ::std::os::raw::c_char,
    pub agent_state: *mut ::std::os::raw::c_void,
    pub idle_strategy_state: *mut ::std::os::raw::c_void,
    pub on_start_state: *mut ::std::os::raw::c_void,
    pub on_start: aeron_agent_on_start_func_t,
    pub do_work: aeron_agent_do_work_func_t,
    pub on_close: aeron_agent_on_close_func_t,
    pub idle_strategy: aeron_idle_strategy_func_t,
    pub thread: aeron_thread_t,
    pub running: bool,
    pub state: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_agent_runner_stct"][::std::mem::size_of::<aeron_agent_runner_stct>() - 80usize];
    ["Alignment of aeron_agent_runner_stct"]
        [::std::mem::align_of::<aeron_agent_runner_stct>() - 8usize];
    ["Offset of field: aeron_agent_runner_stct::role_name"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, role_name) - 0usize];
    ["Offset of field: aeron_agent_runner_stct::agent_state"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, agent_state) - 8usize];
    ["Offset of field: aeron_agent_runner_stct::idle_strategy_state"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, idle_strategy_state) - 16usize];
    ["Offset of field: aeron_agent_runner_stct::on_start_state"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, on_start_state) - 24usize];
    ["Offset of field: aeron_agent_runner_stct::on_start"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, on_start) - 32usize];
    ["Offset of field: aeron_agent_runner_stct::do_work"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, do_work) - 40usize];
    ["Offset of field: aeron_agent_runner_stct::on_close"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, on_close) - 48usize];
    ["Offset of field: aeron_agent_runner_stct::idle_strategy"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, idle_strategy) - 56usize];
    ["Offset of field: aeron_agent_runner_stct::thread"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, thread) - 64usize];
    ["Offset of field: aeron_agent_runner_stct::running"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, running) - 72usize];
    ["Offset of field: aeron_agent_runner_stct::state"]
        [::std::mem::offset_of!(aeron_agent_runner_stct, state) - 73usize];
};
pub type aeron_agent_runner_t = aeron_agent_runner_stct;
unsafe extern "C" {
    pub fn aeron_idle_strategy_load(
        idle_strategy_name: *const ::std::os::raw::c_char,
        idle_strategy_state: *mut *mut ::std::os::raw::c_void,
        env_var: *const ::std::os::raw::c_char,
        load_args: *const ::std::os::raw::c_char,
    ) -> aeron_idle_strategy_func_t;
}
unsafe extern "C" {
    pub fn aeron_agent_on_start_load(
        name: *const ::std::os::raw::c_char,
    ) -> aeron_agent_on_start_func_t;
}
unsafe extern "C" {
    pub fn aeron_agent_init(
        runner: *mut aeron_agent_runner_t,
        role_name: *const ::std::os::raw::c_char,
        state: *mut ::std::os::raw::c_void,
        on_start: aeron_agent_on_start_func_t,
        on_start_state: *mut ::std::os::raw::c_void,
        do_work: aeron_agent_do_work_func_t,
        on_close: aeron_agent_on_close_func_t,
        idle_strategy_func: aeron_idle_strategy_func_t,
        idle_strategy_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_agent_start(runner: *mut aeron_agent_runner_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_agent_stop(runner: *mut aeron_agent_runner_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_agent_close(runner: *mut aeron_agent_runner_t) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_stream_position_counter_key_layout_stct {
    pub registration_id: i64,
    pub session_id: i32,
    pub stream_id: i32,
    pub channel_length: i32,
    pub channel: [::std::os::raw::c_char; 92usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_stream_position_counter_key_layout_stct"]
        [::std::mem::size_of::<aeron_stream_position_counter_key_layout_stct>() - 112usize];
    ["Alignment of aeron_stream_position_counter_key_layout_stct"]
        [::std::mem::align_of::<aeron_stream_position_counter_key_layout_stct>() - 4usize];
    ["Offset of field: aeron_stream_position_counter_key_layout_stct::registration_id"][::std::mem::offset_of!(
        aeron_stream_position_counter_key_layout_stct,
        registration_id
    ) - 0usize];
    ["Offset of field: aeron_stream_position_counter_key_layout_stct::session_id"][::std::mem::offset_of!(
        aeron_stream_position_counter_key_layout_stct,
        session_id
    ) - 8usize];
    ["Offset of field: aeron_stream_position_counter_key_layout_stct::stream_id"][::std::mem::offset_of!(
        aeron_stream_position_counter_key_layout_stct,
        stream_id
    ) - 12usize];
    ["Offset of field: aeron_stream_position_counter_key_layout_stct::channel_length"][::std::mem::offset_of!(
        aeron_stream_position_counter_key_layout_stct,
        channel_length
    ) - 16usize];
    ["Offset of field: aeron_stream_position_counter_key_layout_stct::channel"]
        [::std::mem::offset_of!(aeron_stream_position_counter_key_layout_stct, channel) - 20usize];
};
pub type aeron_stream_position_counter_key_layout_t = aeron_stream_position_counter_key_layout_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_channel_endpoint_status_key_layout_stct {
    pub channel_length: i32,
    pub channel: [::std::os::raw::c_char; 108usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_channel_endpoint_status_key_layout_stct"]
        [::std::mem::size_of::<aeron_channel_endpoint_status_key_layout_stct>() - 112usize];
    ["Alignment of aeron_channel_endpoint_status_key_layout_stct"]
        [::std::mem::align_of::<aeron_channel_endpoint_status_key_layout_stct>() - 4usize];
    ["Offset of field: aeron_channel_endpoint_status_key_layout_stct::channel_length"][::std::mem::offset_of!(
        aeron_channel_endpoint_status_key_layout_stct,
        channel_length
    ) - 0usize];
    ["Offset of field: aeron_channel_endpoint_status_key_layout_stct::channel"]
        [::std::mem::offset_of!(aeron_channel_endpoint_status_key_layout_stct, channel) - 4usize];
};
pub type aeron_channel_endpoint_status_key_layout_t = aeron_channel_endpoint_status_key_layout_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_heartbeat_timestamp_key_layout_stct {
    pub registration_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_heartbeat_timestamp_key_layout_stct"]
        [::std::mem::size_of::<aeron_heartbeat_timestamp_key_layout_stct>() - 8usize];
    ["Alignment of aeron_heartbeat_timestamp_key_layout_stct"]
        [::std::mem::align_of::<aeron_heartbeat_timestamp_key_layout_stct>() - 4usize];
    ["Offset of field: aeron_heartbeat_timestamp_key_layout_stct::registration_id"][::std::mem::offset_of!(
        aeron_heartbeat_timestamp_key_layout_stct,
        registration_id
    ) - 0usize];
};
pub type aeron_heartbeat_timestamp_key_layout_t = aeron_heartbeat_timestamp_key_layout_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_local_sockaddr_key_layout_stct {
    pub channel_status_id: i32,
    pub local_sockaddr_len: i32,
    pub local_sockaddr: [::std::os::raw::c_char; 104usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_local_sockaddr_key_layout_stct"]
        [::std::mem::size_of::<aeron_local_sockaddr_key_layout_stct>() - 112usize];
    ["Alignment of aeron_local_sockaddr_key_layout_stct"]
        [::std::mem::align_of::<aeron_local_sockaddr_key_layout_stct>() - 4usize];
    ["Offset of field: aeron_local_sockaddr_key_layout_stct::channel_status_id"]
        [::std::mem::offset_of!(aeron_local_sockaddr_key_layout_stct, channel_status_id) - 0usize];
    ["Offset of field: aeron_local_sockaddr_key_layout_stct::local_sockaddr_len"]
        [::std::mem::offset_of!(aeron_local_sockaddr_key_layout_stct, local_sockaddr_len) - 4usize];
    ["Offset of field: aeron_local_sockaddr_key_layout_stct::local_sockaddr"]
        [::std::mem::offset_of!(aeron_local_sockaddr_key_layout_stct, local_sockaddr) - 8usize];
};
pub type aeron_local_sockaddr_key_layout_t = aeron_local_sockaddr_key_layout_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counters_manager_stct {
    pub values: *mut u8,
    pub metadata: *mut u8,
    pub values_length: usize,
    pub metadata_length: usize,
    pub max_counter_id: i32,
    pub id_high_water_mark: i32,
    pub free_list: *mut i32,
    pub free_list_index: i32,
    pub free_list_length: usize,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub free_to_reuse_timeout_ms: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counters_manager_stct"]
        [::std::mem::size_of::<aeron_counters_manager_stct>() - 80usize];
    ["Alignment of aeron_counters_manager_stct"]
        [::std::mem::align_of::<aeron_counters_manager_stct>() - 8usize];
    ["Offset of field: aeron_counters_manager_stct::values"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, values) - 0usize];
    ["Offset of field: aeron_counters_manager_stct::metadata"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, metadata) - 8usize];
    ["Offset of field: aeron_counters_manager_stct::values_length"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, values_length) - 16usize];
    ["Offset of field: aeron_counters_manager_stct::metadata_length"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, metadata_length) - 24usize];
    ["Offset of field: aeron_counters_manager_stct::max_counter_id"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, max_counter_id) - 32usize];
    ["Offset of field: aeron_counters_manager_stct::id_high_water_mark"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, id_high_water_mark) - 36usize];
    ["Offset of field: aeron_counters_manager_stct::free_list"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, free_list) - 40usize];
    ["Offset of field: aeron_counters_manager_stct::free_list_index"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, free_list_index) - 48usize];
    ["Offset of field: aeron_counters_manager_stct::free_list_length"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, free_list_length) - 56usize];
    ["Offset of field: aeron_counters_manager_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, cached_clock) - 64usize];
    ["Offset of field: aeron_counters_manager_stct::free_to_reuse_timeout_ms"]
        [::std::mem::offset_of!(aeron_counters_manager_stct, free_to_reuse_timeout_ms) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counters_reader_stct {
    pub values: *mut u8,
    pub metadata: *mut u8,
    pub values_length: usize,
    pub metadata_length: usize,
    pub max_counter_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counters_reader_stct"]
        [::std::mem::size_of::<aeron_counters_reader_stct>() - 40usize];
    ["Alignment of aeron_counters_reader_stct"]
        [::std::mem::align_of::<aeron_counters_reader_stct>() - 8usize];
    ["Offset of field: aeron_counters_reader_stct::values"]
        [::std::mem::offset_of!(aeron_counters_reader_stct, values) - 0usize];
    ["Offset of field: aeron_counters_reader_stct::metadata"]
        [::std::mem::offset_of!(aeron_counters_reader_stct, metadata) - 8usize];
    ["Offset of field: aeron_counters_reader_stct::values_length"]
        [::std::mem::offset_of!(aeron_counters_reader_stct, values_length) - 16usize];
    ["Offset of field: aeron_counters_reader_stct::metadata_length"]
        [::std::mem::offset_of!(aeron_counters_reader_stct, metadata_length) - 24usize];
    ["Offset of field: aeron_counters_reader_stct::max_counter_id"]
        [::std::mem::offset_of!(aeron_counters_reader_stct, max_counter_id) - 32usize];
};
unsafe extern "C" {
    pub fn aeron_counters_manager_init(
        manager: *mut aeron_counters_manager_t,
        metadata_buffer: *mut u8,
        metadata_length: usize,
        values_buffer: *mut u8,
        values_length: usize,
        cached_clock: *mut aeron_clock_cache_t,
        free_to_reuse_timeout_ms: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_counters_manager_close(manager: *mut aeron_counters_manager_t);
}
unsafe extern "C" {
    pub fn aeron_counters_manager_allocate(
        manager: *mut aeron_counters_manager_t,
        type_id: i32,
        key: *const u8,
        key_length: usize,
        label: *const ::std::os::raw::c_char,
        label_length: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn aeron_counters_manager_counter_registration_id(
        manager: *mut aeron_counters_manager_t,
        counter_id: i32,
        registration_id: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_counters_manager_counter_owner_id(
        manager: *mut aeron_counters_manager_t,
        counter_id: i32,
        owner_id: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_counters_manager_counter_reference_id(
        manager: *mut aeron_counters_manager_t,
        counter_id: i32,
        reference_id: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_counters_manager_update_label(
        manager: *mut aeron_counters_manager_t,
        counter_id: i32,
        label_length: usize,
        label: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn aeron_counters_manager_append_to_label(
        manager: *mut aeron_counters_manager_t,
        counter_id: i32,
        length: usize,
        value: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn aeron_counters_manager_next_counter_id(manager: *mut aeron_counters_manager_t) -> i32;
}
unsafe extern "C" {
    pub fn aeron_counters_manager_free(
        manager: *mut aeron_counters_manager_t,
        counter_id: i32,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_counters_reader_foreach_metadata_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: i32,
        type_id: i32,
        key: *const u8,
        key_length: usize,
        label: *const u8,
        label_length: usize,
        clientd: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn aeron_counters_reader_foreach_metadata(
        metadata_buffer: *mut u8,
        metadata_length: usize,
        func: aeron_counters_reader_foreach_metadata_func_t,
        clientd: *mut ::std::os::raw::c_void,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_system_counter_enum_stct {
    AERON_SYSTEM_COUNTER_BYTES_SENT = 0,
    AERON_SYSTEM_COUNTER_BYTES_RECEIVED = 1,
    AERON_SYSTEM_COUNTER_RECEIVER_PROXY_FAILS = 2,
    AERON_SYSTEM_COUNTER_SENDER_PROXY_FAILS = 3,
    AERON_SYSTEM_COUNTER_CONDUCTOR_PROXY_FAILS = 4,
    AERON_SYSTEM_COUNTER_NAK_MESSAGES_SENT = 5,
    AERON_SYSTEM_COUNTER_NAK_MESSAGES_RECEIVED = 6,
    AERON_SYSTEM_COUNTER_STATUS_MESSAGES_SENT = 7,
    AERON_SYSTEM_COUNTER_STATUS_MESSAGES_RECEIVED = 8,
    AERON_SYSTEM_COUNTER_HEARTBEATS_SENT = 9,
    AERON_SYSTEM_COUNTER_HEARTBEATS_RECEIVED = 10,
    AERON_SYSTEM_COUNTER_RETRANSMITS_SENT = 11,
    AERON_SYSTEM_COUNTER_FLOW_CONTROL_UNDER_RUNS = 12,
    AERON_SYSTEM_COUNTER_FLOW_CONTROL_OVER_RUNS = 13,
    AERON_SYSTEM_COUNTER_INVALID_PACKETS = 14,
    AERON_SYSTEM_COUNTER_ERRORS = 15,
    AERON_SYSTEM_COUNTER_SHORT_SENDS = 16,
    AERON_SYSTEM_COUNTER_FREE_FAILS = 17,
    AERON_SYSTEM_COUNTER_SENDER_FLOW_CONTROL_LIMITS = 18,
    AERON_SYSTEM_COUNTER_UNBLOCKED_PUBLICATIONS = 19,
    AERON_SYSTEM_COUNTER_UNBLOCKED_COMMANDS = 20,
    AERON_SYSTEM_COUNTER_POSSIBLE_TTL_ASYMMETRY = 21,
    AERON_SYSTEM_COUNTER_CONTROLLABLE_IDLE_STRATEGY = 22,
    AERON_SYSTEM_COUNTER_LOSS_GAP_FILLS = 23,
    AERON_SYSTEM_COUNTER_CLIENT_TIMEOUTS = 24,
    AERON_SYSTEM_COUNTER_RESOLUTION_CHANGES = 25,
    AERON_SYSTEM_COUNTER_CONDUCTOR_MAX_CYCLE_TIME = 26,
    AERON_SYSTEM_COUNTER_CONDUCTOR_CYCLE_TIME_THRESHOLD_EXCEEDED = 27,
    AERON_SYSTEM_COUNTER_SENDER_MAX_CYCLE_TIME = 28,
    AERON_SYSTEM_COUNTER_SENDER_CYCLE_TIME_THRESHOLD_EXCEEDED = 29,
    AERON_SYSTEM_COUNTER_RECEIVER_MAX_CYCLE_TIME = 30,
    AERON_SYSTEM_COUNTER_RECEIVER_CYCLE_TIME_THRESHOLD_EXCEEDED = 31,
    AERON_SYSTEM_COUNTER_NAME_RESOLVER_MAX_TIME = 32,
    AERON_SYSTEM_COUNTER_NAME_RESOLVER_TIME_THRESHOLD_EXCEEDED = 33,
    AERON_SYSTEM_COUNTER_AERON_VERSION = 34,
    AERON_SYSTEM_COUNTER_BYTES_CURRENTLY_MAPPED = 35,
    AERON_SYSTEM_COUNTER_RETRANSMITTED_BYTES = 36,
    AERON_SYSTEM_COUNTER_RETRANSMIT_OVERFLOW = 37,
    AERON_SYSTEM_COUNTER_DUMMY_LAST = 38,
}
pub use self::aeron_system_counter_enum_stct as aeron_system_counter_enum_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_system_counter_stct {
    pub label: *const ::std::os::raw::c_char,
    pub id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_system_counter_stct"]
        [::std::mem::size_of::<aeron_system_counter_stct>() - 16usize];
    ["Alignment of aeron_system_counter_stct"]
        [::std::mem::align_of::<aeron_system_counter_stct>() - 8usize];
    ["Offset of field: aeron_system_counter_stct::label"]
        [::std::mem::offset_of!(aeron_system_counter_stct, label) - 0usize];
    ["Offset of field: aeron_system_counter_stct::id"]
        [::std::mem::offset_of!(aeron_system_counter_stct, id) - 8usize];
};
pub type aeron_system_counter_t = aeron_system_counter_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_system_counters_stct {
    pub counter_ids: *mut i32,
    pub manager: *mut aeron_counters_manager_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_system_counters_stct"]
        [::std::mem::size_of::<aeron_system_counters_stct>() - 16usize];
    ["Alignment of aeron_system_counters_stct"]
        [::std::mem::align_of::<aeron_system_counters_stct>() - 8usize];
    ["Offset of field: aeron_system_counters_stct::counter_ids"]
        [::std::mem::offset_of!(aeron_system_counters_stct, counter_ids) - 0usize];
    ["Offset of field: aeron_system_counters_stct::manager"]
        [::std::mem::offset_of!(aeron_system_counters_stct, manager) - 8usize];
};
pub type aeron_system_counters_t = aeron_system_counters_stct;
unsafe extern "C" {
    pub fn aeron_system_counters_init(
        counters: *mut aeron_system_counters_t,
        manager: *mut aeron_counters_manager_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_system_counters_close(counters: *mut aeron_system_counters_t);
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_cnc_metadata_stct {
    pub cnc_version: i32,
    pub to_driver_buffer_length: i32,
    pub to_clients_buffer_length: i32,
    pub counter_metadata_buffer_length: i32,
    pub counter_values_buffer_length: i32,
    pub error_log_buffer_length: i32,
    pub client_liveness_timeout: i64,
    pub start_timestamp: i64,
    pub pid: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_cnc_metadata_stct"][::std::mem::size_of::<aeron_cnc_metadata_stct>() - 48usize];
    ["Alignment of aeron_cnc_metadata_stct"]
        [::std::mem::align_of::<aeron_cnc_metadata_stct>() - 4usize];
    ["Offset of field: aeron_cnc_metadata_stct::cnc_version"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, cnc_version) - 0usize];
    ["Offset of field: aeron_cnc_metadata_stct::to_driver_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, to_driver_buffer_length) - 4usize];
    ["Offset of field: aeron_cnc_metadata_stct::to_clients_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, to_clients_buffer_length) - 8usize];
    ["Offset of field: aeron_cnc_metadata_stct::counter_metadata_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, counter_metadata_buffer_length) - 12usize];
    ["Offset of field: aeron_cnc_metadata_stct::counter_values_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, counter_values_buffer_length) - 16usize];
    ["Offset of field: aeron_cnc_metadata_stct::error_log_buffer_length"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, error_log_buffer_length) - 20usize];
    ["Offset of field: aeron_cnc_metadata_stct::client_liveness_timeout"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, client_liveness_timeout) - 24usize];
    ["Offset of field: aeron_cnc_metadata_stct::start_timestamp"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, start_timestamp) - 32usize];
    ["Offset of field: aeron_cnc_metadata_stct::pid"]
        [::std::mem::offset_of!(aeron_cnc_metadata_stct, pid) - 40usize];
};
pub type aeron_cnc_metadata_t = aeron_cnc_metadata_stct;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_cnc_load_result_stct {
    AERON_CNC_LOAD_FAILED = -1,
    AERON_CNC_LOAD_SUCCESS = 0,
    AERON_CNC_LOAD_AWAIT_FILE = 1,
    AERON_CNC_LOAD_AWAIT_MMAP = 2,
    AERON_CNC_LOAD_AWAIT_VERSION = 3,
    AERON_CNC_LOAD_AWAIT_CNC_DATA = 4,
}
pub use self::aeron_cnc_load_result_stct as aeron_cnc_load_result_t;
unsafe extern "C" {
    pub fn aeron_cnc_version_volatile(metadata: *mut aeron_cnc_metadata_t) -> i32;
}
unsafe extern "C" {
    pub fn aeron_cnc_map_file_and_load_metadata(
        dir: *const ::std::os::raw::c_char,
        mapped_file: *mut aeron_mapped_file_t,
        metadata: *mut *mut aeron_cnc_metadata_t,
    ) -> aeron_cnc_load_result_t;
}
unsafe extern "C" {
    pub fn aeron_cnc_resolve_filename(
        directory: *const ::std::os::raw::c_char,
        filename_buffer: *mut ::std::os::raw::c_char,
        filename_buffer_length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_duty_cycle_tracker_update_func_t =
    ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, now_ns: i64)>;
pub type aeron_duty_cycle_tracker_measure_and_update_func_t =
    ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, now_ns: i64)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_duty_cycle_tracker_stct {
    pub update: aeron_duty_cycle_tracker_update_func_t,
    pub measure_and_update: aeron_duty_cycle_tracker_measure_and_update_func_t,
    pub state: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_duty_cycle_tracker_stct"]
        [::std::mem::size_of::<aeron_duty_cycle_tracker_stct>() - 24usize];
    ["Alignment of aeron_duty_cycle_tracker_stct"]
        [::std::mem::align_of::<aeron_duty_cycle_tracker_stct>() - 8usize];
    ["Offset of field: aeron_duty_cycle_tracker_stct::update"]
        [::std::mem::offset_of!(aeron_duty_cycle_tracker_stct, update) - 0usize];
    ["Offset of field: aeron_duty_cycle_tracker_stct::measure_and_update"]
        [::std::mem::offset_of!(aeron_duty_cycle_tracker_stct, measure_and_update) - 8usize];
    ["Offset of field: aeron_duty_cycle_tracker_stct::state"]
        [::std::mem::offset_of!(aeron_duty_cycle_tracker_stct, state) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_duty_cycle_stall_tracker_stct {
    pub tracker: aeron_duty_cycle_tracker_stct,
    pub lhs_padding: [::std::os::raw::c_char; 56usize],
    pub last_time_of_update_ns: i64,
    pub rhs_padding: [::std::os::raw::c_char; 56usize],
    pub cycle_threshold_ns: u64,
    pub max_cycle_time_counter: *mut i64,
    pub cycle_time_threshold_exceeded_counter: *mut i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_duty_cycle_stall_tracker_stct"]
        [::std::mem::size_of::<aeron_duty_cycle_stall_tracker_stct>() - 168usize];
    ["Alignment of aeron_duty_cycle_stall_tracker_stct"]
        [::std::mem::align_of::<aeron_duty_cycle_stall_tracker_stct>() - 8usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::tracker"]
        [::std::mem::offset_of!(aeron_duty_cycle_stall_tracker_stct, tracker) - 0usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::lhs_padding"]
        [::std::mem::offset_of!(aeron_duty_cycle_stall_tracker_stct, lhs_padding) - 24usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::last_time_of_update_ns"][::std::mem::offset_of!(
        aeron_duty_cycle_stall_tracker_stct,
        last_time_of_update_ns
    ) - 80usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::rhs_padding"]
        [::std::mem::offset_of!(aeron_duty_cycle_stall_tracker_stct, rhs_padding) - 88usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::cycle_threshold_ns"][::std::mem::offset_of!(
        aeron_duty_cycle_stall_tracker_stct,
        cycle_threshold_ns
    ) - 144usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::max_cycle_time_counter"][::std::mem::offset_of!(
        aeron_duty_cycle_stall_tracker_stct,
        max_cycle_time_counter
    ) - 152usize];
    ["Offset of field: aeron_duty_cycle_stall_tracker_stct::cycle_time_threshold_exceeded_counter"] [:: std :: mem :: offset_of ! (aeron_duty_cycle_stall_tracker_stct , cycle_time_threshold_exceeded_counter) - 160usize] ;
};
pub type aeron_duty_cycle_stall_tracker_t = aeron_duty_cycle_stall_tracker_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_per_thread_error_stct {
    pub errcode: ::std::os::raw::c_int,
    pub offset: usize,
    pub errmsg: [::std::os::raw::c_char; 8192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_per_thread_error_stct"]
        [::std::mem::size_of::<aeron_per_thread_error_stct>() - 8208usize];
    ["Alignment of aeron_per_thread_error_stct"]
        [::std::mem::align_of::<aeron_per_thread_error_stct>() - 8usize];
    ["Offset of field: aeron_per_thread_error_stct::errcode"]
        [::std::mem::offset_of!(aeron_per_thread_error_stct, errcode) - 0usize];
    ["Offset of field: aeron_per_thread_error_stct::offset"]
        [::std::mem::offset_of!(aeron_per_thread_error_stct, offset) - 8usize];
    ["Offset of field: aeron_per_thread_error_stct::errmsg"]
        [::std::mem::offset_of!(aeron_per_thread_error_stct, errmsg) - 16usize];
};
pub type aeron_per_thread_error_t = aeron_per_thread_error_stct;
unsafe extern "C" {
    pub fn aeron_set_errno(errcode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn aeron_error_code_str(errcode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_err_set(
        errcode: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        line_number: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn aeron_err_append(
        function: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        line_number: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn aeron_err_clear();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_int64_counter_map_stct {
    pub entries: *mut i64,
    pub load_factor: f32,
    pub entries_length: usize,
    pub size: usize,
    pub resize_threshold: usize,
    pub initial_value: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_int64_counter_map_stct"]
        [::std::mem::size_of::<aeron_int64_counter_map_stct>() - 48usize];
    ["Alignment of aeron_int64_counter_map_stct"]
        [::std::mem::align_of::<aeron_int64_counter_map_stct>() - 8usize];
    ["Offset of field: aeron_int64_counter_map_stct::entries"]
        [::std::mem::offset_of!(aeron_int64_counter_map_stct, entries) - 0usize];
    ["Offset of field: aeron_int64_counter_map_stct::load_factor"]
        [::std::mem::offset_of!(aeron_int64_counter_map_stct, load_factor) - 8usize];
    ["Offset of field: aeron_int64_counter_map_stct::entries_length"]
        [::std::mem::offset_of!(aeron_int64_counter_map_stct, entries_length) - 16usize];
    ["Offset of field: aeron_int64_counter_map_stct::size"]
        [::std::mem::offset_of!(aeron_int64_counter_map_stct, size) - 24usize];
    ["Offset of field: aeron_int64_counter_map_stct::resize_threshold"]
        [::std::mem::offset_of!(aeron_int64_counter_map_stct, resize_threshold) - 32usize];
    ["Offset of field: aeron_int64_counter_map_stct::initial_value"]
        [::std::mem::offset_of!(aeron_int64_counter_map_stct, initial_value) - 40usize];
};
pub type aeron_int64_counter_map_t = aeron_int64_counter_map_stct;
pub type aeron_int64_counter_map_for_each_func_t = ::std::option::Option<
    unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void, key: i64, value: i64),
>;
pub type aeron_int64_counter_map_predicate_func_t = ::std::option::Option<
    unsafe extern "C" fn(clientd: *mut ::std::os::raw::c_void, key: i64, value: i64) -> bool,
>;
pub type aeron_port_manager_get_managed_port_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        bind_addr_out: *mut sockaddr_storage,
        udp_channel: *mut aeron_udp_channel_t,
        bind_addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_port_manager_free_managed_port_func_t = ::std::option::Option<
    unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, bind_addr: *mut sockaddr_storage),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_port_manager_stct {
    pub get_managed_port: aeron_port_manager_get_managed_port_func_t,
    pub free_managed_port: aeron_port_manager_free_managed_port_func_t,
    pub state: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_port_manager_stct"][::std::mem::size_of::<aeron_port_manager_stct>() - 24usize];
    ["Alignment of aeron_port_manager_stct"]
        [::std::mem::align_of::<aeron_port_manager_stct>() - 8usize];
    ["Offset of field: aeron_port_manager_stct::get_managed_port"]
        [::std::mem::offset_of!(aeron_port_manager_stct, get_managed_port) - 0usize];
    ["Offset of field: aeron_port_manager_stct::free_managed_port"]
        [::std::mem::offset_of!(aeron_port_manager_stct, free_managed_port) - 8usize];
    ["Offset of field: aeron_port_manager_stct::state"]
        [::std::mem::offset_of!(aeron_port_manager_stct, state) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_wildcard_port_manager_stct {
    pub port_manager: aeron_port_manager_t,
    pub port_table: aeron_int64_counter_map_t,
    pub low_port: u16,
    pub high_port: u16,
    pub next_port: u16,
    pub is_sender: bool,
    pub is_os_wildcard: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_wildcard_port_manager_stct"]
        [::std::mem::size_of::<aeron_wildcard_port_manager_stct>() - 80usize];
    ["Alignment of aeron_wildcard_port_manager_stct"]
        [::std::mem::align_of::<aeron_wildcard_port_manager_stct>() - 8usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::port_manager"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, port_manager) - 0usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::port_table"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, port_table) - 24usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::low_port"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, low_port) - 72usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::high_port"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, high_port) - 74usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::next_port"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, next_port) - 76usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::is_sender"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, is_sender) - 78usize];
    ["Offset of field: aeron_wildcard_port_manager_stct::is_os_wildcard"]
        [::std::mem::offset_of!(aeron_wildcard_port_manager_stct, is_os_wildcard) - 79usize];
};
pub type aeron_wildcard_port_manager_t = aeron_wildcard_port_manager_stct;
unsafe extern "C" {
    pub fn aeron_wildcard_port_manager_get_managed_port(
        state: *mut ::std::os::raw::c_void,
        bind_addr_out: *mut sockaddr_storage,
        udp_channel: *mut aeron_udp_channel_t,
        bind_addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_wildcard_port_manager_free_managed_port(
        state: *mut ::std::os::raw::c_void,
        bind_addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_wildcard_port_manager_init(
        port_manager: *mut aeron_wildcard_port_manager_t,
        is_sender: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_wildcard_port_manager_set_range(
        port_manager: *mut aeron_wildcard_port_manager_t,
        low_port: u16,
        high_port: u16,
    );
}
unsafe extern "C" {
    pub fn aeron_wildcard_port_manager_delete(port_manager: *mut aeron_wildcard_port_manager_t);
}
unsafe extern "C" {
    pub fn aeron_parse_port_range(
        range_str: *const ::std::os::raw::c_char,
        low_port: *mut u16,
        high_port: *mut u16,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_driver_conductor_proxy_t = aeron_driver_conductor_proxy_stct;
pub type aeron_driver_sender_proxy_t = aeron_driver_sender_proxy_stct;
pub type aeron_driver_receiver_proxy_t = aeron_driver_receiver_proxy_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_dl_loaded_libs_state_stct {
    _unused: [u8; 0],
}
pub type aeron_dl_loaded_libs_state_t = aeron_dl_loaded_libs_state_stct;
pub type aeron_driver_conductor_to_driver_interceptor_func_t = aeron_rb_handler_t;
pub type aeron_driver_conductor_to_client_interceptor_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        conductor: *mut aeron_driver_conductor_t,
        msg_type_id: i32,
        message: *const ::std::os::raw::c_void,
        length: usize,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_context_bindings_clientd_entry_stct {
    pub name: *const ::std::os::raw::c_char,
    pub clientd: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_context_bindings_clientd_entry_stct"]
        [::std::mem::size_of::<aeron_driver_context_bindings_clientd_entry_stct>() - 16usize];
    ["Alignment of aeron_driver_context_bindings_clientd_entry_stct"]
        [::std::mem::align_of::<aeron_driver_context_bindings_clientd_entry_stct>() - 8usize];
    ["Offset of field: aeron_driver_context_bindings_clientd_entry_stct::name"]
        [::std::mem::offset_of!(aeron_driver_context_bindings_clientd_entry_stct, name) - 0usize];
    ["Offset of field: aeron_driver_context_bindings_clientd_entry_stct::clientd"][::std::mem::offset_of!(
        aeron_driver_context_bindings_clientd_entry_stct,
        clientd
    ) - 8usize];
};
pub type aeron_driver_context_bindings_clientd_entry_t =
    aeron_driver_context_bindings_clientd_entry_stct;
pub type aeron_driver_name_resolver_on_neighbor_change_func_t =
    ::std::option::Option<unsafe extern "C" fn(addr: *const sockaddr_storage)>;
pub type aeron_driver_flow_control_strategy_on_receiver_change_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        receiver_id: i64,
        session_id: i32,
        stream_id: i32,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
        receiver_count: usize,
    ),
>;
pub type aeron_driver_send_nak_message_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        address: *const sockaddr_storage,
        session_id: i32,
        stream_id: i32,
        term_id: i32,
        term_offset: i32,
        nak_length: i32,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
    ),
>;
pub type aeron_driver_resend_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        session_id: i32,
        stream_id: i32,
        term_id: i32,
        term_offset: i32,
        resend_length: i32,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
    ),
>;
pub type aeron_driver_name_resolver_on_resolve_t = ::std::option::Option<
    unsafe extern "C" fn(
        name_resolver: *mut aeron_name_resolver_t,
        duration_ns: i64,
        hostname: *const ::std::os::raw::c_char,
        is_re_resolution: bool,
        address: *mut sockaddr_storage,
    ),
>;
pub type aeron_driver_name_resolver_on_lookup_t = ::std::option::Option<
    unsafe extern "C" fn(
        name_resolver: *mut aeron_name_resolver_t,
        duration_ns: i64,
        name: *const ::std::os::raw::c_char,
        is_re_lookup: bool,
        resolved_name: *const ::std::os::raw::c_char,
    ),
>;
pub type aeron_driver_name_resolver_on_host_name_t = ::std::option::Option<
    unsafe extern "C" fn(duration_ns: i64, host_name: *const ::std::os::raw::c_char),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_context_stct {
    pub aeron_dir: *mut ::std::os::raw::c_char,
    pub threading_mode: aeron_threading_mode_t,
    pub receiver_group_consideration: aeron_inferable_boolean_t,
    pub dirs_delete_on_start: bool,
    pub dirs_delete_on_shutdown: bool,
    pub warn_if_dirs_exist: bool,
    pub term_buffer_sparse_file: bool,
    pub perform_storage_checks: bool,
    pub spies_simulate_connection: bool,
    pub print_configuration_on_start: bool,
    pub reliable_stream: bool,
    pub tether_subscriptions: bool,
    pub rejoin_stream: bool,
    pub ats_enabled: bool,
    pub connect_enabled: bool,
    pub driver_timeout_ms: u64,
    pub client_liveness_timeout_ns: u64,
    pub publication_linger_timeout_ns: u64,
    pub status_message_timeout_ns: u64,
    pub image_liveness_timeout_ns: u64,
    pub publication_unblock_timeout_ns: u64,
    pub publication_connection_timeout_ns: u64,
    pub timer_interval_ns: u64,
    pub counter_free_to_reuse_ns: u64,
    pub untethered_window_limit_timeout_ns: u64,
    pub untethered_resting_timeout_ns: u64,
    pub retransmit_unicast_delay_ns: u64,
    pub retransmit_unicast_linger_ns: u64,
    pub nak_unicast_delay_ns: u64,
    pub nak_unicast_retry_delay_ratio: u64,
    pub nak_multicast_max_backoff_ns: u64,
    pub re_resolution_check_interval_ns: u64,
    pub low_file_store_warning_threshold: u64,
    pub to_driver_buffer_length: usize,
    pub to_clients_buffer_length: usize,
    pub counters_values_buffer_length: usize,
    pub error_buffer_length: usize,
    pub term_buffer_length: usize,
    pub ipc_term_buffer_length: usize,
    pub mtu_length: usize,
    pub ipc_mtu_length: usize,
    pub ipc_publication_window_length: usize,
    pub publication_window_length: usize,
    pub socket_rcvbuf: usize,
    pub socket_sndbuf: usize,
    pub send_to_sm_poll_ratio: usize,
    pub initial_window_length: usize,
    pub loss_report_length: usize,
    pub file_page_size: usize,
    pub nak_multicast_group_size: usize,
    pub publication_reserved_session_id_low: i32,
    pub publication_reserved_session_id_high: i32,
    pub multicast_ttl: u8,
    pub receiver_io_vector_capacity: u32,
    pub sender_io_vector_capacity: u32,
    pub network_publication_max_messages_per_send: u32,
    pub resource_free_limit: u32,
    pub async_executor_threads: u32,
    pub max_resend: u32,
    pub conductor_cpu_affinity_no: i32,
    pub receiver_cpu_affinity_no: i32,
    pub sender_cpu_affinity_no: i32,
    pub stream_session_limit: i32,
    pub enable_experimental_features: bool,
    pub receiver_group_tag: aeron_driver_context_stct__bindgen_ty_1,
    pub flow_control: aeron_driver_context_stct__bindgen_ty_2,
    pub cnc_map: aeron_mapped_file_t,
    pub loss_report: aeron_mapped_file_t,
    pub to_driver_buffer: *mut u8,
    pub to_clients_buffer: *mut u8,
    pub counters_values_buffer: *mut u8,
    pub counters_metadata_buffer: *mut u8,
    pub error_buffer: *mut u8,
    pub nano_clock: aeron_clock_func_t,
    pub epoch_clock: aeron_clock_func_t,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub sender_cached_clock: *mut aeron_clock_cache_t,
    pub receiver_cached_clock: *mut aeron_clock_cache_t,
    pub sender_command_queue: aeron_mpsc_rb_t,
    pub receiver_command_queue: aeron_mpsc_rb_t,
    pub conductor_command_queue: aeron_mpsc_rb_t,
    pub agent_on_start_func: aeron_agent_on_start_func_t,
    pub agent_on_start_state: *mut ::std::os::raw::c_void,
    pub conductor_idle_strategy_func: aeron_idle_strategy_func_t,
    pub conductor_idle_strategy_state: *mut ::std::os::raw::c_void,
    pub conductor_idle_strategy_init_args: *mut ::std::os::raw::c_char,
    pub conductor_idle_strategy_name: *const ::std::os::raw::c_char,
    pub shared_idle_strategy_func: aeron_idle_strategy_func_t,
    pub shared_idle_strategy_state: *mut ::std::os::raw::c_void,
    pub shared_idle_strategy_init_args: *mut ::std::os::raw::c_char,
    pub shared_idle_strategy_name: *const ::std::os::raw::c_char,
    pub shared_network_idle_strategy_func: aeron_idle_strategy_func_t,
    pub shared_network_idle_strategy_state: *mut ::std::os::raw::c_void,
    pub shared_network_idle_strategy_init_args: *mut ::std::os::raw::c_char,
    pub shared_network_idle_strategy_name: *const ::std::os::raw::c_char,
    pub sender_idle_strategy_func: aeron_idle_strategy_func_t,
    pub sender_idle_strategy_state: *mut ::std::os::raw::c_void,
    pub sender_idle_strategy_init_args: *mut ::std::os::raw::c_char,
    pub sender_idle_strategy_name: *const ::std::os::raw::c_char,
    pub receiver_idle_strategy_func: aeron_idle_strategy_func_t,
    pub receiver_idle_strategy_state: *mut ::std::os::raw::c_void,
    pub receiver_idle_strategy_init_args: *mut ::std::os::raw::c_char,
    pub receiver_idle_strategy_name: *const ::std::os::raw::c_char,
    pub usable_fs_space_func: aeron_usable_fs_space_func_t,
    pub raw_log_map_func: aeron_raw_log_map_func_t,
    pub raw_log_close_func: aeron_raw_log_close_func_t,
    pub raw_log_free_func: aeron_raw_log_free_func_t,
    pub unicast_flow_control_supplier_func: aeron_flow_control_strategy_supplier_func_t,
    pub multicast_flow_control_supplier_func: aeron_flow_control_strategy_supplier_func_t,
    pub congestion_control_supplier_func: aeron_congestion_control_strategy_supplier_func_t,
    pub conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    pub sender_proxy: *mut aeron_driver_sender_proxy_t,
    pub receiver_proxy: *mut aeron_driver_receiver_proxy_t,
    pub counters_manager: *mut aeron_counters_manager_t,
    pub system_counters: *mut aeron_system_counters_t,
    pub error_log: *mut aeron_distinct_error_log_t,
    pub log: aeron_driver_context_stct__bindgen_ty_3,
    pub termination_validator_func: aeron_driver_termination_validator_func_t,
    pub termination_validator_state: *mut ::std::os::raw::c_void,
    pub termination_hook_func: aeron_driver_termination_hook_func_t,
    pub termination_hook_state: *mut ::std::os::raw::c_void,
    pub udp_channel_transport_bindings: *mut aeron_udp_channel_transport_bindings_t,
    pub conductor_udp_channel_transport_bindings: *mut aeron_udp_channel_transport_bindings_t,
    pub udp_channel_outgoing_interceptor_bindings: *mut aeron_udp_channel_interceptor_bindings_t,
    pub udp_channel_incoming_interceptor_bindings: *mut aeron_udp_channel_interceptor_bindings_t,
    pub next_receiver_id: i64,
    pub unicast_delay_feedback_generator: aeron_feedback_delay_generator_state_t,
    pub multicast_delay_feedback_generator: aeron_feedback_delay_generator_state_t,
    pub resolver_name: *const ::std::os::raw::c_char,
    pub resolver_interface: *const ::std::os::raw::c_char,
    pub resolver_bootstrap_neighbor: *const ::std::os::raw::c_char,
    pub name_resolver_init_args: *const ::std::os::raw::c_char,
    pub name_resolver_supplier_func: aeron_name_resolver_supplier_func_t,
    pub driver_name_resolver_bootstrap_resolver_supplier_func: aeron_name_resolver_supplier_func_t,
    pub conductor_duty_cycle_tracker: *mut aeron_duty_cycle_tracker_t,
    pub sender_duty_cycle_tracker: *mut aeron_duty_cycle_tracker_t,
    pub receiver_duty_cycle_tracker: *mut aeron_duty_cycle_tracker_t,
    pub name_resolver_time_tracker: *mut aeron_duty_cycle_tracker_t,
    pub conductor_duty_cycle_stall_tracker: aeron_duty_cycle_stall_tracker_t,
    pub sender_duty_cycle_stall_tracker: aeron_duty_cycle_stall_tracker_t,
    pub receiver_duty_cycle_stall_tracker: aeron_duty_cycle_stall_tracker_t,
    pub name_resolver_time_stall_tracker: aeron_duty_cycle_stall_tracker_t,
    pub sender_port_manager: *mut aeron_port_manager_t,
    pub receiver_port_manager: *mut aeron_port_manager_t,
    pub sender_wildcard_port_manager: aeron_wildcard_port_manager_t,
    pub receiver_wildcard_port_manager: aeron_wildcard_port_manager_t,
    pub dynamic_libs: *mut aeron_dl_loaded_libs_state_t,
    pub bindings_clientd_entries: *mut aeron_driver_context_bindings_clientd_entry_t,
    pub num_bindings_clientd_entries: usize,
    pub os_buffer_lengths: aeron_driver_context_stct__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_context_stct__bindgen_ty_1 {
    pub is_present: bool,
    pub value: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_context_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_driver_context_stct__bindgen_ty_1>() - 16usize];
    ["Alignment of aeron_driver_context_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_driver_context_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_1::is_present"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_1, is_present) - 0usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_1::value"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_1, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_context_stct__bindgen_ty_2 {
    pub group_min_size: i32,
    pub receiver_timeout_ns: u64,
    pub group_tag: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_context_stct__bindgen_ty_2"]
        [::std::mem::size_of::<aeron_driver_context_stct__bindgen_ty_2>() - 24usize];
    ["Alignment of aeron_driver_context_stct__bindgen_ty_2"]
        [::std::mem::align_of::<aeron_driver_context_stct__bindgen_ty_2>() - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_2::group_min_size"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_2, group_min_size) - 0usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_2::receiver_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_2,
        receiver_timeout_ns
    ) - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_2::group_tag"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_2, group_tag) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_context_stct__bindgen_ty_3 {
    pub to_driver_interceptor: aeron_driver_conductor_to_driver_interceptor_func_t,
    pub to_client_interceptor: aeron_driver_conductor_to_client_interceptor_func_t,
    pub remove_publication_cleanup: aeron_on_remove_publication_cleanup_func_t,
    pub remove_subscription_cleanup: aeron_on_remove_subscription_cleanup_func_t,
    pub remove_image_cleanup: aeron_on_remove_image_cleanup_func_t,
    pub sender_proxy_on_add_endpoint: aeron_on_endpoint_change_func_t,
    pub sender_proxy_on_remove_endpoint: aeron_on_endpoint_change_func_t,
    pub receiver_proxy_on_add_endpoint: aeron_on_endpoint_change_func_t,
    pub receiver_proxy_on_remove_endpoint: aeron_on_endpoint_change_func_t,
    pub untethered_subscription_on_state_change: aeron_untethered_subscription_state_change_func_t,
    pub name_resolution_on_neighbor_added: aeron_driver_name_resolver_on_neighbor_change_func_t,
    pub name_resolution_on_neighbor_removed: aeron_driver_name_resolver_on_neighbor_change_func_t,
    pub flow_control_on_receiver_added:
        aeron_driver_flow_control_strategy_on_receiver_change_func_t,
    pub flow_control_on_receiver_removed:
        aeron_driver_flow_control_strategy_on_receiver_change_func_t,
    pub on_name_resolve: aeron_driver_name_resolver_on_resolve_t,
    pub on_name_lookup: aeron_driver_name_resolver_on_lookup_t,
    pub on_host_name: aeron_driver_name_resolver_on_host_name_t,
    pub send_nak_message: aeron_driver_send_nak_message_func_t,
    pub resend: aeron_driver_resend_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_context_stct__bindgen_ty_3"]
        [::std::mem::size_of::<aeron_driver_context_stct__bindgen_ty_3>() - 152usize];
    ["Alignment of aeron_driver_context_stct__bindgen_ty_3"]
        [::std::mem::align_of::<aeron_driver_context_stct__bindgen_ty_3>() - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::to_driver_interceptor"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        to_driver_interceptor
    ) - 0usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::to_client_interceptor"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        to_client_interceptor
    ) - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::remove_publication_cleanup"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        remove_publication_cleanup
    )
        - 16usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::remove_subscription_cleanup"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        remove_subscription_cleanup
    )
        - 24usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::remove_image_cleanup"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        remove_image_cleanup
    ) - 32usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::sender_proxy_on_add_endpoint"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        sender_proxy_on_add_endpoint
    )
        - 40usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::sender_proxy_on_remove_endpoint"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        sender_proxy_on_remove_endpoint
    )
        - 48usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::receiver_proxy_on_add_endpoint"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        receiver_proxy_on_add_endpoint
    )
        - 56usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::receiver_proxy_on_remove_endpoint"] [:: std :: mem :: offset_of ! (aeron_driver_context_stct__bindgen_ty_3 , receiver_proxy_on_remove_endpoint) - 64usize] ;
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::untethered_subscription_on_state_change"] [:: std :: mem :: offset_of ! (aeron_driver_context_stct__bindgen_ty_3 , untethered_subscription_on_state_change) - 72usize] ;
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::name_resolution_on_neighbor_added"] [:: std :: mem :: offset_of ! (aeron_driver_context_stct__bindgen_ty_3 , name_resolution_on_neighbor_added) - 80usize] ;
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::name_resolution_on_neighbor_removed"] [:: std :: mem :: offset_of ! (aeron_driver_context_stct__bindgen_ty_3 , name_resolution_on_neighbor_removed) - 88usize] ;
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::flow_control_on_receiver_added"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        flow_control_on_receiver_added
    )
        - 96usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::flow_control_on_receiver_removed"] [:: std :: mem :: offset_of ! (aeron_driver_context_stct__bindgen_ty_3 , flow_control_on_receiver_removed) - 104usize] ;
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::on_name_resolve"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        on_name_resolve
    ) - 112usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::on_name_lookup"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        on_name_lookup
    ) - 120usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::on_host_name"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_3, on_host_name) - 128usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::send_nak_message"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_3,
        send_nak_message
    ) - 136usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_3::resend"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_3, resend) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_context_stct__bindgen_ty_4 {
    pub default_so_sndbuf: usize,
    pub max_so_sndbuf: usize,
    pub default_so_rcvbuf: usize,
    pub max_so_rcvbuf: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_context_stct__bindgen_ty_4"]
        [::std::mem::size_of::<aeron_driver_context_stct__bindgen_ty_4>() - 32usize];
    ["Alignment of aeron_driver_context_stct__bindgen_ty_4"]
        [::std::mem::align_of::<aeron_driver_context_stct__bindgen_ty_4>() - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_4::default_so_sndbuf"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_4,
        default_so_sndbuf
    ) - 0usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_4::max_so_sndbuf"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_4, max_so_sndbuf) - 8usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_4::default_so_rcvbuf"][::std::mem::offset_of!(
        aeron_driver_context_stct__bindgen_ty_4,
        default_so_rcvbuf
    ) - 16usize];
    ["Offset of field: aeron_driver_context_stct__bindgen_ty_4::max_so_rcvbuf"]
        [::std::mem::offset_of!(aeron_driver_context_stct__bindgen_ty_4, max_so_rcvbuf) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_context_stct"]
        [::std::mem::size_of::<aeron_driver_context_stct>() - 2216usize];
    ["Alignment of aeron_driver_context_stct"]
        [::std::mem::align_of::<aeron_driver_context_stct>() - 8usize];
    ["Offset of field: aeron_driver_context_stct::aeron_dir"]
        [::std::mem::offset_of!(aeron_driver_context_stct, aeron_dir) - 0usize];
    ["Offset of field: aeron_driver_context_stct::threading_mode"]
        [::std::mem::offset_of!(aeron_driver_context_stct, threading_mode) - 8usize];
    ["Offset of field: aeron_driver_context_stct::receiver_group_consideration"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_group_consideration) - 12usize];
    ["Offset of field: aeron_driver_context_stct::dirs_delete_on_start"]
        [::std::mem::offset_of!(aeron_driver_context_stct, dirs_delete_on_start) - 16usize];
    ["Offset of field: aeron_driver_context_stct::dirs_delete_on_shutdown"]
        [::std::mem::offset_of!(aeron_driver_context_stct, dirs_delete_on_shutdown) - 17usize];
    ["Offset of field: aeron_driver_context_stct::warn_if_dirs_exist"]
        [::std::mem::offset_of!(aeron_driver_context_stct, warn_if_dirs_exist) - 18usize];
    ["Offset of field: aeron_driver_context_stct::term_buffer_sparse_file"]
        [::std::mem::offset_of!(aeron_driver_context_stct, term_buffer_sparse_file) - 19usize];
    ["Offset of field: aeron_driver_context_stct::perform_storage_checks"]
        [::std::mem::offset_of!(aeron_driver_context_stct, perform_storage_checks) - 20usize];
    ["Offset of field: aeron_driver_context_stct::spies_simulate_connection"]
        [::std::mem::offset_of!(aeron_driver_context_stct, spies_simulate_connection) - 21usize];
    ["Offset of field: aeron_driver_context_stct::print_configuration_on_start"]
        [::std::mem::offset_of!(aeron_driver_context_stct, print_configuration_on_start) - 22usize];
    ["Offset of field: aeron_driver_context_stct::reliable_stream"]
        [::std::mem::offset_of!(aeron_driver_context_stct, reliable_stream) - 23usize];
    ["Offset of field: aeron_driver_context_stct::tether_subscriptions"]
        [::std::mem::offset_of!(aeron_driver_context_stct, tether_subscriptions) - 24usize];
    ["Offset of field: aeron_driver_context_stct::rejoin_stream"]
        [::std::mem::offset_of!(aeron_driver_context_stct, rejoin_stream) - 25usize];
    ["Offset of field: aeron_driver_context_stct::ats_enabled"]
        [::std::mem::offset_of!(aeron_driver_context_stct, ats_enabled) - 26usize];
    ["Offset of field: aeron_driver_context_stct::connect_enabled"]
        [::std::mem::offset_of!(aeron_driver_context_stct, connect_enabled) - 27usize];
    ["Offset of field: aeron_driver_context_stct::driver_timeout_ms"]
        [::std::mem::offset_of!(aeron_driver_context_stct, driver_timeout_ms) - 32usize];
    ["Offset of field: aeron_driver_context_stct::client_liveness_timeout_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, client_liveness_timeout_ns) - 40usize];
    ["Offset of field: aeron_driver_context_stct::publication_linger_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        publication_linger_timeout_ns
    ) - 48usize];
    ["Offset of field: aeron_driver_context_stct::status_message_timeout_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, status_message_timeout_ns) - 56usize];
    ["Offset of field: aeron_driver_context_stct::image_liveness_timeout_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, image_liveness_timeout_ns) - 64usize];
    ["Offset of field: aeron_driver_context_stct::publication_unblock_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        publication_unblock_timeout_ns
    ) - 72usize];
    ["Offset of field: aeron_driver_context_stct::publication_connection_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        publication_connection_timeout_ns
    ) - 80usize];
    ["Offset of field: aeron_driver_context_stct::timer_interval_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, timer_interval_ns) - 88usize];
    ["Offset of field: aeron_driver_context_stct::counter_free_to_reuse_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, counter_free_to_reuse_ns) - 96usize];
    ["Offset of field: aeron_driver_context_stct::untethered_window_limit_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        untethered_window_limit_timeout_ns
    )
        - 104usize];
    ["Offset of field: aeron_driver_context_stct::untethered_resting_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        untethered_resting_timeout_ns
    ) - 112usize];
    ["Offset of field: aeron_driver_context_stct::retransmit_unicast_delay_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, retransmit_unicast_delay_ns) - 120usize];
    ["Offset of field: aeron_driver_context_stct::retransmit_unicast_linger_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        retransmit_unicast_linger_ns
    ) - 128usize];
    ["Offset of field: aeron_driver_context_stct::nak_unicast_delay_ns"]
        [::std::mem::offset_of!(aeron_driver_context_stct, nak_unicast_delay_ns) - 136usize];
    ["Offset of field: aeron_driver_context_stct::nak_unicast_retry_delay_ratio"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        nak_unicast_retry_delay_ratio
    ) - 144usize];
    ["Offset of field: aeron_driver_context_stct::nak_multicast_max_backoff_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        nak_multicast_max_backoff_ns
    ) - 152usize];
    ["Offset of field: aeron_driver_context_stct::re_resolution_check_interval_ns"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        re_resolution_check_interval_ns
    ) - 160usize];
    ["Offset of field: aeron_driver_context_stct::low_file_store_warning_threshold"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        low_file_store_warning_threshold
    ) - 168usize];
    ["Offset of field: aeron_driver_context_stct::to_driver_buffer_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, to_driver_buffer_length) - 176usize];
    ["Offset of field: aeron_driver_context_stct::to_clients_buffer_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, to_clients_buffer_length) - 184usize];
    ["Offset of field: aeron_driver_context_stct::counters_values_buffer_length"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        counters_values_buffer_length
    ) - 192usize];
    ["Offset of field: aeron_driver_context_stct::error_buffer_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, error_buffer_length) - 200usize];
    ["Offset of field: aeron_driver_context_stct::term_buffer_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, term_buffer_length) - 208usize];
    ["Offset of field: aeron_driver_context_stct::ipc_term_buffer_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, ipc_term_buffer_length) - 216usize];
    ["Offset of field: aeron_driver_context_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, mtu_length) - 224usize];
    ["Offset of field: aeron_driver_context_stct::ipc_mtu_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, ipc_mtu_length) - 232usize];
    ["Offset of field: aeron_driver_context_stct::ipc_publication_window_length"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        ipc_publication_window_length
    ) - 240usize];
    ["Offset of field: aeron_driver_context_stct::publication_window_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, publication_window_length) - 248usize];
    ["Offset of field: aeron_driver_context_stct::socket_rcvbuf"]
        [::std::mem::offset_of!(aeron_driver_context_stct, socket_rcvbuf) - 256usize];
    ["Offset of field: aeron_driver_context_stct::socket_sndbuf"]
        [::std::mem::offset_of!(aeron_driver_context_stct, socket_sndbuf) - 264usize];
    ["Offset of field: aeron_driver_context_stct::send_to_sm_poll_ratio"]
        [::std::mem::offset_of!(aeron_driver_context_stct, send_to_sm_poll_ratio) - 272usize];
    ["Offset of field: aeron_driver_context_stct::initial_window_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, initial_window_length) - 280usize];
    ["Offset of field: aeron_driver_context_stct::loss_report_length"]
        [::std::mem::offset_of!(aeron_driver_context_stct, loss_report_length) - 288usize];
    ["Offset of field: aeron_driver_context_stct::file_page_size"]
        [::std::mem::offset_of!(aeron_driver_context_stct, file_page_size) - 296usize];
    ["Offset of field: aeron_driver_context_stct::nak_multicast_group_size"]
        [::std::mem::offset_of!(aeron_driver_context_stct, nak_multicast_group_size) - 304usize];
    ["Offset of field: aeron_driver_context_stct::publication_reserved_session_id_low"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        publication_reserved_session_id_low
    )
        - 312usize];
    ["Offset of field: aeron_driver_context_stct::publication_reserved_session_id_high"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        publication_reserved_session_id_high
    )
        - 316usize];
    ["Offset of field: aeron_driver_context_stct::multicast_ttl"]
        [::std::mem::offset_of!(aeron_driver_context_stct, multicast_ttl) - 320usize];
    ["Offset of field: aeron_driver_context_stct::receiver_io_vector_capacity"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_io_vector_capacity) - 324usize];
    ["Offset of field: aeron_driver_context_stct::sender_io_vector_capacity"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_io_vector_capacity) - 328usize];
    ["Offset of field: aeron_driver_context_stct::network_publication_max_messages_per_send"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        network_publication_max_messages_per_send
    )
        - 332usize];
    ["Offset of field: aeron_driver_context_stct::resource_free_limit"]
        [::std::mem::offset_of!(aeron_driver_context_stct, resource_free_limit) - 336usize];
    ["Offset of field: aeron_driver_context_stct::async_executor_threads"]
        [::std::mem::offset_of!(aeron_driver_context_stct, async_executor_threads) - 340usize];
    ["Offset of field: aeron_driver_context_stct::max_resend"]
        [::std::mem::offset_of!(aeron_driver_context_stct, max_resend) - 344usize];
    ["Offset of field: aeron_driver_context_stct::conductor_cpu_affinity_no"]
        [::std::mem::offset_of!(aeron_driver_context_stct, conductor_cpu_affinity_no) - 348usize];
    ["Offset of field: aeron_driver_context_stct::receiver_cpu_affinity_no"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_cpu_affinity_no) - 352usize];
    ["Offset of field: aeron_driver_context_stct::sender_cpu_affinity_no"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_cpu_affinity_no) - 356usize];
    ["Offset of field: aeron_driver_context_stct::stream_session_limit"]
        [::std::mem::offset_of!(aeron_driver_context_stct, stream_session_limit) - 360usize];
    ["Offset of field: aeron_driver_context_stct::enable_experimental_features"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        enable_experimental_features
    ) - 364usize];
    ["Offset of field: aeron_driver_context_stct::receiver_group_tag"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_group_tag) - 368usize];
    ["Offset of field: aeron_driver_context_stct::flow_control"]
        [::std::mem::offset_of!(aeron_driver_context_stct, flow_control) - 384usize];
    ["Offset of field: aeron_driver_context_stct::cnc_map"]
        [::std::mem::offset_of!(aeron_driver_context_stct, cnc_map) - 408usize];
    ["Offset of field: aeron_driver_context_stct::loss_report"]
        [::std::mem::offset_of!(aeron_driver_context_stct, loss_report) - 424usize];
    ["Offset of field: aeron_driver_context_stct::to_driver_buffer"]
        [::std::mem::offset_of!(aeron_driver_context_stct, to_driver_buffer) - 440usize];
    ["Offset of field: aeron_driver_context_stct::to_clients_buffer"]
        [::std::mem::offset_of!(aeron_driver_context_stct, to_clients_buffer) - 448usize];
    ["Offset of field: aeron_driver_context_stct::counters_values_buffer"]
        [::std::mem::offset_of!(aeron_driver_context_stct, counters_values_buffer) - 456usize];
    ["Offset of field: aeron_driver_context_stct::counters_metadata_buffer"]
        [::std::mem::offset_of!(aeron_driver_context_stct, counters_metadata_buffer) - 464usize];
    ["Offset of field: aeron_driver_context_stct::error_buffer"]
        [::std::mem::offset_of!(aeron_driver_context_stct, error_buffer) - 472usize];
    ["Offset of field: aeron_driver_context_stct::nano_clock"]
        [::std::mem::offset_of!(aeron_driver_context_stct, nano_clock) - 480usize];
    ["Offset of field: aeron_driver_context_stct::epoch_clock"]
        [::std::mem::offset_of!(aeron_driver_context_stct, epoch_clock) - 488usize];
    ["Offset of field: aeron_driver_context_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_driver_context_stct, cached_clock) - 496usize];
    ["Offset of field: aeron_driver_context_stct::sender_cached_clock"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_cached_clock) - 504usize];
    ["Offset of field: aeron_driver_context_stct::receiver_cached_clock"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_cached_clock) - 512usize];
    ["Offset of field: aeron_driver_context_stct::sender_command_queue"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_command_queue) - 520usize];
    ["Offset of field: aeron_driver_context_stct::receiver_command_queue"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_command_queue) - 552usize];
    ["Offset of field: aeron_driver_context_stct::conductor_command_queue"]
        [::std::mem::offset_of!(aeron_driver_context_stct, conductor_command_queue) - 584usize];
    ["Offset of field: aeron_driver_context_stct::agent_on_start_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, agent_on_start_func) - 616usize];
    ["Offset of field: aeron_driver_context_stct::agent_on_start_state"]
        [::std::mem::offset_of!(aeron_driver_context_stct, agent_on_start_state) - 624usize];
    ["Offset of field: aeron_driver_context_stct::conductor_idle_strategy_func"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_idle_strategy_func
    ) - 632usize];
    ["Offset of field: aeron_driver_context_stct::conductor_idle_strategy_state"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_idle_strategy_state
    ) - 640usize];
    ["Offset of field: aeron_driver_context_stct::conductor_idle_strategy_init_args"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_idle_strategy_init_args
    ) - 648usize];
    ["Offset of field: aeron_driver_context_stct::conductor_idle_strategy_name"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_idle_strategy_name
    ) - 656usize];
    ["Offset of field: aeron_driver_context_stct::shared_idle_strategy_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, shared_idle_strategy_func) - 664usize];
    ["Offset of field: aeron_driver_context_stct::shared_idle_strategy_state"]
        [::std::mem::offset_of!(aeron_driver_context_stct, shared_idle_strategy_state) - 672usize];
    ["Offset of field: aeron_driver_context_stct::shared_idle_strategy_init_args"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        shared_idle_strategy_init_args
    ) - 680usize];
    ["Offset of field: aeron_driver_context_stct::shared_idle_strategy_name"]
        [::std::mem::offset_of!(aeron_driver_context_stct, shared_idle_strategy_name) - 688usize];
    ["Offset of field: aeron_driver_context_stct::shared_network_idle_strategy_func"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        shared_network_idle_strategy_func
    ) - 696usize];
    ["Offset of field: aeron_driver_context_stct::shared_network_idle_strategy_state"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        shared_network_idle_strategy_state
    )
        - 704usize];
    ["Offset of field: aeron_driver_context_stct::shared_network_idle_strategy_init_args"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        shared_network_idle_strategy_init_args
    )
        - 712usize];
    ["Offset of field: aeron_driver_context_stct::shared_network_idle_strategy_name"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        shared_network_idle_strategy_name
    ) - 720usize];
    ["Offset of field: aeron_driver_context_stct::sender_idle_strategy_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_idle_strategy_func) - 728usize];
    ["Offset of field: aeron_driver_context_stct::sender_idle_strategy_state"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_idle_strategy_state) - 736usize];
    ["Offset of field: aeron_driver_context_stct::sender_idle_strategy_init_args"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        sender_idle_strategy_init_args
    ) - 744usize];
    ["Offset of field: aeron_driver_context_stct::sender_idle_strategy_name"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_idle_strategy_name) - 752usize];
    ["Offset of field: aeron_driver_context_stct::receiver_idle_strategy_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_idle_strategy_func) - 760usize];
    ["Offset of field: aeron_driver_context_stct::receiver_idle_strategy_state"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        receiver_idle_strategy_state
    ) - 768usize];
    ["Offset of field: aeron_driver_context_stct::receiver_idle_strategy_init_args"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        receiver_idle_strategy_init_args
    ) - 776usize];
    ["Offset of field: aeron_driver_context_stct::receiver_idle_strategy_name"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_idle_strategy_name) - 784usize];
    ["Offset of field: aeron_driver_context_stct::usable_fs_space_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, usable_fs_space_func) - 792usize];
    ["Offset of field: aeron_driver_context_stct::raw_log_map_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, raw_log_map_func) - 800usize];
    ["Offset of field: aeron_driver_context_stct::raw_log_close_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, raw_log_close_func) - 808usize];
    ["Offset of field: aeron_driver_context_stct::raw_log_free_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, raw_log_free_func) - 816usize];
    ["Offset of field: aeron_driver_context_stct::unicast_flow_control_supplier_func"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        unicast_flow_control_supplier_func
    )
        - 824usize];
    ["Offset of field: aeron_driver_context_stct::multicast_flow_control_supplier_func"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        multicast_flow_control_supplier_func
    )
        - 832usize];
    ["Offset of field: aeron_driver_context_stct::congestion_control_supplier_func"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        congestion_control_supplier_func
    ) - 840usize];
    ["Offset of field: aeron_driver_context_stct::conductor_proxy"]
        [::std::mem::offset_of!(aeron_driver_context_stct, conductor_proxy) - 848usize];
    ["Offset of field: aeron_driver_context_stct::sender_proxy"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_proxy) - 856usize];
    ["Offset of field: aeron_driver_context_stct::receiver_proxy"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_proxy) - 864usize];
    ["Offset of field: aeron_driver_context_stct::counters_manager"]
        [::std::mem::offset_of!(aeron_driver_context_stct, counters_manager) - 872usize];
    ["Offset of field: aeron_driver_context_stct::system_counters"]
        [::std::mem::offset_of!(aeron_driver_context_stct, system_counters) - 880usize];
    ["Offset of field: aeron_driver_context_stct::error_log"]
        [::std::mem::offset_of!(aeron_driver_context_stct, error_log) - 888usize];
    ["Offset of field: aeron_driver_context_stct::log"]
        [::std::mem::offset_of!(aeron_driver_context_stct, log) - 896usize];
    ["Offset of field: aeron_driver_context_stct::termination_validator_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, termination_validator_func) - 1048usize];
    ["Offset of field: aeron_driver_context_stct::termination_validator_state"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        termination_validator_state
    ) - 1056usize];
    ["Offset of field: aeron_driver_context_stct::termination_hook_func"]
        [::std::mem::offset_of!(aeron_driver_context_stct, termination_hook_func) - 1064usize];
    ["Offset of field: aeron_driver_context_stct::termination_hook_state"]
        [::std::mem::offset_of!(aeron_driver_context_stct, termination_hook_state) - 1072usize];
    ["Offset of field: aeron_driver_context_stct::udp_channel_transport_bindings"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        udp_channel_transport_bindings
    ) - 1080usize];
    ["Offset of field: aeron_driver_context_stct::conductor_udp_channel_transport_bindings"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_udp_channel_transport_bindings
    )
        - 1088usize];
    ["Offset of field: aeron_driver_context_stct::udp_channel_outgoing_interceptor_bindings"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        udp_channel_outgoing_interceptor_bindings
    )
        - 1096usize];
    ["Offset of field: aeron_driver_context_stct::udp_channel_incoming_interceptor_bindings"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        udp_channel_incoming_interceptor_bindings
    )
        - 1104usize];
    ["Offset of field: aeron_driver_context_stct::next_receiver_id"]
        [::std::mem::offset_of!(aeron_driver_context_stct, next_receiver_id) - 1112usize];
    ["Offset of field: aeron_driver_context_stct::unicast_delay_feedback_generator"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        unicast_delay_feedback_generator
    ) - 1120usize];
    ["Offset of field: aeron_driver_context_stct::multicast_delay_feedback_generator"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        multicast_delay_feedback_generator
    )
        - 1176usize];
    ["Offset of field: aeron_driver_context_stct::resolver_name"]
        [::std::mem::offset_of!(aeron_driver_context_stct, resolver_name) - 1232usize];
    ["Offset of field: aeron_driver_context_stct::resolver_interface"]
        [::std::mem::offset_of!(aeron_driver_context_stct, resolver_interface) - 1240usize];
    ["Offset of field: aeron_driver_context_stct::resolver_bootstrap_neighbor"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        resolver_bootstrap_neighbor
    ) - 1248usize];
    ["Offset of field: aeron_driver_context_stct::name_resolver_init_args"]
        [::std::mem::offset_of!(aeron_driver_context_stct, name_resolver_init_args) - 1256usize];
    ["Offset of field: aeron_driver_context_stct::name_resolver_supplier_func"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        name_resolver_supplier_func
    ) - 1264usize];
    ["Offset of field: aeron_driver_context_stct::driver_name_resolver_bootstrap_resolver_supplier_func"] [:: std :: mem :: offset_of ! (aeron_driver_context_stct , driver_name_resolver_bootstrap_resolver_supplier_func) - 1272usize] ;
    ["Offset of field: aeron_driver_context_stct::conductor_duty_cycle_tracker"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_duty_cycle_tracker
    ) - 1280usize];
    ["Offset of field: aeron_driver_context_stct::sender_duty_cycle_tracker"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_duty_cycle_tracker) - 1288usize];
    ["Offset of field: aeron_driver_context_stct::receiver_duty_cycle_tracker"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        receiver_duty_cycle_tracker
    ) - 1296usize];
    ["Offset of field: aeron_driver_context_stct::name_resolver_time_tracker"]
        [::std::mem::offset_of!(aeron_driver_context_stct, name_resolver_time_tracker) - 1304usize];
    ["Offset of field: aeron_driver_context_stct::conductor_duty_cycle_stall_tracker"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        conductor_duty_cycle_stall_tracker
    )
        - 1312usize];
    ["Offset of field: aeron_driver_context_stct::sender_duty_cycle_stall_tracker"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        sender_duty_cycle_stall_tracker
    ) - 1480usize];
    ["Offset of field: aeron_driver_context_stct::receiver_duty_cycle_stall_tracker"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        receiver_duty_cycle_stall_tracker
    )
        - 1648usize];
    ["Offset of field: aeron_driver_context_stct::name_resolver_time_stall_tracker"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        name_resolver_time_stall_tracker
    ) - 1816usize];
    ["Offset of field: aeron_driver_context_stct::sender_port_manager"]
        [::std::mem::offset_of!(aeron_driver_context_stct, sender_port_manager) - 1984usize];
    ["Offset of field: aeron_driver_context_stct::receiver_port_manager"]
        [::std::mem::offset_of!(aeron_driver_context_stct, receiver_port_manager) - 1992usize];
    ["Offset of field: aeron_driver_context_stct::sender_wildcard_port_manager"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        sender_wildcard_port_manager
    ) - 2000usize];
    ["Offset of field: aeron_driver_context_stct::receiver_wildcard_port_manager"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        receiver_wildcard_port_manager
    ) - 2080usize];
    ["Offset of field: aeron_driver_context_stct::dynamic_libs"]
        [::std::mem::offset_of!(aeron_driver_context_stct, dynamic_libs) - 2160usize];
    ["Offset of field: aeron_driver_context_stct::bindings_clientd_entries"]
        [::std::mem::offset_of!(aeron_driver_context_stct, bindings_clientd_entries) - 2168usize];
    ["Offset of field: aeron_driver_context_stct::num_bindings_clientd_entries"][::std::mem::offset_of!(
        aeron_driver_context_stct,
        num_bindings_clientd_entries
    ) - 2176usize];
    ["Offset of field: aeron_driver_context_stct::os_buffer_lengths"]
        [::std::mem::offset_of!(aeron_driver_context_stct, os_buffer_lengths) - 2184usize];
};
unsafe extern "C" {
    pub fn aeron_config_parse_inferable_boolean(
        inferable_boolean: *const ::std::os::raw::c_char,
        def: aeron_inferable_boolean_t,
    ) -> aeron_inferable_boolean_t;
}
unsafe extern "C" {
    pub fn aeron_driver_threading_mode_to_string(
        mode: aeron_threading_mode_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_driver_context_print_configuration(context: *mut aeron_driver_context_t);
}
unsafe extern "C" {
    pub fn aeron_driver_fill_cnc_metadata(context: *mut aeron_driver_context_t);
}
unsafe extern "C" {
    pub fn aeron_driver_validate_unblock_timeout(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_validate_untethered_timeouts(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_validate_mtu_length(mtu_length: u64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_cnc_length(context: *mut aeron_driver_context_t) -> usize;
}
unsafe extern "C" {
    pub fn aeron_driver_context_run_storage_checks(
        context: *mut aeron_driver_context_t,
        log_length: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_bindings_clientd_create_entries(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_bindings_clientd_delete_entries(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_bindings_clientd_find_first_free_index(
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_bindings_clientd_find(
        context: *mut aeron_driver_context_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_context_bindings_clientd_get_or_find_first_free_entry(
        context: *mut aeron_driver_context_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut aeron_driver_context_bindings_clientd_entry_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_broadcast_transmitter_stct {
    pub buffer: *mut u8,
    pub descriptor: *mut aeron_broadcast_descriptor_t,
    pub capacity: usize,
    pub max_message_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_broadcast_transmitter_stct"]
        [::std::mem::size_of::<aeron_broadcast_transmitter_stct>() - 32usize];
    ["Alignment of aeron_broadcast_transmitter_stct"]
        [::std::mem::align_of::<aeron_broadcast_transmitter_stct>() - 8usize];
    ["Offset of field: aeron_broadcast_transmitter_stct::buffer"]
        [::std::mem::offset_of!(aeron_broadcast_transmitter_stct, buffer) - 0usize];
    ["Offset of field: aeron_broadcast_transmitter_stct::descriptor"]
        [::std::mem::offset_of!(aeron_broadcast_transmitter_stct, descriptor) - 8usize];
    ["Offset of field: aeron_broadcast_transmitter_stct::capacity"]
        [::std::mem::offset_of!(aeron_broadcast_transmitter_stct, capacity) - 16usize];
    ["Offset of field: aeron_broadcast_transmitter_stct::max_message_length"]
        [::std::mem::offset_of!(aeron_broadcast_transmitter_stct, max_message_length) - 24usize];
};
pub type aeron_broadcast_transmitter_t = aeron_broadcast_transmitter_stct;
unsafe extern "C" {
    pub fn aeron_broadcast_transmitter_init(
        transmitter: *mut aeron_broadcast_transmitter_t,
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_broadcast_transmitter_transmit(
        transmitter: *mut aeron_broadcast_transmitter_t,
        msg_type_id: i32,
        msg: *const ::std::os::raw::c_void,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_linked_queue_node_stct {
    _unused: [u8; 0],
}
pub type aeron_linked_queue_node_t = aeron_linked_queue_node_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_linked_queue_stct {
    pub head: *mut aeron_linked_queue_node_t,
    pub tail: *mut aeron_linked_queue_node_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_linked_queue_stct"][::std::mem::size_of::<aeron_linked_queue_stct>() - 16usize];
    ["Alignment of aeron_linked_queue_stct"]
        [::std::mem::align_of::<aeron_linked_queue_stct>() - 8usize];
    ["Offset of field: aeron_linked_queue_stct::head"]
        [::std::mem::offset_of!(aeron_linked_queue_stct, head) - 0usize];
    ["Offset of field: aeron_linked_queue_stct::tail"]
        [::std::mem::offset_of!(aeron_linked_queue_stct, tail) - 8usize];
};
pub type aeron_linked_queue_t = aeron_linked_queue_stct;
unsafe extern "C" {
    pub fn aeron_linked_queue_init(queue: *mut aeron_linked_queue_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_close(queue: *mut aeron_linked_queue_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_offer(
        queue: *mut aeron_linked_queue_t,
        element: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_offer_ex(
        queue: *mut aeron_linked_queue_t,
        element: *mut ::std::os::raw::c_void,
        node: *mut aeron_linked_queue_node_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_peek(queue: *mut aeron_linked_queue_t)
        -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_poll(queue: *mut aeron_linked_queue_t)
        -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_poll_ex(
        queue: *mut aeron_linked_queue_t,
        out_nodep: *mut *mut aeron_linked_queue_node_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_linked_queue_node_delete(
        node: *mut aeron_linked_queue_node_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_blocking_linked_queue_stct {
    pub queue: aeron_linked_queue_t,
    pub mutex: aeron_mutex_t,
    pub cv: aeron_cond_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_blocking_linked_queue_stct"]
        [::std::mem::size_of::<aeron_blocking_linked_queue_stct>() - 128usize];
    ["Alignment of aeron_blocking_linked_queue_stct"]
        [::std::mem::align_of::<aeron_blocking_linked_queue_stct>() - 8usize];
    ["Offset of field: aeron_blocking_linked_queue_stct::queue"]
        [::std::mem::offset_of!(aeron_blocking_linked_queue_stct, queue) - 0usize];
    ["Offset of field: aeron_blocking_linked_queue_stct::mutex"]
        [::std::mem::offset_of!(aeron_blocking_linked_queue_stct, mutex) - 16usize];
    ["Offset of field: aeron_blocking_linked_queue_stct::cv"]
        [::std::mem::offset_of!(aeron_blocking_linked_queue_stct, cv) - 80usize];
};
pub type aeron_blocking_linked_queue_t = aeron_blocking_linked_queue_stct;
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_init(
        queue: *mut aeron_blocking_linked_queue_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_close(
        queue: *mut aeron_blocking_linked_queue_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_offer(
        queue: *mut aeron_blocking_linked_queue_t,
        element: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_offer_ex(
        queue: *mut aeron_blocking_linked_queue_t,
        element: *mut ::std::os::raw::c_void,
        node: *mut aeron_linked_queue_node_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_poll(
        queue: *mut aeron_blocking_linked_queue_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_poll_ex(
        queue: *mut aeron_blocking_linked_queue_t,
        out_nodep: *mut *mut aeron_linked_queue_node_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_take(
        queue: *mut aeron_blocking_linked_queue_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_take_ex(
        queue: *mut aeron_blocking_linked_queue_t,
        out_nodep: *mut *mut aeron_linked_queue_node_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_is_empty(queue: *mut aeron_blocking_linked_queue_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_blocking_linked_queue_unblock(queue: *mut aeron_blocking_linked_queue_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_executor_task_stct {
    _unused: [u8; 0],
}
pub type aeron_executor_task_t = aeron_executor_task_stct;
pub type aeron_executor_on_execution_complete_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        task: *mut aeron_executor_task_t,
        executor_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_executor_stct {
    pub async_: bool,
    pub on_execution_complete: aeron_executor_on_execution_complete_func_t,
    pub clientd: *mut ::std::os::raw::c_void,
    pub queue: aeron_blocking_linked_queue_t,
    pub return_queue: aeron_blocking_linked_queue_t,
    pub dispatch_thread: aeron_thread_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_executor_stct"][::std::mem::size_of::<aeron_executor_stct>() - 288usize];
    ["Alignment of aeron_executor_stct"][::std::mem::align_of::<aeron_executor_stct>() - 8usize];
    ["Offset of field: aeron_executor_stct::async_"]
        [::std::mem::offset_of!(aeron_executor_stct, async_) - 0usize];
    ["Offset of field: aeron_executor_stct::on_execution_complete"]
        [::std::mem::offset_of!(aeron_executor_stct, on_execution_complete) - 8usize];
    ["Offset of field: aeron_executor_stct::clientd"]
        [::std::mem::offset_of!(aeron_executor_stct, clientd) - 16usize];
    ["Offset of field: aeron_executor_stct::queue"]
        [::std::mem::offset_of!(aeron_executor_stct, queue) - 24usize];
    ["Offset of field: aeron_executor_stct::return_queue"]
        [::std::mem::offset_of!(aeron_executor_stct, return_queue) - 152usize];
    ["Offset of field: aeron_executor_stct::dispatch_thread"]
        [::std::mem::offset_of!(aeron_executor_stct, dispatch_thread) - 280usize];
};
pub type aeron_executor_t = aeron_executor_stct;
unsafe extern "C" {
    pub fn aeron_executor_init(
        executor: *mut aeron_executor_t,
        async_: bool,
        on_execution_complete: aeron_executor_on_execution_complete_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_executor_close(executor: *mut aeron_executor_t) -> ::std::os::raw::c_int;
}
pub type aeron_executor_task_on_execute_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        task_clientd: *mut ::std::os::raw::c_void,
        executor_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_executor_task_on_complete_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        execution_result: ::std::os::raw::c_int,
        errcode: ::std::os::raw::c_int,
        errmsg: *const ::std::os::raw::c_char,
        task_clientd: *mut ::std::os::raw::c_void,
        executor_clientd: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn aeron_executor_submit(
        executor: *mut aeron_executor_t,
        on_execute: aeron_executor_task_on_execute_func_t,
        on_complete: aeron_executor_task_on_complete_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_executor_process_completions(
        executor: *mut aeron_executor_t,
        limit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_executor_task_do_complete(task: *mut aeron_executor_task_t);
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_correlated_command_stct {
    pub client_id: i64,
    pub correlation_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_correlated_command_stct"]
        [::std::mem::size_of::<aeron_correlated_command_stct>() - 16usize];
    ["Alignment of aeron_correlated_command_stct"]
        [::std::mem::align_of::<aeron_correlated_command_stct>() - 4usize];
    ["Offset of field: aeron_correlated_command_stct::client_id"]
        [::std::mem::offset_of!(aeron_correlated_command_stct, client_id) - 0usize];
    ["Offset of field: aeron_correlated_command_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_correlated_command_stct, correlation_id) - 8usize];
};
pub type aeron_correlated_command_t = aeron_correlated_command_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub stream_id: i32,
    pub channel_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_command_stct"]
        [::std::mem::size_of::<aeron_publication_command_stct>() - 24usize];
    ["Alignment of aeron_publication_command_stct"]
        [::std::mem::align_of::<aeron_publication_command_stct>() - 4usize];
    ["Offset of field: aeron_publication_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_publication_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_publication_command_stct::stream_id"]
        [::std::mem::offset_of!(aeron_publication_command_stct, stream_id) - 16usize];
    ["Offset of field: aeron_publication_command_stct::channel_length"]
        [::std::mem::offset_of!(aeron_publication_command_stct, channel_length) - 20usize];
};
pub type aeron_publication_command_t = aeron_publication_command_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_buffers_ready_stct {
    pub correlation_id: i64,
    pub registration_id: i64,
    pub session_id: i32,
    pub stream_id: i32,
    pub position_limit_counter_id: i32,
    pub channel_status_indicator_id: i32,
    pub log_file_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_buffers_ready_stct"]
        [::std::mem::size_of::<aeron_publication_buffers_ready_stct>() - 36usize];
    ["Alignment of aeron_publication_buffers_ready_stct"]
        [::std::mem::align_of::<aeron_publication_buffers_ready_stct>() - 4usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_publication_buffers_ready_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::registration_id"]
        [::std::mem::offset_of!(aeron_publication_buffers_ready_stct, registration_id) - 8usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::session_id"]
        [::std::mem::offset_of!(aeron_publication_buffers_ready_stct, session_id) - 16usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::stream_id"]
        [::std::mem::offset_of!(aeron_publication_buffers_ready_stct, stream_id) - 20usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::position_limit_counter_id"][::std::mem::offset_of!(
        aeron_publication_buffers_ready_stct,
        position_limit_counter_id
    )
        - 24usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::channel_status_indicator_id"][::std::mem::offset_of!(
        aeron_publication_buffers_ready_stct,
        channel_status_indicator_id
    )
        - 28usize];
    ["Offset of field: aeron_publication_buffers_ready_stct::log_file_length"]
        [::std::mem::offset_of!(aeron_publication_buffers_ready_stct, log_file_length) - 32usize];
};
pub type aeron_publication_buffers_ready_t = aeron_publication_buffers_ready_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscription_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub registration_correlation_id: i64,
    pub stream_id: i32,
    pub channel_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscription_command_stct"]
        [::std::mem::size_of::<aeron_subscription_command_stct>() - 32usize];
    ["Alignment of aeron_subscription_command_stct"]
        [::std::mem::align_of::<aeron_subscription_command_stct>() - 4usize];
    ["Offset of field: aeron_subscription_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_subscription_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_subscription_command_stct::registration_correlation_id"][::std::mem::offset_of!(
        aeron_subscription_command_stct,
        registration_correlation_id
    ) - 16usize];
    ["Offset of field: aeron_subscription_command_stct::stream_id"]
        [::std::mem::offset_of!(aeron_subscription_command_stct, stream_id) - 24usize];
    ["Offset of field: aeron_subscription_command_stct::channel_length"]
        [::std::mem::offset_of!(aeron_subscription_command_stct, channel_length) - 28usize];
};
pub type aeron_subscription_command_t = aeron_subscription_command_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscription_ready_stct {
    pub correlation_id: i64,
    pub channel_status_indicator_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscription_ready_stct"]
        [::std::mem::size_of::<aeron_subscription_ready_stct>() - 12usize];
    ["Alignment of aeron_subscription_ready_stct"]
        [::std::mem::align_of::<aeron_subscription_ready_stct>() - 4usize];
    ["Offset of field: aeron_subscription_ready_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_subscription_ready_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_subscription_ready_stct::channel_status_indicator_id"][::std::mem::offset_of!(
        aeron_subscription_ready_stct,
        channel_status_indicator_id
    ) - 8usize];
};
pub type aeron_subscription_ready_t = aeron_subscription_ready_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_image_buffers_ready_stct {
    pub correlation_id: i64,
    pub session_id: i32,
    pub stream_id: i32,
    pub subscriber_registration_id: i64,
    pub subscriber_position_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_image_buffers_ready_stct"]
        [::std::mem::size_of::<aeron_image_buffers_ready_stct>() - 28usize];
    ["Alignment of aeron_image_buffers_ready_stct"]
        [::std::mem::align_of::<aeron_image_buffers_ready_stct>() - 4usize];
    ["Offset of field: aeron_image_buffers_ready_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_image_buffers_ready_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_image_buffers_ready_stct::session_id"]
        [::std::mem::offset_of!(aeron_image_buffers_ready_stct, session_id) - 8usize];
    ["Offset of field: aeron_image_buffers_ready_stct::stream_id"]
        [::std::mem::offset_of!(aeron_image_buffers_ready_stct, stream_id) - 12usize];
    ["Offset of field: aeron_image_buffers_ready_stct::subscriber_registration_id"][::std::mem::offset_of!(
        aeron_image_buffers_ready_stct,
        subscriber_registration_id
    ) - 16usize];
    ["Offset of field: aeron_image_buffers_ready_stct::subscriber_position_id"]
        [::std::mem::offset_of!(aeron_image_buffers_ready_stct, subscriber_position_id) - 24usize];
};
pub type aeron_image_buffers_ready_t = aeron_image_buffers_ready_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_operation_succeeded_stct {
    pub correlation_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_operation_succeeded_stct"]
        [::std::mem::size_of::<aeron_operation_succeeded_stct>() - 8usize];
    ["Alignment of aeron_operation_succeeded_stct"]
        [::std::mem::align_of::<aeron_operation_succeeded_stct>() - 4usize];
    ["Offset of field: aeron_operation_succeeded_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_operation_succeeded_stct, correlation_id) - 0usize];
};
pub type aeron_operation_succeeded_t = aeron_operation_succeeded_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_error_response_stct {
    pub offending_command_correlation_id: i64,
    pub error_code: i32,
    pub error_message_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_error_response_stct"]
        [::std::mem::size_of::<aeron_error_response_stct>() - 16usize];
    ["Alignment of aeron_error_response_stct"]
        [::std::mem::align_of::<aeron_error_response_stct>() - 4usize];
    ["Offset of field: aeron_error_response_stct::offending_command_correlation_id"][::std::mem::offset_of!(
        aeron_error_response_stct,
        offending_command_correlation_id
    ) - 0usize];
    ["Offset of field: aeron_error_response_stct::error_code"]
        [::std::mem::offset_of!(aeron_error_response_stct, error_code) - 8usize];
    ["Offset of field: aeron_error_response_stct::error_message_length"]
        [::std::mem::offset_of!(aeron_error_response_stct, error_message_length) - 12usize];
};
pub type aeron_error_response_t = aeron_error_response_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_remove_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub registration_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_remove_command_stct"]
        [::std::mem::size_of::<aeron_remove_command_stct>() - 24usize];
    ["Alignment of aeron_remove_command_stct"]
        [::std::mem::align_of::<aeron_remove_command_stct>() - 4usize];
    ["Offset of field: aeron_remove_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_remove_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_remove_command_stct::registration_id"]
        [::std::mem::offset_of!(aeron_remove_command_stct, registration_id) - 16usize];
};
pub type aeron_remove_command_t = aeron_remove_command_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_image_message_stct {
    pub correlation_id: i64,
    pub subscription_registration_id: i64,
    pub stream_id: i32,
    pub channel_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_image_message_stct"]
        [::std::mem::size_of::<aeron_image_message_stct>() - 24usize];
    ["Alignment of aeron_image_message_stct"]
        [::std::mem::align_of::<aeron_image_message_stct>() - 4usize];
    ["Offset of field: aeron_image_message_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_image_message_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_image_message_stct::subscription_registration_id"]
        [::std::mem::offset_of!(aeron_image_message_stct, subscription_registration_id) - 8usize];
    ["Offset of field: aeron_image_message_stct::stream_id"]
        [::std::mem::offset_of!(aeron_image_message_stct, stream_id) - 16usize];
    ["Offset of field: aeron_image_message_stct::channel_length"]
        [::std::mem::offset_of!(aeron_image_message_stct, channel_length) - 20usize];
};
pub type aeron_image_message_t = aeron_image_message_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_destination_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub registration_id: i64,
    pub channel_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_destination_command_stct"]
        [::std::mem::size_of::<aeron_destination_command_stct>() - 28usize];
    ["Alignment of aeron_destination_command_stct"]
        [::std::mem::align_of::<aeron_destination_command_stct>() - 4usize];
    ["Offset of field: aeron_destination_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_destination_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_destination_command_stct::registration_id"]
        [::std::mem::offset_of!(aeron_destination_command_stct, registration_id) - 16usize];
    ["Offset of field: aeron_destination_command_stct::channel_length"]
        [::std::mem::offset_of!(aeron_destination_command_stct, channel_length) - 24usize];
};
pub type aeron_destination_command_t = aeron_destination_command_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_destination_by_id_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub resource_registration_id: i64,
    pub destination_registration_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_destination_by_id_command_stct"]
        [::std::mem::size_of::<aeron_destination_by_id_command_stct>() - 32usize];
    ["Alignment of aeron_destination_by_id_command_stct"]
        [::std::mem::align_of::<aeron_destination_by_id_command_stct>() - 4usize];
    ["Offset of field: aeron_destination_by_id_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_destination_by_id_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_destination_by_id_command_stct::resource_registration_id"][::std::mem::offset_of!(
        aeron_destination_by_id_command_stct,
        resource_registration_id
    )
        - 16usize];
    ["Offset of field: aeron_destination_by_id_command_stct::destination_registration_id"][::std::mem::offset_of!(
        aeron_destination_by_id_command_stct,
        destination_registration_id
    )
        - 24usize];
};
pub type aeron_destination_by_id_command_t = aeron_destination_by_id_command_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub type_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counter_command_stct"]
        [::std::mem::size_of::<aeron_counter_command_stct>() - 20usize];
    ["Alignment of aeron_counter_command_stct"]
        [::std::mem::align_of::<aeron_counter_command_stct>() - 4usize];
    ["Offset of field: aeron_counter_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_counter_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_counter_command_stct::type_id"]
        [::std::mem::offset_of!(aeron_counter_command_stct, type_id) - 16usize];
};
pub type aeron_counter_command_t = aeron_counter_command_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_update_stct {
    pub correlation_id: i64,
    pub counter_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counter_update_stct"]
        [::std::mem::size_of::<aeron_counter_update_stct>() - 12usize];
    ["Alignment of aeron_counter_update_stct"]
        [::std::mem::align_of::<aeron_counter_update_stct>() - 4usize];
    ["Offset of field: aeron_counter_update_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_counter_update_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_counter_update_stct::counter_id"]
        [::std::mem::offset_of!(aeron_counter_update_stct, counter_id) - 8usize];
};
pub type aeron_counter_update_t = aeron_counter_update_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_static_counter_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub registration_id: i64,
    pub type_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_static_counter_command_stct"]
        [::std::mem::size_of::<aeron_static_counter_command_stct>() - 28usize];
    ["Alignment of aeron_static_counter_command_stct"]
        [::std::mem::align_of::<aeron_static_counter_command_stct>() - 4usize];
    ["Offset of field: aeron_static_counter_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_static_counter_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_static_counter_command_stct::registration_id"]
        [::std::mem::offset_of!(aeron_static_counter_command_stct, registration_id) - 16usize];
    ["Offset of field: aeron_static_counter_command_stct::type_id"]
        [::std::mem::offset_of!(aeron_static_counter_command_stct, type_id) - 24usize];
};
pub type aeron_static_counter_command_t = aeron_static_counter_command_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_static_counter_response_stct {
    pub correlation_id: i64,
    pub counter_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_static_counter_response_stct"]
        [::std::mem::size_of::<aeron_static_counter_response_stct>() - 12usize];
    ["Alignment of aeron_static_counter_response_stct"]
        [::std::mem::align_of::<aeron_static_counter_response_stct>() - 4usize];
    ["Offset of field: aeron_static_counter_response_stct::correlation_id"]
        [::std::mem::offset_of!(aeron_static_counter_response_stct, correlation_id) - 0usize];
    ["Offset of field: aeron_static_counter_response_stct::counter_id"]
        [::std::mem::offset_of!(aeron_static_counter_response_stct, counter_id) - 8usize];
};
pub type aeron_static_counter_response_t = aeron_static_counter_response_stct;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_client_timeout_stct {
    pub client_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_client_timeout_stct"]
        [::std::mem::size_of::<aeron_client_timeout_stct>() - 8usize];
    ["Alignment of aeron_client_timeout_stct"]
        [::std::mem::align_of::<aeron_client_timeout_stct>() - 4usize];
    ["Offset of field: aeron_client_timeout_stct::client_id"]
        [::std::mem::offset_of!(aeron_client_timeout_stct, client_id) - 0usize];
};
pub type aeron_client_timeout_t = aeron_client_timeout_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_terminate_driver_command_stct {
    pub correlated: aeron_correlated_command_t,
    pub token_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_terminate_driver_command_stct"]
        [::std::mem::size_of::<aeron_terminate_driver_command_stct>() - 20usize];
    ["Alignment of aeron_terminate_driver_command_stct"]
        [::std::mem::align_of::<aeron_terminate_driver_command_stct>() - 4usize];
    ["Offset of field: aeron_terminate_driver_command_stct::correlated"]
        [::std::mem::offset_of!(aeron_terminate_driver_command_stct, correlated) - 0usize];
    ["Offset of field: aeron_terminate_driver_command_stct::token_length"]
        [::std::mem::offset_of!(aeron_terminate_driver_command_stct, token_length) - 16usize];
};
pub type aeron_terminate_driver_command_t = aeron_terminate_driver_command_stct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_ipc_publication_state_enum {
    AERON_IPC_PUBLICATION_STATE_ACTIVE = 0,
    AERON_IPC_PUBLICATION_STATE_DRAINING = 1,
    AERON_IPC_PUBLICATION_STATE_LINGER = 2,
    AERON_IPC_PUBLICATION_STATE_DONE = 3,
}
pub use self::aeron_ipc_publication_state_enum as aeron_ipc_publication_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_ipc_publication_stct {
    pub mapped_raw_log: aeron_mapped_raw_log_t,
    pub log_meta_data: *mut aeron_logbuffer_metadata_t,
    pub pub_lmt_position: aeron_position_t,
    pub pub_pos_position: aeron_position_t,
    pub conductor_fields: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct,
    pub position_bits_to_shift: usize,
    pub term_window_length: i64,
    pub trip_gain: i64,
    pub unblock_timeout_ns: i64,
    pub untethered_window_limit_timeout_ns: i64,
    pub untethered_resting_timeout_ns: i64,
    pub initial_term_id: i32,
    pub is_exclusive: bool,
    pub tag: i64,
    pub session_id: i32,
    pub stream_id: i32,
    pub starting_term_id: i32,
    pub starting_term_offset: usize,
    pub channel_length: i32,
    pub channel: *mut ::std::os::raw::c_char,
    pub log_file_name_length: usize,
    pub log_file_name: *mut ::std::os::raw::c_char,
    pub raw_log_close_func: aeron_raw_log_close_func_t,
    pub raw_log_free_func: aeron_raw_log_free_func_t,
    pub log: aeron_ipc_publication_stct__bindgen_ty_1,
    pub unblocked_publications_counter: *mut i64,
    pub mapped_bytes_counter: *mut i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct {
    pub has_reached_end_of_life: bool,
    pub state: aeron_ipc_publication_state_t,
    pub refcnt: i32,
    pub managed_resource: aeron_driver_managed_resource_t,
    pub subscribable: aeron_subscribable_t,
    pub trip_limit: i64,
    pub clean_position: i64,
    pub consumer_position: i64,
    pub last_consumer_position: i64,
    pub time_of_last_consumer_position_change_ns: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct"]
        [::std::mem::size_of::<
            aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct,
        >() - 160usize];
    ["Alignment of aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct"]
        [::std::mem::align_of::<
            aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct,
        >() - 8usize];
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , has_reached_end_of_life) - 0usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::state"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , state) - 4usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::refcnt"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , refcnt) - 8usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::managed_resource"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , managed_resource) - 16usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::subscribable"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , subscribable) - 56usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::trip_limit"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , trip_limit) - 120usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::clean_position"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , clean_position) - 128usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::consumer_position"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , consumer_position) - 136usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::last_consumer_position"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , last_consumer_position) - 144usize] ;
    ["Offset of field: aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct::time_of_last_consumer_position_change_ns"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct_aeron_ipc_publication_conductor_fields_stct , time_of_last_consumer_position_change_ns) - 152usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_ipc_publication_stct__bindgen_ty_1 {
    pub untethered_subscription_state_change: aeron_untethered_subscription_state_change_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_ipc_publication_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_ipc_publication_stct__bindgen_ty_1>() - 8usize];
    ["Alignment of aeron_ipc_publication_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_ipc_publication_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_ipc_publication_stct__bindgen_ty_1::untethered_subscription_state_change"] [:: std :: mem :: offset_of ! (aeron_ipc_publication_stct__bindgen_ty_1 , untethered_subscription_state_change) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_ipc_publication_stct"]
        [::std::mem::size_of::<aeron_ipc_publication_stct>() - 448usize];
    ["Alignment of aeron_ipc_publication_stct"]
        [::std::mem::align_of::<aeron_ipc_publication_stct>() - 8usize];
    ["Offset of field: aeron_ipc_publication_stct::mapped_raw_log"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, mapped_raw_log) - 0usize];
    ["Offset of field: aeron_ipc_publication_stct::log_meta_data"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, log_meta_data) - 88usize];
    ["Offset of field: aeron_ipc_publication_stct::pub_lmt_position"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, pub_lmt_position) - 96usize];
    ["Offset of field: aeron_ipc_publication_stct::pub_pos_position"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, pub_pos_position) - 112usize];
    ["Offset of field: aeron_ipc_publication_stct::conductor_fields"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, conductor_fields) - 128usize];
    ["Offset of field: aeron_ipc_publication_stct::position_bits_to_shift"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, position_bits_to_shift) - 288usize];
    ["Offset of field: aeron_ipc_publication_stct::term_window_length"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, term_window_length) - 296usize];
    ["Offset of field: aeron_ipc_publication_stct::trip_gain"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, trip_gain) - 304usize];
    ["Offset of field: aeron_ipc_publication_stct::unblock_timeout_ns"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, unblock_timeout_ns) - 312usize];
    ["Offset of field: aeron_ipc_publication_stct::untethered_window_limit_timeout_ns"][::std::mem::offset_of!(
        aeron_ipc_publication_stct,
        untethered_window_limit_timeout_ns
    )
        - 320usize];
    ["Offset of field: aeron_ipc_publication_stct::untethered_resting_timeout_ns"][::std::mem::offset_of!(
        aeron_ipc_publication_stct,
        untethered_resting_timeout_ns
    ) - 328usize];
    ["Offset of field: aeron_ipc_publication_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, initial_term_id) - 336usize];
    ["Offset of field: aeron_ipc_publication_stct::is_exclusive"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, is_exclusive) - 340usize];
    ["Offset of field: aeron_ipc_publication_stct::tag"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, tag) - 344usize];
    ["Offset of field: aeron_ipc_publication_stct::session_id"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, session_id) - 352usize];
    ["Offset of field: aeron_ipc_publication_stct::stream_id"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, stream_id) - 356usize];
    ["Offset of field: aeron_ipc_publication_stct::starting_term_id"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, starting_term_id) - 360usize];
    ["Offset of field: aeron_ipc_publication_stct::starting_term_offset"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, starting_term_offset) - 368usize];
    ["Offset of field: aeron_ipc_publication_stct::channel_length"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, channel_length) - 376usize];
    ["Offset of field: aeron_ipc_publication_stct::channel"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, channel) - 384usize];
    ["Offset of field: aeron_ipc_publication_stct::log_file_name_length"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, log_file_name_length) - 392usize];
    ["Offset of field: aeron_ipc_publication_stct::log_file_name"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, log_file_name) - 400usize];
    ["Offset of field: aeron_ipc_publication_stct::raw_log_close_func"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, raw_log_close_func) - 408usize];
    ["Offset of field: aeron_ipc_publication_stct::raw_log_free_func"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, raw_log_free_func) - 416usize];
    ["Offset of field: aeron_ipc_publication_stct::log"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, log) - 424usize];
    ["Offset of field: aeron_ipc_publication_stct::unblocked_publications_counter"][::std::mem::offset_of!(
        aeron_ipc_publication_stct,
        unblocked_publications_counter
    ) - 432usize];
    ["Offset of field: aeron_ipc_publication_stct::mapped_bytes_counter"]
        [::std::mem::offset_of!(aeron_ipc_publication_stct, mapped_bytes_counter) - 440usize];
};
pub type aeron_ipc_publication_t = aeron_ipc_publication_stct;
unsafe extern "C" {
    pub fn aeron_ipc_publication_create(
        publication: *mut *mut aeron_ipc_publication_t,
        context: *mut aeron_driver_context_t,
        session_id: i32,
        stream_id: i32,
        registration_id: i64,
        pub_pos_position: *mut aeron_position_t,
        pub_lmt_position: *mut aeron_position_t,
        initial_term_id: i32,
        params: *mut aeron_driver_uri_publication_params_t,
        is_exclusive: bool,
        system_counters: *mut aeron_system_counters_t,
        channel_length: usize,
        channel: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_close(
        counters_manager: *mut aeron_counters_manager_t,
        publication: *mut aeron_ipc_publication_t,
    );
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_free(publication: *mut aeron_ipc_publication_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_update_pub_pos_and_lmt(
        publication: *mut aeron_ipc_publication_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_clean_buffer(
        publication: *mut aeron_ipc_publication_t,
        position: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        publication: *mut aeron_ipc_publication_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_incref(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_decref(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_check_for_blocked_publisher(
        publication: *mut aeron_ipc_publication_t,
        producer_position: i64,
        now_ns: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_format_date(str_: *mut ::std::os::raw::c_char, count: usize, timestamp: i64);
}
unsafe extern "C" {
    pub fn aeron_format_number_to_locale(
        value: ::std::os::raw::c_longlong,
        buffer: *mut ::std::os::raw::c_char,
        buffer_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aeron_format_to_hex(
        str_: *mut ::std::os::raw::c_char,
        str_length: usize,
        data: *const u8,
        data_len: usize,
    );
}
unsafe extern "C" {
    pub fn aeron_tokenise(
        input: *mut ::std::os::raw::c_char,
        delimiter: ::std::os::raw::c_char,
        max_tokens: ::std::os::raw::c_int,
        tokens: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_str_to_ptr_hash_map_key_stct {
    pub str_: *const ::std::os::raw::c_char,
    pub hash_code: u64,
    pub str_length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_str_to_ptr_hash_map_key_stct"]
        [::std::mem::size_of::<aeron_str_to_ptr_hash_map_key_stct>() - 24usize];
    ["Alignment of aeron_str_to_ptr_hash_map_key_stct"]
        [::std::mem::align_of::<aeron_str_to_ptr_hash_map_key_stct>() - 8usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_key_stct::str_"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_key_stct, str_) - 0usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_key_stct::hash_code"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_key_stct, hash_code) - 8usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_key_stct::str_length"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_key_stct, str_length) - 16usize];
};
pub type aeron_str_to_ptr_hash_map_key_t = aeron_str_to_ptr_hash_map_key_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_str_to_ptr_hash_map_stct {
    pub keys: *mut aeron_str_to_ptr_hash_map_key_t,
    pub values: *mut *mut ::std::os::raw::c_void,
    pub load_factor: f32,
    pub capacity: usize,
    pub size: usize,
    pub resize_threshold: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_str_to_ptr_hash_map_stct"]
        [::std::mem::size_of::<aeron_str_to_ptr_hash_map_stct>() - 48usize];
    ["Alignment of aeron_str_to_ptr_hash_map_stct"]
        [::std::mem::align_of::<aeron_str_to_ptr_hash_map_stct>() - 8usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_stct::keys"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_stct, keys) - 0usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_stct::values"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_stct, values) - 8usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_stct::load_factor"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_stct, load_factor) - 16usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_stct::capacity"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_stct, capacity) - 24usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_stct::size"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_stct, size) - 32usize];
    ["Offset of field: aeron_str_to_ptr_hash_map_stct::resize_threshold"]
        [::std::mem::offset_of!(aeron_str_to_ptr_hash_map_stct, resize_threshold) - 40usize];
};
pub type aeron_str_to_ptr_hash_map_t = aeron_str_to_ptr_hash_map_stct;
pub type aeron_str_to_ptr_hash_map_for_each_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_int64_to_ptr_hash_map_stct {
    pub keys: *mut i64,
    pub values: *mut *mut ::std::os::raw::c_void,
    pub load_factor: f32,
    pub capacity: usize,
    pub size: usize,
    pub resize_threshold: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_int64_to_ptr_hash_map_stct"]
        [::std::mem::size_of::<aeron_int64_to_ptr_hash_map_stct>() - 48usize];
    ["Alignment of aeron_int64_to_ptr_hash_map_stct"]
        [::std::mem::align_of::<aeron_int64_to_ptr_hash_map_stct>() - 8usize];
    ["Offset of field: aeron_int64_to_ptr_hash_map_stct::keys"]
        [::std::mem::offset_of!(aeron_int64_to_ptr_hash_map_stct, keys) - 0usize];
    ["Offset of field: aeron_int64_to_ptr_hash_map_stct::values"]
        [::std::mem::offset_of!(aeron_int64_to_ptr_hash_map_stct, values) - 8usize];
    ["Offset of field: aeron_int64_to_ptr_hash_map_stct::load_factor"]
        [::std::mem::offset_of!(aeron_int64_to_ptr_hash_map_stct, load_factor) - 16usize];
    ["Offset of field: aeron_int64_to_ptr_hash_map_stct::capacity"]
        [::std::mem::offset_of!(aeron_int64_to_ptr_hash_map_stct, capacity) - 24usize];
    ["Offset of field: aeron_int64_to_ptr_hash_map_stct::size"]
        [::std::mem::offset_of!(aeron_int64_to_ptr_hash_map_stct, size) - 32usize];
    ["Offset of field: aeron_int64_to_ptr_hash_map_stct::resize_threshold"]
        [::std::mem::offset_of!(aeron_int64_to_ptr_hash_map_stct, resize_threshold) - 40usize];
};
pub type aeron_int64_to_ptr_hash_map_t = aeron_int64_to_ptr_hash_map_stct;
pub type aeron_int64_to_ptr_hash_map_for_each_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        key: i64,
        value: *mut ::std::os::raw::c_void,
    ),
>;
pub type aeron_int64_to_ptr_hash_map_predicate_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        key: i64,
        value: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type aeron_uri_hostname_resolver_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        host: *const ::std::os::raw::c_char,
        hints: *mut addrinfo,
        info: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_getifaddrs_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut *mut ifaddrs) -> ::std::os::raw::c_int>;
pub type aeron_freeifaddrs_func_t = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ifaddrs)>;
pub type aeron_ifaddr_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        addr: *mut sockaddr,
        netmask: *mut sockaddr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn aeron_ip_addr_resolver(
        host: *const ::std::os::raw::c_char,
        sockaddr: *mut sockaddr_storage,
        family_hint: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_port_resolver(
        port_str: *const ::std::os::raw::c_char,
        optional: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_try_parse_ipv4(
        host: *const ::std::os::raw::c_char,
        sockaddr: *mut sockaddr_storage,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipv4_addr_resolver(
        host: *const ::std::os::raw::c_char,
        protocol: ::std::os::raw::c_int,
        sockaddr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_try_parse_ipv6(
        host: *const ::std::os::raw::c_char,
        sockaddr: *mut sockaddr_storage,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipv6_addr_resolver(
        host: *const ::std::os::raw::c_char,
        protocol: ::std::os::raw::c_int,
        sockaddr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_lookup_interfaces(
        func: aeron_ifaddr_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_lookup_interfaces_from_ifaddrs(
        func: aeron_ifaddr_func_t,
        clientd: *mut ::std::os::raw::c_void,
        ifaddrs: *mut ifaddrs,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_set_getifaddrs(
        get_func: aeron_getifaddrs_func_t,
        free_func: aeron_freeifaddrs_func_t,
    );
}
unsafe extern "C" {
    pub fn aeron_interface_parse_and_resolve(
        interface_str: *const ::std::os::raw::c_char,
        sockaddr: *mut sockaddr_storage,
        prefixlen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_set_ipv4_wildcard_host_and_port(sockaddr: *mut sockaddr_storage);
}
unsafe extern "C" {
    pub fn aeron_set_ipv6_wildcard_host_and_port(sockaddr: *mut sockaddr_storage);
}
unsafe extern "C" {
    pub fn aeron_ipv4_does_prefix_match(
        in_addr1: *mut in_addr,
        in_addr2: *mut in_addr,
        prefixlen: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipv6_does_prefix_match(
        in6_addr1: *mut in6_addr,
        in6_addr2: *mut in6_addr,
        prefixlen: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipv4_netmask_to_prefixlen(netmask: *mut in_addr) -> usize;
}
unsafe extern "C" {
    pub fn aeron_ipv4_netmask_from_prefixlen(prefixlen: usize) -> u32;
}
unsafe extern "C" {
    pub fn aeron_ipv6_netmask_to_prefixlen(netmask: *mut in6_addr) -> usize;
}
unsafe extern "C" {
    pub fn aeron_find_interface(
        interface_str: *const ::std::os::raw::c_char,
        if_addr: *mut sockaddr_storage,
        if_index: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_find_unicast_interface(
        family: ::std::os::raw::c_int,
        interface_str: *const ::std::os::raw::c_char,
        interface_addr: *mut sockaddr_storage,
        interface_index: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_is_addr_multicast(addr: *mut sockaddr_storage) -> bool;
}
unsafe extern "C" {
    pub fn aeron_is_wildcard_addr(addr: *mut sockaddr_storage) -> bool;
}
unsafe extern "C" {
    pub fn aeron_is_wildcard_port(addr: *mut sockaddr_storage) -> bool;
}
unsafe extern "C" {
    pub fn aeron_format_source_identity(
        buffer: *mut ::std::os::raw::c_char,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_netutil_get_so_buf_lengths(
        default_so_rcvbuf: *mut usize,
        default_so_sndbuf: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_sockaddr_storage_cmp(
        a: *mut sockaddr_storage,
        b: *mut sockaddr_storage,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_retransmit_action_state_enum {
    AERON_RETRANSMIT_ACTION_STATE_DELAYED = 0,
    AERON_RETRANSMIT_ACTION_STATE_LINGERING = 1,
    AERON_RETRANSMIT_ACTION_STATE_INACTIVE = 2,
}
pub use self::aeron_retransmit_action_state_enum as aeron_retransmit_action_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_retransmit_action_stct {
    pub expiry_ns: i64,
    pub term_id: i32,
    pub term_offset: i32,
    pub length: usize,
    pub state: aeron_retransmit_action_state_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_retransmit_action_stct"]
        [::std::mem::size_of::<aeron_retransmit_action_stct>() - 32usize];
    ["Alignment of aeron_retransmit_action_stct"]
        [::std::mem::align_of::<aeron_retransmit_action_stct>() - 8usize];
    ["Offset of field: aeron_retransmit_action_stct::expiry_ns"]
        [::std::mem::offset_of!(aeron_retransmit_action_stct, expiry_ns) - 0usize];
    ["Offset of field: aeron_retransmit_action_stct::term_id"]
        [::std::mem::offset_of!(aeron_retransmit_action_stct, term_id) - 8usize];
    ["Offset of field: aeron_retransmit_action_stct::term_offset"]
        [::std::mem::offset_of!(aeron_retransmit_action_stct, term_offset) - 12usize];
    ["Offset of field: aeron_retransmit_action_stct::length"]
        [::std::mem::offset_of!(aeron_retransmit_action_stct, length) - 16usize];
    ["Offset of field: aeron_retransmit_action_stct::state"]
        [::std::mem::offset_of!(aeron_retransmit_action_stct, state) - 24usize];
};
pub type aeron_retransmit_action_t = aeron_retransmit_action_stct;
pub type aeron_retransmit_handler_resend_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        term_id: i32,
        term_offset: i32,
        length: usize,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_retransmit_handler_stct {
    pub retransmit_action_pool: *mut aeron_retransmit_action_t,
    pub delay_timeout_ns: u64,
    pub linger_timeout_ns: u64,
    pub invalid_packets_counter: *mut i64,
    pub active_retransmit_count: ::std::os::raw::c_int,
    pub has_group_semantics: bool,
    pub max_retransmits: usize,
    pub retransmit_overflow_counter: *mut i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_retransmit_handler_stct"]
        [::std::mem::size_of::<aeron_retransmit_handler_stct>() - 56usize];
    ["Alignment of aeron_retransmit_handler_stct"]
        [::std::mem::align_of::<aeron_retransmit_handler_stct>() - 8usize];
    ["Offset of field: aeron_retransmit_handler_stct::retransmit_action_pool"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, retransmit_action_pool) - 0usize];
    ["Offset of field: aeron_retransmit_handler_stct::delay_timeout_ns"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, delay_timeout_ns) - 8usize];
    ["Offset of field: aeron_retransmit_handler_stct::linger_timeout_ns"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, linger_timeout_ns) - 16usize];
    ["Offset of field: aeron_retransmit_handler_stct::invalid_packets_counter"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, invalid_packets_counter) - 24usize];
    ["Offset of field: aeron_retransmit_handler_stct::active_retransmit_count"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, active_retransmit_count) - 32usize];
    ["Offset of field: aeron_retransmit_handler_stct::has_group_semantics"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, has_group_semantics) - 36usize];
    ["Offset of field: aeron_retransmit_handler_stct::max_retransmits"]
        [::std::mem::offset_of!(aeron_retransmit_handler_stct, max_retransmits) - 40usize];
    ["Offset of field: aeron_retransmit_handler_stct::retransmit_overflow_counter"][::std::mem::offset_of!(
        aeron_retransmit_handler_stct,
        retransmit_overflow_counter
    ) - 48usize];
};
pub type aeron_retransmit_handler_t = aeron_retransmit_handler_stct;
unsafe extern "C" {
    pub fn aeron_retransmit_handler_init(
        handler: *mut aeron_retransmit_handler_t,
        invalid_packets_counter: *mut i64,
        delay_timeout_ns: u64,
        linger_timeout_ns: u64,
        has_group_semantics: bool,
        max_retransmits: u32,
        retransmit_overflow_counter: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_retransmit_handler_close(handler: *mut aeron_retransmit_handler_t);
}
unsafe extern "C" {
    pub fn aeron_retransmit_handler_on_nak(
        handler: *mut aeron_retransmit_handler_t,
        term_id: i32,
        term_offset: i32,
        length: usize,
        term_length: usize,
        mtu_length: usize,
        flow_control: *mut aeron_flow_control_strategy_t,
        now_ns: i64,
        resend: aeron_retransmit_handler_resend_func_t,
        resend_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_retransmit_handler_process_timeouts(
        handler: *mut aeron_retransmit_handler_t,
        now_ns: i64,
        resend: aeron_retransmit_handler_resend_func_t,
        resend_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_network_publication_state_enum {
    AERON_NETWORK_PUBLICATION_STATE_ACTIVE = 0,
    AERON_NETWORK_PUBLICATION_STATE_DRAINING = 1,
    AERON_NETWORK_PUBLICATION_STATE_LINGER = 2,
    AERON_NETWORK_PUBLICATION_STATE_DONE = 3,
}
pub use self::aeron_network_publication_state_enum as aeron_network_publication_state_t;
pub type aeron_send_channel_endpoint_t = aeron_send_channel_endpoint_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_network_publication_stct {
    pub conductor_fields:
        aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct,
    pub conductor_fields_pad: [u8; 112usize],
    pub mapped_raw_log: aeron_mapped_raw_log_t,
    pub pub_pos_position: aeron_position_t,
    pub pub_lmt_position: aeron_position_t,
    pub snd_pos_position: aeron_position_t,
    pub snd_lmt_position: aeron_position_t,
    pub snd_bpe_counter: aeron_atomic_counter_t,
    pub retransmit_handler: aeron_retransmit_handler_t,
    pub log_meta_data: *mut aeron_logbuffer_metadata_t,
    pub endpoint: *mut aeron_send_channel_endpoint_t,
    pub flow_control: *mut aeron_flow_control_strategy_t,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub sender_fields_pad_lhs: [u8; 64usize],
    pub has_initial_connection: bool,
    pub track_sender_limits: bool,
    pub time_of_last_data_or_heartbeat_ns: i64,
    pub current_messages_per_send: usize,
    pub status_message_deadline_ns: i64,
    pub time_of_last_setup_ns: i64,
    pub sender_fields_pad_rhs: [u8; 64usize],
    pub endpoint_address: sockaddr_storage,
    pub log_file_name: *mut ::std::os::raw::c_char,
    pub term_buffer_length: i64,
    pub term_window_length: i64,
    pub trip_gain: i64,
    pub linger_timeout_ns: i64,
    pub unblock_timeout_ns: i64,
    pub connection_timeout_ns: i64,
    pub untethered_window_limit_timeout_ns: i64,
    pub untethered_resting_timeout_ns: i64,
    pub tag: i64,
    pub response_correlation_id: i64,
    pub session_id: i32,
    pub stream_id: i32,
    pub initial_term_id: i32,
    pub starting_term_id: i32,
    pub term_length_mask: i32,
    pub starting_term_offset: usize,
    pub log_file_name_length: usize,
    pub position_bits_to_shift: usize,
    pub mtu_length: usize,
    pub max_messages_per_send: usize,
    pub spies_simulate_connection: bool,
    pub signal_eos: bool,
    pub is_setup_elicited: bool,
    pub is_exclusive: bool,
    pub is_response: bool,
    pub has_receivers: bool,
    pub has_spies: bool,
    pub is_connected: bool,
    pub is_end_of_stream: bool,
    pub has_sender_released: bool,
    pub has_received_unicast_eos: bool,
    pub raw_log_close_func: aeron_raw_log_close_func_t,
    pub raw_log_free_func: aeron_raw_log_free_func_t,
    pub log: aeron_network_publication_stct__bindgen_ty_1,
    pub short_sends_counter: *mut i64,
    pub heartbeats_sent_counter: *mut i64,
    pub sender_flow_control_limits_counter: *mut i64,
    pub retransmits_sent_counter: *mut i64,
    pub retransmitted_bytes_counter: *mut i64,
    pub unblocked_publications_counter: *mut i64,
    pub mapped_bytes_counter: *mut i64,
    pub receiver_liveness_tracker: aeron_int64_counter_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct {
    pub has_reached_end_of_life: bool,
    pub state: aeron_network_publication_state_t,
    pub refcnt: i32,
    pub managed_resource: aeron_driver_managed_resource_t,
    pub subscribable: aeron_subscribable_t,
    pub clean_position: i64,
    pub time_of_last_activity_ns: i64,
    pub last_snd_pos: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct"]
        [::std::mem::size_of::<
            aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct,
        >() - 144usize];
    ["Alignment of aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct"] [:: std :: mem :: align_of :: < aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct > () - 8usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , has_reached_end_of_life) - 0usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::state"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , state) - 4usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::refcnt"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , refcnt) - 8usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::managed_resource"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , managed_resource) - 16usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::subscribable"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , subscribable) - 56usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::clean_position"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , clean_position) - 120usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::time_of_last_activity_ns"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , time_of_last_activity_ns) - 128usize] ;
    ["Offset of field: aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct::last_snd_pos"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct_aeron_network_publication_conductor_fields_stct , last_snd_pos) - 136usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_network_publication_stct__bindgen_ty_1 {
    pub untethered_subscription_state_change: aeron_untethered_subscription_state_change_func_t,
    pub resend: aeron_driver_resend_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_network_publication_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_network_publication_stct__bindgen_ty_1>() - 16usize];
    ["Alignment of aeron_network_publication_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_network_publication_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_network_publication_stct__bindgen_ty_1::untethered_subscription_state_change"] [:: std :: mem :: offset_of ! (aeron_network_publication_stct__bindgen_ty_1 , untethered_subscription_state_change) - 0usize] ;
    ["Offset of field: aeron_network_publication_stct__bindgen_ty_1::resend"]
        [::std::mem::offset_of!(aeron_network_publication_stct__bindgen_ty_1, resend) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_network_publication_stct"]
        [::std::mem::size_of::<aeron_network_publication_stct>() - 1112usize];
    ["Alignment of aeron_network_publication_stct"]
        [::std::mem::align_of::<aeron_network_publication_stct>() - 8usize];
    ["Offset of field: aeron_network_publication_stct::conductor_fields"]
        [::std::mem::offset_of!(aeron_network_publication_stct, conductor_fields) - 0usize];
    ["Offset of field: aeron_network_publication_stct::conductor_fields_pad"]
        [::std::mem::offset_of!(aeron_network_publication_stct, conductor_fields_pad) - 144usize];
    ["Offset of field: aeron_network_publication_stct::mapped_raw_log"]
        [::std::mem::offset_of!(aeron_network_publication_stct, mapped_raw_log) - 256usize];
    ["Offset of field: aeron_network_publication_stct::pub_pos_position"]
        [::std::mem::offset_of!(aeron_network_publication_stct, pub_pos_position) - 344usize];
    ["Offset of field: aeron_network_publication_stct::pub_lmt_position"]
        [::std::mem::offset_of!(aeron_network_publication_stct, pub_lmt_position) - 360usize];
    ["Offset of field: aeron_network_publication_stct::snd_pos_position"]
        [::std::mem::offset_of!(aeron_network_publication_stct, snd_pos_position) - 376usize];
    ["Offset of field: aeron_network_publication_stct::snd_lmt_position"]
        [::std::mem::offset_of!(aeron_network_publication_stct, snd_lmt_position) - 392usize];
    ["Offset of field: aeron_network_publication_stct::snd_bpe_counter"]
        [::std::mem::offset_of!(aeron_network_publication_stct, snd_bpe_counter) - 408usize];
    ["Offset of field: aeron_network_publication_stct::retransmit_handler"]
        [::std::mem::offset_of!(aeron_network_publication_stct, retransmit_handler) - 424usize];
    ["Offset of field: aeron_network_publication_stct::log_meta_data"]
        [::std::mem::offset_of!(aeron_network_publication_stct, log_meta_data) - 480usize];
    ["Offset of field: aeron_network_publication_stct::endpoint"]
        [::std::mem::offset_of!(aeron_network_publication_stct, endpoint) - 488usize];
    ["Offset of field: aeron_network_publication_stct::flow_control"]
        [::std::mem::offset_of!(aeron_network_publication_stct, flow_control) - 496usize];
    ["Offset of field: aeron_network_publication_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_network_publication_stct, cached_clock) - 504usize];
    ["Offset of field: aeron_network_publication_stct::sender_fields_pad_lhs"]
        [::std::mem::offset_of!(aeron_network_publication_stct, sender_fields_pad_lhs) - 512usize];
    ["Offset of field: aeron_network_publication_stct::has_initial_connection"]
        [::std::mem::offset_of!(aeron_network_publication_stct, has_initial_connection) - 576usize];
    ["Offset of field: aeron_network_publication_stct::track_sender_limits"]
        [::std::mem::offset_of!(aeron_network_publication_stct, track_sender_limits) - 577usize];
    ["Offset of field: aeron_network_publication_stct::time_of_last_data_or_heartbeat_ns"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        time_of_last_data_or_heartbeat_ns
    )
        - 584usize];
    ["Offset of field: aeron_network_publication_stct::current_messages_per_send"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        current_messages_per_send
    ) - 592usize];
    ["Offset of field: aeron_network_publication_stct::status_message_deadline_ns"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        status_message_deadline_ns
    ) - 600usize];
    ["Offset of field: aeron_network_publication_stct::time_of_last_setup_ns"]
        [::std::mem::offset_of!(aeron_network_publication_stct, time_of_last_setup_ns) - 608usize];
    ["Offset of field: aeron_network_publication_stct::sender_fields_pad_rhs"]
        [::std::mem::offset_of!(aeron_network_publication_stct, sender_fields_pad_rhs) - 616usize];
    ["Offset of field: aeron_network_publication_stct::endpoint_address"]
        [::std::mem::offset_of!(aeron_network_publication_stct, endpoint_address) - 680usize];
    ["Offset of field: aeron_network_publication_stct::log_file_name"]
        [::std::mem::offset_of!(aeron_network_publication_stct, log_file_name) - 808usize];
    ["Offset of field: aeron_network_publication_stct::term_buffer_length"]
        [::std::mem::offset_of!(aeron_network_publication_stct, term_buffer_length) - 816usize];
    ["Offset of field: aeron_network_publication_stct::term_window_length"]
        [::std::mem::offset_of!(aeron_network_publication_stct, term_window_length) - 824usize];
    ["Offset of field: aeron_network_publication_stct::trip_gain"]
        [::std::mem::offset_of!(aeron_network_publication_stct, trip_gain) - 832usize];
    ["Offset of field: aeron_network_publication_stct::linger_timeout_ns"]
        [::std::mem::offset_of!(aeron_network_publication_stct, linger_timeout_ns) - 840usize];
    ["Offset of field: aeron_network_publication_stct::unblock_timeout_ns"]
        [::std::mem::offset_of!(aeron_network_publication_stct, unblock_timeout_ns) - 848usize];
    ["Offset of field: aeron_network_publication_stct::connection_timeout_ns"]
        [::std::mem::offset_of!(aeron_network_publication_stct, connection_timeout_ns) - 856usize];
    ["Offset of field: aeron_network_publication_stct::untethered_window_limit_timeout_ns"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        untethered_window_limit_timeout_ns
    )
        - 864usize];
    ["Offset of field: aeron_network_publication_stct::untethered_resting_timeout_ns"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        untethered_resting_timeout_ns
    )
        - 872usize];
    ["Offset of field: aeron_network_publication_stct::tag"]
        [::std::mem::offset_of!(aeron_network_publication_stct, tag) - 880usize];
    ["Offset of field: aeron_network_publication_stct::response_correlation_id"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        response_correlation_id
    ) - 888usize];
    ["Offset of field: aeron_network_publication_stct::session_id"]
        [::std::mem::offset_of!(aeron_network_publication_stct, session_id) - 896usize];
    ["Offset of field: aeron_network_publication_stct::stream_id"]
        [::std::mem::offset_of!(aeron_network_publication_stct, stream_id) - 900usize];
    ["Offset of field: aeron_network_publication_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_network_publication_stct, initial_term_id) - 904usize];
    ["Offset of field: aeron_network_publication_stct::starting_term_id"]
        [::std::mem::offset_of!(aeron_network_publication_stct, starting_term_id) - 908usize];
    ["Offset of field: aeron_network_publication_stct::term_length_mask"]
        [::std::mem::offset_of!(aeron_network_publication_stct, term_length_mask) - 912usize];
    ["Offset of field: aeron_network_publication_stct::starting_term_offset"]
        [::std::mem::offset_of!(aeron_network_publication_stct, starting_term_offset) - 920usize];
    ["Offset of field: aeron_network_publication_stct::log_file_name_length"]
        [::std::mem::offset_of!(aeron_network_publication_stct, log_file_name_length) - 928usize];
    ["Offset of field: aeron_network_publication_stct::position_bits_to_shift"]
        [::std::mem::offset_of!(aeron_network_publication_stct, position_bits_to_shift) - 936usize];
    ["Offset of field: aeron_network_publication_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_network_publication_stct, mtu_length) - 944usize];
    ["Offset of field: aeron_network_publication_stct::max_messages_per_send"]
        [::std::mem::offset_of!(aeron_network_publication_stct, max_messages_per_send) - 952usize];
    ["Offset of field: aeron_network_publication_stct::spies_simulate_connection"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        spies_simulate_connection
    ) - 960usize];
    ["Offset of field: aeron_network_publication_stct::signal_eos"]
        [::std::mem::offset_of!(aeron_network_publication_stct, signal_eos) - 961usize];
    ["Offset of field: aeron_network_publication_stct::is_setup_elicited"]
        [::std::mem::offset_of!(aeron_network_publication_stct, is_setup_elicited) - 962usize];
    ["Offset of field: aeron_network_publication_stct::is_exclusive"]
        [::std::mem::offset_of!(aeron_network_publication_stct, is_exclusive) - 963usize];
    ["Offset of field: aeron_network_publication_stct::is_response"]
        [::std::mem::offset_of!(aeron_network_publication_stct, is_response) - 964usize];
    ["Offset of field: aeron_network_publication_stct::has_receivers"]
        [::std::mem::offset_of!(aeron_network_publication_stct, has_receivers) - 965usize];
    ["Offset of field: aeron_network_publication_stct::has_spies"]
        [::std::mem::offset_of!(aeron_network_publication_stct, has_spies) - 966usize];
    ["Offset of field: aeron_network_publication_stct::is_connected"]
        [::std::mem::offset_of!(aeron_network_publication_stct, is_connected) - 967usize];
    ["Offset of field: aeron_network_publication_stct::is_end_of_stream"]
        [::std::mem::offset_of!(aeron_network_publication_stct, is_end_of_stream) - 968usize];
    ["Offset of field: aeron_network_publication_stct::has_sender_released"]
        [::std::mem::offset_of!(aeron_network_publication_stct, has_sender_released) - 969usize];
    ["Offset of field: aeron_network_publication_stct::has_received_unicast_eos"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        has_received_unicast_eos
    ) - 970usize];
    ["Offset of field: aeron_network_publication_stct::raw_log_close_func"]
        [::std::mem::offset_of!(aeron_network_publication_stct, raw_log_close_func) - 976usize];
    ["Offset of field: aeron_network_publication_stct::raw_log_free_func"]
        [::std::mem::offset_of!(aeron_network_publication_stct, raw_log_free_func) - 984usize];
    ["Offset of field: aeron_network_publication_stct::log"]
        [::std::mem::offset_of!(aeron_network_publication_stct, log) - 992usize];
    ["Offset of field: aeron_network_publication_stct::short_sends_counter"]
        [::std::mem::offset_of!(aeron_network_publication_stct, short_sends_counter) - 1008usize];
    ["Offset of field: aeron_network_publication_stct::heartbeats_sent_counter"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        heartbeats_sent_counter
    ) - 1016usize];
    ["Offset of field: aeron_network_publication_stct::sender_flow_control_limits_counter"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        sender_flow_control_limits_counter
    )
        - 1024usize];
    ["Offset of field: aeron_network_publication_stct::retransmits_sent_counter"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        retransmits_sent_counter
    ) - 1032usize];
    ["Offset of field: aeron_network_publication_stct::retransmitted_bytes_counter"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        retransmitted_bytes_counter
    ) - 1040usize];
    ["Offset of field: aeron_network_publication_stct::unblocked_publications_counter"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        unblocked_publications_counter
    )
        - 1048usize];
    ["Offset of field: aeron_network_publication_stct::mapped_bytes_counter"]
        [::std::mem::offset_of!(aeron_network_publication_stct, mapped_bytes_counter) - 1056usize];
    ["Offset of field: aeron_network_publication_stct::receiver_liveness_tracker"][::std::mem::offset_of!(
        aeron_network_publication_stct,
        receiver_liveness_tracker
    ) - 1064usize];
};
unsafe extern "C" {
    pub fn aeron_network_publication_create(
        publication: *mut *mut aeron_network_publication_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
        context: *mut aeron_driver_context_t,
        registration_id: i64,
        session_id: i32,
        stream_id: i32,
        initial_term_id: i32,
        pub_pos_position: *mut aeron_position_t,
        pub_lmt_position: *mut aeron_position_t,
        snd_pos_position: *mut aeron_position_t,
        snd_lmt_position: *mut aeron_position_t,
        snd_bpe_counter: *mut aeron_atomic_counter_t,
        flow_control_strategy: *mut aeron_flow_control_strategy_t,
        params: *mut aeron_driver_uri_publication_params_t,
        is_exclusive: bool,
        system_counters: *mut aeron_system_counters_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_close(
        counters_manager: *mut aeron_counters_manager_t,
        publication: *mut aeron_network_publication_t,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_free(publication: *mut aeron_network_publication_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_network_publication_incref(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_network_publication_decref(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_network_publication_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        publication: *mut aeron_network_publication_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_send(
        publication: *mut aeron_network_publication_t,
        now_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_resend(
        clientd: *mut ::std::os::raw::c_void,
        term_id: i32,
        term_offset: i32,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_send_data(
        publication: *mut aeron_network_publication_t,
        now_ns: i64,
        snd_pos: i64,
        term_offset: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_on_nak(
        publication: *mut aeron_network_publication_t,
        term_id: i32,
        term_offset: i32,
        length: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_on_status_message(
        publication: *mut aeron_network_publication_t,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        buffer: *const u8,
        length: usize,
        addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_on_rttm(
        publication: *mut aeron_network_publication_t,
        buffer: *const u8,
        length: usize,
        addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_clean_buffer(
        publication: *mut aeron_network_publication_t,
        position: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_update_pub_pos_and_lmt(
        publication: *mut aeron_network_publication_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_network_publication_check_for_blocked_publisher(
        publication: *mut aeron_network_publication_t,
        now_ns: i64,
        producer_position: i64,
        snd_pos: i64,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_parsed_address_stct {
    pub host: [::std::os::raw::c_char; 384usize],
    pub port: [::std::os::raw::c_char; 8usize],
    pub ip_version_hint: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_parsed_address_stct"]
        [::std::mem::size_of::<aeron_parsed_address_stct>() - 396usize];
    ["Alignment of aeron_parsed_address_stct"]
        [::std::mem::align_of::<aeron_parsed_address_stct>() - 4usize];
    ["Offset of field: aeron_parsed_address_stct::host"]
        [::std::mem::offset_of!(aeron_parsed_address_stct, host) - 0usize];
    ["Offset of field: aeron_parsed_address_stct::port"]
        [::std::mem::offset_of!(aeron_parsed_address_stct, port) - 384usize];
    ["Offset of field: aeron_parsed_address_stct::ip_version_hint"]
        [::std::mem::offset_of!(aeron_parsed_address_stct, ip_version_hint) - 392usize];
};
pub type aeron_parsed_address_t = aeron_parsed_address_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_parsed_interface_stct {
    pub host: [::std::os::raw::c_char; 384usize],
    pub port: [::std::os::raw::c_char; 8usize],
    pub prefix: [::std::os::raw::c_char; 8usize],
    pub ip_version_hint: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_parsed_interface_stct"]
        [::std::mem::size_of::<aeron_parsed_interface_stct>() - 404usize];
    ["Alignment of aeron_parsed_interface_stct"]
        [::std::mem::align_of::<aeron_parsed_interface_stct>() - 4usize];
    ["Offset of field: aeron_parsed_interface_stct::host"]
        [::std::mem::offset_of!(aeron_parsed_interface_stct, host) - 0usize];
    ["Offset of field: aeron_parsed_interface_stct::port"]
        [::std::mem::offset_of!(aeron_parsed_interface_stct, port) - 384usize];
    ["Offset of field: aeron_parsed_interface_stct::prefix"]
        [::std::mem::offset_of!(aeron_parsed_interface_stct, prefix) - 392usize];
    ["Offset of field: aeron_parsed_interface_stct::ip_version_hint"]
        [::std::mem::offset_of!(aeron_parsed_interface_stct, ip_version_hint) - 400usize];
};
pub type aeron_parsed_interface_t = aeron_parsed_interface_stct;
unsafe extern "C" {
    pub fn aeron_parse_size64(
        str_: *const ::std::os::raw::c_char,
        result: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_parse_duration_ns(
        str_: *const ::std::os::raw::c_char,
        result: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_parse_bool(str_: *const ::std::os::raw::c_char, def: bool) -> bool;
}
unsafe extern "C" {
    pub fn aeron_address_split(
        address_str: *const ::std::os::raw::c_char,
        parsed_address: *mut aeron_parsed_address_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_interface_split(
        interface_str: *const ::std::os::raw::c_char,
        parsed_interface: *mut aeron_parsed_interface_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_parse_get_line(
        line: *mut ::std::os::raw::c_char,
        max_length: usize,
        buffer: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_name_resolver_resolve_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        resolver: *mut aeron_name_resolver_t,
        name: *const ::std::os::raw::c_char,
        uri_param_name: *const ::std::os::raw::c_char,
        is_re_resolution: bool,
        address: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " Resolves a name to a host:port string.\n\n @return 0 if not found, 1 if found, -1 on error."]
pub type aeron_name_resolver_lookup_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        resolver: *mut aeron_name_resolver_t,
        name: *const ::std::os::raw::c_char,
        uri_param_name: *const ::std::os::raw::c_char,
        is_re_lookup: bool,
        resolved_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_name_resolver_do_work_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        resolver: *mut aeron_name_resolver_t,
        now_ms: i64,
    ) -> ::std::os::raw::c_int,
>;
pub type aeron_name_resolver_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(resolver: *mut aeron_name_resolver_t) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_name_resolver_stct {
    pub name: *const ::std::os::raw::c_char,
    pub lookup_func: aeron_name_resolver_lookup_func_t,
    pub resolve_func: aeron_name_resolver_resolve_func_t,
    pub do_work_func: aeron_name_resolver_do_work_func_t,
    pub close_func: aeron_name_resolver_close_func_t,
    pub state: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_name_resolver_stct"]
        [::std::mem::size_of::<aeron_name_resolver_stct>() - 48usize];
    ["Alignment of aeron_name_resolver_stct"]
        [::std::mem::align_of::<aeron_name_resolver_stct>() - 8usize];
    ["Offset of field: aeron_name_resolver_stct::name"]
        [::std::mem::offset_of!(aeron_name_resolver_stct, name) - 0usize];
    ["Offset of field: aeron_name_resolver_stct::lookup_func"]
        [::std::mem::offset_of!(aeron_name_resolver_stct, lookup_func) - 8usize];
    ["Offset of field: aeron_name_resolver_stct::resolve_func"]
        [::std::mem::offset_of!(aeron_name_resolver_stct, resolve_func) - 16usize];
    ["Offset of field: aeron_name_resolver_stct::do_work_func"]
        [::std::mem::offset_of!(aeron_name_resolver_stct, do_work_func) - 24usize];
    ["Offset of field: aeron_name_resolver_stct::close_func"]
        [::std::mem::offset_of!(aeron_name_resolver_stct, close_func) - 32usize];
    ["Offset of field: aeron_name_resolver_stct::state"]
        [::std::mem::offset_of!(aeron_name_resolver_stct, state) - 40usize];
};
unsafe extern "C" {
    pub fn aeron_name_resolver_supplier_load(
        name: *const ::std::os::raw::c_char,
    ) -> aeron_name_resolver_supplier_func_t;
}
unsafe extern "C" {
    pub fn aeron_name_resolver_init(
        resolver: *mut aeron_name_resolver_t,
        args: *const ::std::os::raw::c_char,
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_default_name_resolver_supplier(
        resolver: *mut aeron_name_resolver_t,
        args: *const ::std::os::raw::c_char,
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_default_name_resolver_resolve(
        resolver: *mut aeron_name_resolver_t,
        name: *const ::std::os::raw::c_char,
        uri_param_name: *const ::std::os::raw::c_char,
        is_re_resolution: bool,
        address: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_default_name_resolver_lookup(
        resolver: *mut aeron_name_resolver_t,
        name: *const ::std::os::raw::c_char,
        uri_param_name: *const ::std::os::raw::c_char,
        is_re_lookup: bool,
        resolved_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_default_name_resolver_do_work(
        resolver: *mut aeron_name_resolver_t,
        now_ms: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_default_name_resolver_close(
        resolver: *mut aeron_name_resolver_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_name_resolver_async_resolve_stct {
    pub uri_param_name: *const ::std::os::raw::c_char,
    pub is_re_resolution: bool,
    pub sockaddr: sockaddr_storage,
    pub endpoint_name: [::std::os::raw::c_char; 385usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_name_resolver_async_resolve_stct"]
        [::std::mem::size_of::<aeron_name_resolver_async_resolve_stct>() - 536usize];
    ["Alignment of aeron_name_resolver_async_resolve_stct"]
        [::std::mem::align_of::<aeron_name_resolver_async_resolve_stct>() - 8usize];
    ["Offset of field: aeron_name_resolver_async_resolve_stct::uri_param_name"]
        [::std::mem::offset_of!(aeron_name_resolver_async_resolve_stct, uri_param_name) - 0usize];
    ["Offset of field: aeron_name_resolver_async_resolve_stct::is_re_resolution"]
        [::std::mem::offset_of!(aeron_name_resolver_async_resolve_stct, is_re_resolution) - 8usize];
    ["Offset of field: aeron_name_resolver_async_resolve_stct::sockaddr"]
        [::std::mem::offset_of!(aeron_name_resolver_async_resolve_stct, sockaddr) - 16usize];
    ["Offset of field: aeron_name_resolver_async_resolve_stct::endpoint_name"]
        [::std::mem::offset_of!(aeron_name_resolver_async_resolve_stct, endpoint_name) - 144usize];
};
pub type aeron_name_resolver_async_resolve_t = aeron_name_resolver_async_resolve_stct;
unsafe extern "C" {
    pub fn aeron_name_resolver_resolve_host_and_port(
        resolver: *mut aeron_name_resolver_t,
        name: *const ::std::os::raw::c_char,
        uri_param_name: *const ::std::os::raw::c_char,
        is_re_resolution: bool,
        sockaddr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_udp_channel_control_mode_en {
    AERON_UDP_CHANNEL_CONTROL_MODE_NONE = 0,
    AERON_UDP_CHANNEL_CONTROL_MODE_DYNAMIC = 1,
    AERON_UDP_CHANNEL_CONTROL_MODE_MANUAL = 2,
    AERON_UDP_CHANNEL_CONTROL_MODE_RESPONSE = 3,
}
pub use self::aeron_udp_channel_control_mode_en as aeron_udp_channel_control_mode;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aeron_udp_channel_stct {
    pub original_uri: [::std::os::raw::c_char; 384usize],
    pub canonical_form: [::std::os::raw::c_char; 384usize],
    pub uri: aeron_uri_t,
    pub remote_data: sockaddr_storage,
    pub local_data: sockaddr_storage,
    pub remote_control: sockaddr_storage,
    pub local_control: sockaddr_storage,
    pub tag_id: i64,
    pub interface_index: ::std::os::raw::c_uint,
    pub uri_length: usize,
    pub canonical_length: usize,
    pub multicast_ttl: u8,
    pub has_explicit_endpoint: bool,
    pub has_explicit_control: bool,
    pub control_mode: aeron_udp_channel_control_mode,
    pub is_multicast: bool,
    pub ats_status: aeron_uri_ats_status_t,
    pub socket_sndbuf_length: usize,
    pub socket_rcvbuf_length: usize,
    pub receiver_window_length: usize,
    pub media_rcv_timestamp_offset: i32,
    pub channel_rcv_timestamp_offset: i32,
    pub channel_snd_timestamp_offset: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_stct"][::std::mem::size_of::<aeron_udp_channel_stct>() - 1832usize];
    ["Alignment of aeron_udp_channel_stct"]
        [::std::mem::align_of::<aeron_udp_channel_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_stct::original_uri"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, original_uri) - 0usize];
    ["Offset of field: aeron_udp_channel_stct::canonical_form"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, canonical_form) - 384usize];
    ["Offset of field: aeron_udp_channel_stct::uri"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, uri) - 768usize];
    ["Offset of field: aeron_udp_channel_stct::remote_data"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, remote_data) - 1232usize];
    ["Offset of field: aeron_udp_channel_stct::local_data"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, local_data) - 1360usize];
    ["Offset of field: aeron_udp_channel_stct::remote_control"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, remote_control) - 1488usize];
    ["Offset of field: aeron_udp_channel_stct::local_control"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, local_control) - 1616usize];
    ["Offset of field: aeron_udp_channel_stct::tag_id"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, tag_id) - 1744usize];
    ["Offset of field: aeron_udp_channel_stct::interface_index"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, interface_index) - 1752usize];
    ["Offset of field: aeron_udp_channel_stct::uri_length"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, uri_length) - 1760usize];
    ["Offset of field: aeron_udp_channel_stct::canonical_length"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, canonical_length) - 1768usize];
    ["Offset of field: aeron_udp_channel_stct::multicast_ttl"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, multicast_ttl) - 1776usize];
    ["Offset of field: aeron_udp_channel_stct::has_explicit_endpoint"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, has_explicit_endpoint) - 1777usize];
    ["Offset of field: aeron_udp_channel_stct::has_explicit_control"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, has_explicit_control) - 1778usize];
    ["Offset of field: aeron_udp_channel_stct::control_mode"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, control_mode) - 1780usize];
    ["Offset of field: aeron_udp_channel_stct::is_multicast"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, is_multicast) - 1784usize];
    ["Offset of field: aeron_udp_channel_stct::ats_status"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, ats_status) - 1788usize];
    ["Offset of field: aeron_udp_channel_stct::socket_sndbuf_length"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, socket_sndbuf_length) - 1792usize];
    ["Offset of field: aeron_udp_channel_stct::socket_rcvbuf_length"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, socket_rcvbuf_length) - 1800usize];
    ["Offset of field: aeron_udp_channel_stct::receiver_window_length"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, receiver_window_length) - 1808usize];
    ["Offset of field: aeron_udp_channel_stct::media_rcv_timestamp_offset"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, media_rcv_timestamp_offset) - 1816usize];
    ["Offset of field: aeron_udp_channel_stct::channel_rcv_timestamp_offset"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, channel_rcv_timestamp_offset) - 1820usize];
    ["Offset of field: aeron_udp_channel_stct::channel_snd_timestamp_offset"]
        [::std::mem::offset_of!(aeron_udp_channel_stct, channel_snd_timestamp_offset) - 1824usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_async_parse_stct {
    pub channel: *mut aeron_udp_channel_t,
    pub is_destination: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_async_parse_stct"]
        [::std::mem::size_of::<aeron_udp_channel_async_parse_stct>() - 16usize];
    ["Alignment of aeron_udp_channel_async_parse_stct"]
        [::std::mem::align_of::<aeron_udp_channel_async_parse_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_async_parse_stct::channel"]
        [::std::mem::offset_of!(aeron_udp_channel_async_parse_stct, channel) - 0usize];
    ["Offset of field: aeron_udp_channel_async_parse_stct::is_destination"]
        [::std::mem::offset_of!(aeron_udp_channel_async_parse_stct, is_destination) - 8usize];
};
pub type aeron_udp_channel_async_parse_t = aeron_udp_channel_async_parse_stct;
unsafe extern "C" {
    pub fn aeron_udp_channel_do_initial_parse(
        uri_length: usize,
        uri: *const ::std::os::raw::c_char,
        async_parse: *mut aeron_udp_channel_async_parse_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_finish_parse(
        resolver: *mut aeron_name_resolver_t,
        async_parse: *mut aeron_udp_channel_async_parse_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_parse(
        uri_length: usize,
        uri: *const ::std::os::raw::c_char,
        resolver: *mut aeron_name_resolver_t,
        channel: *mut *mut aeron_udp_channel_t,
        is_destination: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_delete(channel: *mut aeron_udp_channel_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_transport_params_stct {
    pub socket_rcvbuf: usize,
    pub socket_sndbuf: usize,
    pub mtu_length: usize,
    pub multicast_if_index: ::std::os::raw::c_uint,
    pub ttl: u8,
    pub is_media_timestamping: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_transport_params_stct"]
        [::std::mem::size_of::<aeron_udp_channel_transport_params_stct>() - 32usize];
    ["Alignment of aeron_udp_channel_transport_params_stct"]
        [::std::mem::align_of::<aeron_udp_channel_transport_params_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_transport_params_stct::socket_rcvbuf"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_params_stct, socket_rcvbuf) - 0usize];
    ["Offset of field: aeron_udp_channel_transport_params_stct::socket_sndbuf"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_params_stct, socket_sndbuf) - 8usize];
    ["Offset of field: aeron_udp_channel_transport_params_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_params_stct, mtu_length) - 16usize];
    ["Offset of field: aeron_udp_channel_transport_params_stct::multicast_if_index"][::std::mem::offset_of!(
        aeron_udp_channel_transport_params_stct,
        multicast_if_index
    ) - 24usize];
    ["Offset of field: aeron_udp_channel_transport_params_stct::ttl"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_params_stct, ttl) - 28usize];
    ["Offset of field: aeron_udp_channel_transport_params_stct::is_media_timestamping"][::std::mem::offset_of!(
        aeron_udp_channel_transport_params_stct,
        is_media_timestamping
    )
        - 29usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_transport_stct {
    pub fd: aeron_socket_t,
    pub recv_fd: aeron_socket_t,
    pub data_paths: *mut aeron_udp_channel_data_paths_t,
    pub connected_address: *mut sockaddr_storage,
    pub dispatch_clientd: *mut ::std::os::raw::c_void,
    pub bindings_clientd: *mut ::std::os::raw::c_void,
    pub destination_clientd: *mut ::std::os::raw::c_void,
    pub interceptor_clientds: [*mut ::std::os::raw::c_void; 2usize],
    pub error_log: *mut aeron_distinct_error_log_t,
    pub errors_counter: *mut i64,
    pub timestamp_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_transport_stct"]
        [::std::mem::size_of::<aeron_udp_channel_transport_stct>() - 88usize];
    ["Alignment of aeron_udp_channel_transport_stct"]
        [::std::mem::align_of::<aeron_udp_channel_transport_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_transport_stct::fd"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, fd) - 0usize];
    ["Offset of field: aeron_udp_channel_transport_stct::recv_fd"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, recv_fd) - 4usize];
    ["Offset of field: aeron_udp_channel_transport_stct::data_paths"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, data_paths) - 8usize];
    ["Offset of field: aeron_udp_channel_transport_stct::connected_address"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, connected_address) - 16usize];
    ["Offset of field: aeron_udp_channel_transport_stct::dispatch_clientd"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, dispatch_clientd) - 24usize];
    ["Offset of field: aeron_udp_channel_transport_stct::bindings_clientd"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, bindings_clientd) - 32usize];
    ["Offset of field: aeron_udp_channel_transport_stct::destination_clientd"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, destination_clientd) - 40usize];
    ["Offset of field: aeron_udp_channel_transport_stct::interceptor_clientds"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, interceptor_clientds) - 48usize];
    ["Offset of field: aeron_udp_channel_transport_stct::error_log"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, error_log) - 64usize];
    ["Offset of field: aeron_udp_channel_transport_stct::errors_counter"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, errors_counter) - 72usize];
    ["Offset of field: aeron_udp_channel_transport_stct::timestamp_flags"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_stct, timestamp_flags) - 80usize];
};
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_init(
        transport: *mut aeron_udp_channel_transport_t,
        bind_addr: *mut sockaddr_storage,
        multicast_if_addr: *mut sockaddr_storage,
        connect_addr: *mut sockaddr_storage,
        params: *mut aeron_udp_channel_transport_params_t,
        context: *mut aeron_driver_context_t,
        affinity: aeron_udp_channel_transport_affinity_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_reconnect(
        transport: *mut aeron_udp_channel_transport_t,
        connect_addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_close(
        transport: *mut aeron_udp_channel_transport_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_recvmmsg(
        transport: *mut aeron_udp_channel_transport_t,
        msgvec: *mut mmsghdr,
        vlen: usize,
        bytes_rcved: *mut i64,
        recv_func: aeron_udp_transport_recv_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_send(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        transport: *mut aeron_udp_channel_transport_t,
        address: *mut sockaddr_storage,
        iov: *mut iovec,
        iov_length: usize,
        bytes_sent: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_get_so_rcvbuf(
        transport: *mut aeron_udp_channel_transport_t,
        so_rcvbuf: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_channel_transport_bind_addr_and_port(
        transport: *mut aeron_udp_channel_transport_t,
        buffer: *mut ::std::os::raw::c_char,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_destination_entry_stct {
    pub padding_before: [u8; 64usize],
    pub time_of_last_activity_ns: i64,
    pub destination_timeout_ns: i64,
    pub receiver_id: i64,
    pub registration_id: i64,
    pub is_receiver_id_valid: bool,
    pub uri: *mut aeron_uri_t,
    pub addr: sockaddr_storage,
    pub padding_after: [u8; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_destination_entry_stct"]
        [::std::mem::size_of::<aeron_udp_destination_entry_stct>() - 304usize];
    ["Alignment of aeron_udp_destination_entry_stct"]
        [::std::mem::align_of::<aeron_udp_destination_entry_stct>() - 8usize];
    ["Offset of field: aeron_udp_destination_entry_stct::padding_before"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, padding_before) - 0usize];
    ["Offset of field: aeron_udp_destination_entry_stct::time_of_last_activity_ns"][::std::mem::offset_of!(
        aeron_udp_destination_entry_stct,
        time_of_last_activity_ns
    ) - 64usize];
    ["Offset of field: aeron_udp_destination_entry_stct::destination_timeout_ns"][::std::mem::offset_of!(
        aeron_udp_destination_entry_stct,
        destination_timeout_ns
    ) - 72usize];
    ["Offset of field: aeron_udp_destination_entry_stct::receiver_id"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, receiver_id) - 80usize];
    ["Offset of field: aeron_udp_destination_entry_stct::registration_id"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, registration_id) - 88usize];
    ["Offset of field: aeron_udp_destination_entry_stct::is_receiver_id_valid"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, is_receiver_id_valid) - 96usize];
    ["Offset of field: aeron_udp_destination_entry_stct::uri"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, uri) - 104usize];
    ["Offset of field: aeron_udp_destination_entry_stct::addr"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, addr) - 112usize];
    ["Offset of field: aeron_udp_destination_entry_stct::padding_after"]
        [::std::mem::offset_of!(aeron_udp_destination_entry_stct, padding_after) - 240usize];
};
pub type aeron_udp_destination_entry_t = aeron_udp_destination_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_destination_tracker_stct {
    pub padding_before: [u8; 64usize],
    pub destinations:
        aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct,
    pub is_manual_control_mode: bool,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub destination_timeout_ns: i64,
    pub data_paths: *mut aeron_udp_channel_data_paths_t,
    pub num_destinations_addr: *mut i64,
    pub round_robin_index: ::std::os::raw::c_int,
    pub padding_after: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct {
    pub array: *mut aeron_udp_destination_entry_t,
    pub length: usize,
    pub capacity: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct"] [:: std :: mem :: size_of :: < aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct > () - 24usize] ;
    ["Alignment of aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct"] [:: std :: mem :: align_of :: < aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct > () - 8usize] ;
    ["Offset of field: aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct::array"] [:: std :: mem :: offset_of ! (aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct , array) - 0usize] ;
    ["Offset of field: aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct::length"] [:: std :: mem :: offset_of ! (aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct , length) - 8usize] ;
    ["Offset of field: aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct::capacity"] [:: std :: mem :: offset_of ! (aeron_udp_destination_tracker_stct_aeron_udp_destination_tracker_destinations_stct , capacity) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_destination_tracker_stct"]
        [::std::mem::size_of::<aeron_udp_destination_tracker_stct>() - 200usize];
    ["Alignment of aeron_udp_destination_tracker_stct"]
        [::std::mem::align_of::<aeron_udp_destination_tracker_stct>() - 8usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::padding_before"]
        [::std::mem::offset_of!(aeron_udp_destination_tracker_stct, padding_before) - 0usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::destinations"]
        [::std::mem::offset_of!(aeron_udp_destination_tracker_stct, destinations) - 64usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::is_manual_control_mode"][::std::mem::offset_of!(
        aeron_udp_destination_tracker_stct,
        is_manual_control_mode
    ) - 88usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_udp_destination_tracker_stct, cached_clock) - 96usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::destination_timeout_ns"][::std::mem::offset_of!(
        aeron_udp_destination_tracker_stct,
        destination_timeout_ns
    ) - 104usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::data_paths"]
        [::std::mem::offset_of!(aeron_udp_destination_tracker_stct, data_paths) - 112usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::num_destinations_addr"][::std::mem::offset_of!(
        aeron_udp_destination_tracker_stct,
        num_destinations_addr
    ) - 120usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::round_robin_index"]
        [::std::mem::offset_of!(aeron_udp_destination_tracker_stct, round_robin_index) - 128usize];
    ["Offset of field: aeron_udp_destination_tracker_stct::padding_after"]
        [::std::mem::offset_of!(aeron_udp_destination_tracker_stct, padding_after) - 132usize];
};
pub type aeron_udp_destination_tracker_t = aeron_udp_destination_tracker_stct;
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_init(
        tracker: *mut aeron_udp_destination_tracker_t,
        data_paths: *mut aeron_udp_channel_data_paths_t,
        cached_clock: *mut aeron_clock_cache_t,
        is_manual_control_model: bool,
        timeout_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_close(
        tracker: *mut aeron_udp_destination_tracker_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_send(
        tracker: *mut aeron_udp_destination_tracker_t,
        transport: *mut aeron_udp_channel_transport_t,
        iov: *mut iovec,
        iov_length: usize,
        bytes_sent: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_on_status_message(
        tracker: *mut aeron_udp_destination_tracker_t,
        buffer: *const u8,
        len: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_manual_add_destination(
        tracker: *mut aeron_udp_destination_tracker_t,
        now_ns: i64,
        uri: *mut aeron_uri_t,
        addr: *mut sockaddr_storage,
        destination_registration_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_remove_destination(
        tracker: *mut aeron_udp_destination_tracker_t,
        addr: *mut sockaddr_storage,
        removed_uri: *mut *mut aeron_uri_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_remove_destination_by_id(
        tracker: *mut aeron_udp_destination_tracker_t,
        destination_registration_id: i64,
        removed_uri: *mut *mut aeron_uri_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_check_for_re_resolution(
        tracker: *mut aeron_udp_destination_tracker_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
        now_ns: i64,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    );
}
unsafe extern "C" {
    pub fn aeron_udp_destination_tracker_resolution_change(
        tracker: *mut aeron_udp_destination_tracker_t,
        endpoint_name: *const ::std::os::raw::c_char,
        addr: *mut sockaddr_storage,
    );
}
pub type aeron_driver_sender_t = aeron_driver_sender_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_sender_proxy_stct {
    pub sender: *mut aeron_driver_sender_t,
    pub threading_mode: aeron_threading_mode_t,
    pub log: aeron_driver_sender_proxy_stct__bindgen_ty_1,
    pub command_queue: *mut aeron_mpsc_rb_t,
    pub fail_counter: *mut i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_sender_proxy_stct__bindgen_ty_1 {
    pub on_add_endpoint: aeron_on_endpoint_change_func_t,
    pub on_remove_endpoint: aeron_on_endpoint_change_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_sender_proxy_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_driver_sender_proxy_stct__bindgen_ty_1>() - 16usize];
    ["Alignment of aeron_driver_sender_proxy_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_driver_sender_proxy_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_driver_sender_proxy_stct__bindgen_ty_1::on_add_endpoint"][::std::mem::offset_of!(
        aeron_driver_sender_proxy_stct__bindgen_ty_1,
        on_add_endpoint
    ) - 0usize];
    ["Offset of field: aeron_driver_sender_proxy_stct__bindgen_ty_1::on_remove_endpoint"][::std::mem::offset_of!(
        aeron_driver_sender_proxy_stct__bindgen_ty_1,
        on_remove_endpoint
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_sender_proxy_stct"]
        [::std::mem::size_of::<aeron_driver_sender_proxy_stct>() - 48usize];
    ["Alignment of aeron_driver_sender_proxy_stct"]
        [::std::mem::align_of::<aeron_driver_sender_proxy_stct>() - 8usize];
    ["Offset of field: aeron_driver_sender_proxy_stct::sender"]
        [::std::mem::offset_of!(aeron_driver_sender_proxy_stct, sender) - 0usize];
    ["Offset of field: aeron_driver_sender_proxy_stct::threading_mode"]
        [::std::mem::offset_of!(aeron_driver_sender_proxy_stct, threading_mode) - 8usize];
    ["Offset of field: aeron_driver_sender_proxy_stct::log"]
        [::std::mem::offset_of!(aeron_driver_sender_proxy_stct, log) - 16usize];
    ["Offset of field: aeron_driver_sender_proxy_stct::command_queue"]
        [::std::mem::offset_of!(aeron_driver_sender_proxy_stct, command_queue) - 32usize];
    ["Offset of field: aeron_driver_sender_proxy_stct::fail_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_proxy_stct, fail_counter) - 40usize];
};
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_add_endpoint(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_remove_endpoint(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_add_publication(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        publication: *mut aeron_network_publication_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_remove_publication(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        publication: *mut aeron_network_publication_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_resolution_change(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        endpoint_name: *const ::std::os::raw::c_char,
        endpoint: *mut aeron_send_channel_endpoint_t,
        new_addr: *mut sockaddr_storage,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_destination_stct {
    pub base: aeron_command_base_t,
    pub destination_registration_id: i64,
    pub control_address: sockaddr_storage,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub uri: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_destination_stct"]
        [::std::mem::size_of::<aeron_command_destination_stct>() - 168usize];
    ["Alignment of aeron_command_destination_stct"]
        [::std::mem::align_of::<aeron_command_destination_stct>() - 8usize];
    ["Offset of field: aeron_command_destination_stct::base"]
        [::std::mem::offset_of!(aeron_command_destination_stct, base) - 0usize];
    ["Offset of field: aeron_command_destination_stct::destination_registration_id"][::std::mem::offset_of!(
        aeron_command_destination_stct,
        destination_registration_id
    ) - 16usize];
    ["Offset of field: aeron_command_destination_stct::control_address"]
        [::std::mem::offset_of!(aeron_command_destination_stct, control_address) - 24usize];
    ["Offset of field: aeron_command_destination_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_destination_stct, endpoint) - 152usize];
    ["Offset of field: aeron_command_destination_stct::uri"]
        [::std::mem::offset_of!(aeron_command_destination_stct, uri) - 160usize];
};
pub type aeron_command_destination_t = aeron_command_destination_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_destination_by_id_stct {
    pub base: aeron_command_base_t,
    pub control_address: sockaddr_storage,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub destination_registration_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_destination_by_id_stct"]
        [::std::mem::size_of::<aeron_command_destination_by_id_stct>() - 160usize];
    ["Alignment of aeron_command_destination_by_id_stct"]
        [::std::mem::align_of::<aeron_command_destination_by_id_stct>() - 8usize];
    ["Offset of field: aeron_command_destination_by_id_stct::base"]
        [::std::mem::offset_of!(aeron_command_destination_by_id_stct, base) - 0usize];
    ["Offset of field: aeron_command_destination_by_id_stct::control_address"]
        [::std::mem::offset_of!(aeron_command_destination_by_id_stct, control_address) - 16usize];
    ["Offset of field: aeron_command_destination_by_id_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_destination_by_id_stct, endpoint) - 144usize];
    ["Offset of field: aeron_command_destination_by_id_stct::destination_registration_id"][::std::mem::offset_of!(
        aeron_command_destination_by_id_stct,
        destination_registration_id
    )
        - 152usize];
};
pub type aeron_command_destination_by_id_t = aeron_command_destination_by_id_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_sender_resolution_change_stct {
    pub base: aeron_command_base_t,
    pub endpoint_name: *const ::std::os::raw::c_char,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub new_addr: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_sender_resolution_change_stct"]
        [::std::mem::size_of::<aeron_command_sender_resolution_change_stct>() - 160usize];
    ["Alignment of aeron_command_sender_resolution_change_stct"]
        [::std::mem::align_of::<aeron_command_sender_resolution_change_stct>() - 8usize];
    ["Offset of field: aeron_command_sender_resolution_change_stct::base"]
        [::std::mem::offset_of!(aeron_command_sender_resolution_change_stct, base) - 0usize];
    ["Offset of field: aeron_command_sender_resolution_change_stct::endpoint_name"][::std::mem::offset_of!(
        aeron_command_sender_resolution_change_stct,
        endpoint_name
    ) - 16usize];
    ["Offset of field: aeron_command_sender_resolution_change_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_sender_resolution_change_stct, endpoint) - 24usize];
    ["Offset of field: aeron_command_sender_resolution_change_stct::new_addr"]
        [::std::mem::offset_of!(aeron_command_sender_resolution_change_stct, new_addr) - 32usize];
};
pub type aeron_command_sender_resolution_change_t = aeron_command_sender_resolution_change_stct;
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_add_destination(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
        uri: *mut aeron_uri_t,
        addr: *mut sockaddr_storage,
        destination_registration_id: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_remove_destination(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
        addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_proxy_on_remove_destination_by_id(
        sender_proxy: *mut aeron_driver_sender_proxy_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
        destination_registration_id: i64,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_send_channel_endpoint_status_enum {
    AERON_SEND_CHANNEL_ENDPOINT_STATUS_ACTIVE = 0,
    AERON_SEND_CHANNEL_ENDPOINT_STATUS_CLOSING = 1,
}
pub use self::aeron_send_channel_endpoint_status_enum as aeron_send_channel_endpoint_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_send_channel_endpoint_stct {
    pub conductor_fields:
        aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct,
    pub has_sender_released: bool,
    pub transport: aeron_udp_channel_transport_t,
    pub channel_status: aeron_atomic_counter_t,
    pub local_sockaddr_indicator: aeron_atomic_counter_t,
    pub tracker_num_destinations: aeron_atomic_counter_t,
    pub destination_tracker: *mut aeron_udp_destination_tracker_t,
    pub sender_proxy: *mut aeron_driver_sender_proxy_t,
    pub publication_dispatch_map: aeron_int64_to_ptr_hash_map_t,
    pub transport_bindings: *mut aeron_udp_channel_transport_bindings_t,
    pub data_paths: *mut aeron_udp_channel_data_paths_t,
    pub current_data_addr: sockaddr_storage,
    pub bind_addr: sockaddr_storage,
    pub port_manager: *mut aeron_port_manager_t,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub time_of_last_sm_ns: i64,
    pub padding: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct {
    pub managed_resource: aeron_driver_managed_resource_t,
    pub refcnt: i32,
    pub has_reached_end_of_life: bool,
    pub udp_channel: *mut aeron_udp_channel_t,
    pub status: aeron_send_channel_endpoint_status_t,
    pub socket_sndbuf: usize,
    pub socket_rcvbuf: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct"] [:: std :: mem :: size_of :: < aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct > () - 80usize] ;
    ["Alignment of aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct"] [:: std :: mem :: align_of :: < aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct > () - 8usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::managed_resource"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , managed_resource) - 0usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::refcnt"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , refcnt) - 40usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , has_reached_end_of_life) - 44usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::udp_channel"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , udp_channel) - 48usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::status"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , status) - 56usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::socket_sndbuf"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , socket_sndbuf) - 64usize] ;
    ["Offset of field: aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct::socket_rcvbuf"] [:: std :: mem :: offset_of ! (aeron_send_channel_endpoint_stct_aeron_send_channel_endpoint_conductor_fields_stct , socket_rcvbuf) - 72usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_send_channel_endpoint_stct"]
        [::std::mem::size_of::<aeron_send_channel_endpoint_stct>() - 648usize];
    ["Alignment of aeron_send_channel_endpoint_stct"]
        [::std::mem::align_of::<aeron_send_channel_endpoint_stct>() - 8usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::conductor_fields"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, conductor_fields) - 0usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::has_sender_released"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, has_sender_released) - 80usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::transport"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, transport) - 88usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::channel_status"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, channel_status) - 176usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::local_sockaddr_indicator"][::std::mem::offset_of!(
        aeron_send_channel_endpoint_stct,
        local_sockaddr_indicator
    ) - 192usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::tracker_num_destinations"][::std::mem::offset_of!(
        aeron_send_channel_endpoint_stct,
        tracker_num_destinations
    ) - 208usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::destination_tracker"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, destination_tracker) - 224usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::sender_proxy"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, sender_proxy) - 232usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::publication_dispatch_map"][::std::mem::offset_of!(
        aeron_send_channel_endpoint_stct,
        publication_dispatch_map
    ) - 240usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::transport_bindings"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, transport_bindings) - 288usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::data_paths"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, data_paths) - 296usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::current_data_addr"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, current_data_addr) - 304usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::bind_addr"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, bind_addr) - 432usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::port_manager"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, port_manager) - 560usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, cached_clock) - 568usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::time_of_last_sm_ns"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, time_of_last_sm_ns) - 576usize];
    ["Offset of field: aeron_send_channel_endpoint_stct::padding"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_stct, padding) - 584usize];
};
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_create(
        endpoint: *mut *mut aeron_send_channel_endpoint_t,
        channel: *mut aeron_udp_channel_t,
        params: *mut aeron_driver_uri_publication_params_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        registration_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_delete(
        counters_manager: *mut aeron_counters_manager_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_incref(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_decref(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_send_channel_send(
        endpoint: *mut aeron_send_channel_endpoint_t,
        iov: *mut iovec,
        iov_length: usize,
        bytes_sent: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_send_endpoint_address(
        endpoint: *mut aeron_send_channel_endpoint_t,
        endpoint_address: *mut sockaddr_storage,
        iov: *mut iovec,
        iov_length: usize,
        bytes_sent: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_add_publication(
        endpoint: *mut aeron_send_channel_endpoint_t,
        publication: *mut aeron_network_publication_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_remove_publication(
        endpoint: *mut aeron_send_channel_endpoint_t,
        publication: *mut aeron_network_publication_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_dispatch(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        transport: *mut aeron_udp_channel_transport_t,
        sender_clientd: *mut ::std::os::raw::c_void,
        endpoint_clientd: *mut ::std::os::raw::c_void,
        destination_clientd: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
        media_timestamp: *mut timespec,
    );
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_on_nak(
        endpoint: *mut aeron_send_channel_endpoint_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_on_status_message(
        endpoint: *mut aeron_send_channel_endpoint_t,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_on_rttm(
        endpoint: *mut aeron_send_channel_endpoint_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_on_response_setup(
        endpoint: *mut aeron_send_channel_endpoint_t,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_check_for_re_resolution(
        endpoint: *mut aeron_send_channel_endpoint_t,
        now_ns: i64,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_resolution_change(
        context: *mut aeron_driver_context_t,
        endpoint: *mut aeron_send_channel_endpoint_t,
        endpoint_name: *const ::std::os::raw::c_char,
        new_addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_int64_to_tagged_ptr_entry_stct {
    pub value: *mut ::std::os::raw::c_void,
    pub internal_flags: u32,
    pub tag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_int64_to_tagged_ptr_entry_stct"]
        [::std::mem::size_of::<aeron_int64_to_tagged_ptr_entry_stct>() - 16usize];
    ["Alignment of aeron_int64_to_tagged_ptr_entry_stct"]
        [::std::mem::align_of::<aeron_int64_to_tagged_ptr_entry_stct>() - 8usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_entry_stct::value"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_entry_stct, value) - 0usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_entry_stct::internal_flags"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_entry_stct, internal_flags) - 8usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_entry_stct::tag"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_entry_stct, tag) - 12usize];
};
pub type aeron_int64_to_tagged_ptr_entry_t = aeron_int64_to_tagged_ptr_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_int64_to_tagged_ptr_hash_map_stct {
    pub keys: *mut i64,
    pub entries: *mut aeron_int64_to_tagged_ptr_entry_t,
    pub load_factor: f32,
    pub capacity: usize,
    pub size: usize,
    pub resize_threshold: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_int64_to_tagged_ptr_hash_map_stct"]
        [::std::mem::size_of::<aeron_int64_to_tagged_ptr_hash_map_stct>() - 48usize];
    ["Alignment of aeron_int64_to_tagged_ptr_hash_map_stct"]
        [::std::mem::align_of::<aeron_int64_to_tagged_ptr_hash_map_stct>() - 8usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_hash_map_stct::keys"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_hash_map_stct, keys) - 0usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_hash_map_stct::entries"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_hash_map_stct, entries) - 8usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_hash_map_stct::load_factor"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_hash_map_stct, load_factor) - 16usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_hash_map_stct::capacity"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_hash_map_stct, capacity) - 24usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_hash_map_stct::size"]
        [::std::mem::offset_of!(aeron_int64_to_tagged_ptr_hash_map_stct, size) - 32usize];
    ["Offset of field: aeron_int64_to_tagged_ptr_hash_map_stct::resize_threshold"][::std::mem::offset_of!(
        aeron_int64_to_tagged_ptr_hash_map_stct,
        resize_threshold
    ) - 40usize];
};
pub type aeron_int64_to_tagged_ptr_hash_map_t = aeron_int64_to_tagged_ptr_hash_map_stct;
pub type aeron_int64_to_tagged_ptr_hash_map_for_each_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        key: i64,
        tag: u32,
        value: *mut ::std::os::raw::c_void,
    ),
>;
pub type aeron_int64_to_tagged_ptr_hash_map_predicate_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        key: i64,
        tag: u32,
        value: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_driver_conductor_resource_type_en {
    AERON_DRIVER_CONDUCTOR_RESOURCE_TYPE_CLIENT = 0,
    AERON_DRIVER_CONDUCTOR_RESOURCE_TYPE_IPC_PUBLICATION = 1,
    AERON_DRIVER_CONDUCTOR_RESOURCE_TYPE_NETWORK_PUBLICATION = 2,
    AERON_DRIVER_CONDUCTOR_RESOURCE_TYPE_SEND_CHANNEL_ENDPOINT = 3,
    AERON_DRIVER_CONDUCTOR_RESOURCE_TYPE_PUBLICATION_IMAGE = 4,
    AERON_DRIVER_CONDUCTOR_RESOURCE_TYPE_LINGER_RESOURCE = 5,
}
pub use self::aeron_driver_conductor_resource_type_en as aeron_driver_conductor_resource_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_proxy_stct {
    pub conductor: *mut aeron_driver_conductor_t,
    pub threading_mode: aeron_threading_mode_t,
    pub command_queue: *mut aeron_mpsc_rb_t,
    pub fail_counter: *mut i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_proxy_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_proxy_stct>() - 32usize];
    ["Alignment of aeron_driver_conductor_proxy_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_proxy_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_proxy_stct::conductor"]
        [::std::mem::offset_of!(aeron_driver_conductor_proxy_stct, conductor) - 0usize];
    ["Offset of field: aeron_driver_conductor_proxy_stct::threading_mode"]
        [::std::mem::offset_of!(aeron_driver_conductor_proxy_stct, threading_mode) - 8usize];
    ["Offset of field: aeron_driver_conductor_proxy_stct::command_queue"]
        [::std::mem::offset_of!(aeron_driver_conductor_proxy_stct, command_queue) - 16usize];
    ["Offset of field: aeron_driver_conductor_proxy_stct::fail_counter"]
        [::std::mem::offset_of!(aeron_driver_conductor_proxy_stct, fail_counter) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_create_publication_image_stct {
    pub base: aeron_command_base_t,
    pub session_id: i32,
    pub stream_id: i32,
    pub initial_term_id: i32,
    pub active_term_id: i32,
    pub term_offset: i32,
    pub term_length: i32,
    pub mtu_length: i32,
    pub flags: u8,
    pub control_address: sockaddr_storage,
    pub src_address: sockaddr_storage,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub destination: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_create_publication_image_stct"]
        [::std::mem::size_of::<aeron_command_create_publication_image_stct>() - 320usize];
    ["Alignment of aeron_command_create_publication_image_stct"]
        [::std::mem::align_of::<aeron_command_create_publication_image_stct>() - 8usize];
    ["Offset of field: aeron_command_create_publication_image_stct::base"]
        [::std::mem::offset_of!(aeron_command_create_publication_image_stct, base) - 0usize];
    ["Offset of field: aeron_command_create_publication_image_stct::session_id"]
        [::std::mem::offset_of!(aeron_command_create_publication_image_stct, session_id) - 16usize];
    ["Offset of field: aeron_command_create_publication_image_stct::stream_id"]
        [::std::mem::offset_of!(aeron_command_create_publication_image_stct, stream_id) - 20usize];
    ["Offset of field: aeron_command_create_publication_image_stct::initial_term_id"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        initial_term_id
    ) - 24usize];
    ["Offset of field: aeron_command_create_publication_image_stct::active_term_id"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        active_term_id
    ) - 28usize];
    ["Offset of field: aeron_command_create_publication_image_stct::term_offset"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        term_offset
    ) - 32usize];
    ["Offset of field: aeron_command_create_publication_image_stct::term_length"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        term_length
    ) - 36usize];
    ["Offset of field: aeron_command_create_publication_image_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_command_create_publication_image_stct, mtu_length) - 40usize];
    ["Offset of field: aeron_command_create_publication_image_stct::flags"]
        [::std::mem::offset_of!(aeron_command_create_publication_image_stct, flags) - 44usize];
    ["Offset of field: aeron_command_create_publication_image_stct::control_address"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        control_address
    ) - 48usize];
    ["Offset of field: aeron_command_create_publication_image_stct::src_address"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        src_address
    ) - 176usize];
    ["Offset of field: aeron_command_create_publication_image_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_create_publication_image_stct, endpoint) - 304usize];
    ["Offset of field: aeron_command_create_publication_image_stct::destination"][::std::mem::offset_of!(
        aeron_command_create_publication_image_stct,
        destination
    ) - 312usize];
};
pub type aeron_command_create_publication_image_t = aeron_command_create_publication_image_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_re_resolve_stct {
    pub base: aeron_command_base_t,
    pub endpoint_name: *const ::std::os::raw::c_char,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub destination: *mut ::std::os::raw::c_void,
    pub existing_addr: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_re_resolve_stct"]
        [::std::mem::size_of::<aeron_command_re_resolve_stct>() - 168usize];
    ["Alignment of aeron_command_re_resolve_stct"]
        [::std::mem::align_of::<aeron_command_re_resolve_stct>() - 8usize];
    ["Offset of field: aeron_command_re_resolve_stct::base"]
        [::std::mem::offset_of!(aeron_command_re_resolve_stct, base) - 0usize];
    ["Offset of field: aeron_command_re_resolve_stct::endpoint_name"]
        [::std::mem::offset_of!(aeron_command_re_resolve_stct, endpoint_name) - 16usize];
    ["Offset of field: aeron_command_re_resolve_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_re_resolve_stct, endpoint) - 24usize];
    ["Offset of field: aeron_command_re_resolve_stct::destination"]
        [::std::mem::offset_of!(aeron_command_re_resolve_stct, destination) - 32usize];
    ["Offset of field: aeron_command_re_resolve_stct::existing_addr"]
        [::std::mem::offset_of!(aeron_command_re_resolve_stct, existing_addr) - 40usize];
};
pub type aeron_command_re_resolve_t = aeron_command_re_resolve_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_delete_destination_stct {
    pub base: aeron_command_base_t,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub destination: *mut ::std::os::raw::c_void,
    pub channel: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_delete_destination_stct"]
        [::std::mem::size_of::<aeron_command_delete_destination_stct>() - 40usize];
    ["Alignment of aeron_command_delete_destination_stct"]
        [::std::mem::align_of::<aeron_command_delete_destination_stct>() - 8usize];
    ["Offset of field: aeron_command_delete_destination_stct::base"]
        [::std::mem::offset_of!(aeron_command_delete_destination_stct, base) - 0usize];
    ["Offset of field: aeron_command_delete_destination_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_delete_destination_stct, endpoint) - 16usize];
    ["Offset of field: aeron_command_delete_destination_stct::destination"]
        [::std::mem::offset_of!(aeron_command_delete_destination_stct, destination) - 24usize];
    ["Offset of field: aeron_command_delete_destination_stct::channel"]
        [::std::mem::offset_of!(aeron_command_delete_destination_stct, channel) - 32usize];
};
pub type aeron_command_delete_destination_t = aeron_command_delete_destination_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_response_connected_stct {
    pub base: aeron_command_base_t,
    pub response_correlation_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_response_connected_stct"]
        [::std::mem::size_of::<aeron_command_response_connected_stct>() - 24usize];
    ["Alignment of aeron_command_response_connected_stct"]
        [::std::mem::align_of::<aeron_command_response_connected_stct>() - 8usize];
    ["Offset of field: aeron_command_response_connected_stct::base"]
        [::std::mem::offset_of!(aeron_command_response_connected_stct, base) - 0usize];
    ["Offset of field: aeron_command_response_connected_stct::response_correlation_id"][::std::mem::offset_of!(
        aeron_command_response_connected_stct,
        response_correlation_id
    )
        - 16usize];
};
pub type aeron_command_response_connected_t = aeron_command_response_connected_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_response_setup_stct {
    pub base: aeron_command_base_t,
    pub response_correlation_id: i64,
    pub response_session_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_response_setup_stct"]
        [::std::mem::size_of::<aeron_command_response_setup_stct>() - 32usize];
    ["Alignment of aeron_command_response_setup_stct"]
        [::std::mem::align_of::<aeron_command_response_setup_stct>() - 8usize];
    ["Offset of field: aeron_command_response_setup_stct::base"]
        [::std::mem::offset_of!(aeron_command_response_setup_stct, base) - 0usize];
    ["Offset of field: aeron_command_response_setup_stct::response_correlation_id"][::std::mem::offset_of!(
        aeron_command_response_setup_stct,
        response_correlation_id
    ) - 16usize];
    ["Offset of field: aeron_command_response_setup_stct::response_session_id"]
        [::std::mem::offset_of!(aeron_command_response_setup_stct, response_session_id) - 24usize];
};
pub type aeron_command_response_setup_t = aeron_command_response_setup_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_release_resource_stct {
    pub base: aeron_command_base_t,
    pub resource_type: aeron_driver_conductor_resource_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_release_resource_stct"]
        [::std::mem::size_of::<aeron_command_release_resource_stct>() - 24usize];
    ["Alignment of aeron_command_release_resource_stct"]
        [::std::mem::align_of::<aeron_command_release_resource_stct>() - 8usize];
    ["Offset of field: aeron_command_release_resource_stct::base"]
        [::std::mem::offset_of!(aeron_command_release_resource_stct, base) - 0usize];
    ["Offset of field: aeron_command_release_resource_stct::resource_type"]
        [::std::mem::offset_of!(aeron_command_release_resource_stct, resource_type) - 16usize];
};
pub type aeron_command_release_resource_t = aeron_command_release_resource_stct;
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_create_publication_image_cmd(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        session_id: i32,
        stream_id: i32,
        initial_term_id: i32,
        active_term_id: i32,
        term_offset: i32,
        term_length: i32,
        mtu_length: i32,
        flags: u8,
        control_address: *mut sockaddr_storage,
        src_address: *mut sockaddr_storage,
        endpoint: *mut ::std::os::raw::c_void,
        destination: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_re_resolve_endpoint(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        endpoint_name: *const ::std::os::raw::c_char,
        endpoint: *mut ::std::os::raw::c_void,
        existing_addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_re_resolve_control(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        endpoint_name: *const ::std::os::raw::c_char,
        endpoint: *mut ::std::os::raw::c_void,
        destination: *mut ::std::os::raw::c_void,
        existing_addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_delete_receive_destination(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        endpoint: *mut ::std::os::raw::c_void,
        destination: *mut ::std::os::raw::c_void,
        channel: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_delete_send_destination(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        removed_uri: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_receive_endpoint_removed(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        endpoint: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_response_setup(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        response_correlation_id: i64,
        response_session_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_response_connected(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        response_correlation_id: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_proxy_on_release_resource(
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        managed_resource: *mut ::std::os::raw::c_void,
        resource_type: aeron_driver_conductor_resource_type_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_destination_stct {
    pub conductor_fields:
        aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct,
    pub transport: aeron_udp_channel_transport_t,
    pub data_paths: *mut aeron_udp_channel_data_paths_t,
    pub port_manager: *mut aeron_port_manager_t,
    pub local_sockaddr_indicator: aeron_atomic_counter_t,
    pub current_control_addr: sockaddr_storage,
    pub bind_addr: sockaddr_storage,
    pub so_rcvbuf: usize,
    pub has_control_addr: bool,
    pub time_of_last_activity_ns: i64,
    pub padding: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct {
    pub udp_channel: *mut aeron_udp_channel_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct"]
        [::std::mem::size_of::<
            aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct,
        >() - 8usize];
    ["Alignment of aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct"] [:: std :: mem :: align_of :: < aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct > () - 8usize] ;
    ["Offset of field: aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct::udp_channel"] [:: std :: mem :: offset_of ! (aeron_receive_destination_stct_aeron_receive_destination_conductor_fields_stct , udp_channel) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_destination_stct"]
        [::std::mem::size_of::<aeron_receive_destination_stct>() - 472usize];
    ["Alignment of aeron_receive_destination_stct"]
        [::std::mem::align_of::<aeron_receive_destination_stct>() - 8usize];
    ["Offset of field: aeron_receive_destination_stct::conductor_fields"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, conductor_fields) - 0usize];
    ["Offset of field: aeron_receive_destination_stct::transport"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, transport) - 8usize];
    ["Offset of field: aeron_receive_destination_stct::data_paths"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, data_paths) - 96usize];
    ["Offset of field: aeron_receive_destination_stct::port_manager"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, port_manager) - 104usize];
    ["Offset of field: aeron_receive_destination_stct::local_sockaddr_indicator"][::std::mem::offset_of!(
        aeron_receive_destination_stct,
        local_sockaddr_indicator
    ) - 112usize];
    ["Offset of field: aeron_receive_destination_stct::current_control_addr"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, current_control_addr) - 128usize];
    ["Offset of field: aeron_receive_destination_stct::bind_addr"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, bind_addr) - 256usize];
    ["Offset of field: aeron_receive_destination_stct::so_rcvbuf"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, so_rcvbuf) - 384usize];
    ["Offset of field: aeron_receive_destination_stct::has_control_addr"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, has_control_addr) - 392usize];
    ["Offset of field: aeron_receive_destination_stct::time_of_last_activity_ns"][::std::mem::offset_of!(
        aeron_receive_destination_stct,
        time_of_last_activity_ns
    ) - 400usize];
    ["Offset of field: aeron_receive_destination_stct::padding"]
        [::std::mem::offset_of!(aeron_receive_destination_stct, padding) - 408usize];
};
pub type aeron_receive_destination_t = aeron_receive_destination_stct;
unsafe extern "C" {
    pub fn aeron_receive_destination_create(
        destination: *mut *mut aeron_receive_destination_t,
        destination_channel: *mut aeron_udp_channel_t,
        endpoint_channel: *mut aeron_udp_channel_t,
        context: *mut aeron_driver_context_t,
        counters_manager: *mut aeron_counters_manager_t,
        registration_id: i64,
        channel_status_counter_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_destination_delete(
        destination: *mut aeron_receive_destination_t,
        counters_manager: *mut aeron_counters_manager_t,
    );
}
pub type aeron_receive_channel_endpoint_t = aeron_receive_channel_endpoint_stct;
pub type aeron_driver_receiver_t = aeron_driver_receiver_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_data_packet_dispatcher_stct {
    pub ignored_sessions_map: aeron_int64_to_ptr_hash_map_t,
    pub session_by_stream_id_map: aeron_int64_to_ptr_hash_map_t,
    pub tokens: aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct,
    pub conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    pub receiver: *mut aeron_driver_receiver_t,
    pub stream_session_limit: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct {
    pub subscribed: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct"]
        [::std::mem::size_of::<
            aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct,
        >() - 4usize];
    ["Alignment of aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct"]
        [::std::mem::align_of::<
            aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct,
        >() - 4usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct::subscribed"] [:: std :: mem :: offset_of ! (aeron_data_packet_dispatcher_stct_aeron_data_packet_dispatcher_tokens_stct , subscribed) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_data_packet_dispatcher_stct"]
        [::std::mem::size_of::<aeron_data_packet_dispatcher_stct>() - 128usize];
    ["Alignment of aeron_data_packet_dispatcher_stct"]
        [::std::mem::align_of::<aeron_data_packet_dispatcher_stct>() - 8usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct::ignored_sessions_map"]
        [::std::mem::offset_of!(aeron_data_packet_dispatcher_stct, ignored_sessions_map) - 0usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct::session_by_stream_id_map"][::std::mem::offset_of!(
        aeron_data_packet_dispatcher_stct,
        session_by_stream_id_map
    ) - 48usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct::tokens"]
        [::std::mem::offset_of!(aeron_data_packet_dispatcher_stct, tokens) - 96usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct::conductor_proxy"]
        [::std::mem::offset_of!(aeron_data_packet_dispatcher_stct, conductor_proxy) - 104usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct::receiver"]
        [::std::mem::offset_of!(aeron_data_packet_dispatcher_stct, receiver) - 112usize];
    ["Offset of field: aeron_data_packet_dispatcher_stct::stream_session_limit"][::std::mem::offset_of!(
        aeron_data_packet_dispatcher_stct,
        stream_session_limit
    ) - 120usize];
};
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_init(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
        receiver: *mut aeron_driver_receiver_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_close(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_data_packet_dispatcher_stream_interest_stct {
    pub is_all_sessions: bool,
    pub subscribed_sessions: aeron_int64_to_ptr_hash_map_t,
    pub image_by_session_id_map: aeron_int64_to_ptr_hash_map_t,
    pub state_by_session_id_map: aeron_int64_counter_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_data_packet_dispatcher_stream_interest_stct"]
        [::std::mem::size_of::<aeron_data_packet_dispatcher_stream_interest_stct>() - 152usize];
    ["Alignment of aeron_data_packet_dispatcher_stream_interest_stct"]
        [::std::mem::align_of::<aeron_data_packet_dispatcher_stream_interest_stct>() - 8usize];
    ["Offset of field: aeron_data_packet_dispatcher_stream_interest_stct::is_all_sessions"][::std::mem::offset_of!(
        aeron_data_packet_dispatcher_stream_interest_stct,
        is_all_sessions
    )
        - 0usize];
    ["Offset of field: aeron_data_packet_dispatcher_stream_interest_stct::subscribed_sessions"][::std::mem::offset_of!(
        aeron_data_packet_dispatcher_stream_interest_stct,
        subscribed_sessions
    )
        - 8usize];
    ["Offset of field: aeron_data_packet_dispatcher_stream_interest_stct::image_by_session_id_map"] [:: std :: mem :: offset_of ! (aeron_data_packet_dispatcher_stream_interest_stct , image_by_session_id_map) - 56usize] ;
    ["Offset of field: aeron_data_packet_dispatcher_stream_interest_stct::state_by_session_id_map"] [:: std :: mem :: offset_of ! (aeron_data_packet_dispatcher_stream_interest_stct , state_by_session_id_map) - 104usize] ;
};
pub type aeron_data_packet_dispatcher_stream_interest_t =
    aeron_data_packet_dispatcher_stream_interest_stct;
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_add_subscription(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_add_subscription_by_session(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_remove_subscription(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_remove_subscription_by_session(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_add_publication_image(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        image: *mut aeron_publication_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_remove_publication_image(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        image: *mut aeron_publication_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_has_interest_in(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        stream_id: i32,
        session_id: i32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_on_data(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        header: *mut aeron_data_header_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_on_setup(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        header: *mut aeron_setup_header_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_on_rttm(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        header: *mut aeron_rttm_header_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_try_connect_stream(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        stream_id: i32,
        session_id: i32,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_elicit_setup_from_source(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        stream_interest: *mut aeron_data_packet_dispatcher_stream_interest_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        addr: *mut sockaddr_storage,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_data_packet_dispatcher_remove_pending_setup(
        dispatcher: *mut aeron_data_packet_dispatcher_t,
        session_id: i32,
        stream_id: i32,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_receive_channel_endpoint_status_enum {
    AERON_RECEIVE_CHANNEL_ENDPOINT_STATUS_ACTIVE = 0,
    AERON_RECEIVE_CHANNEL_ENDPOINT_STATUS_CLOSING = 1,
    AERON_RECEIVE_CHANNEL_ENDPOINT_STATUS_CLOSED = 2,
}
pub use self::aeron_receive_channel_endpoint_status_enum as aeron_receive_channel_endpoint_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_destination_entry_stct {
    pub destination: *mut aeron_receive_destination_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_destination_entry_stct"]
        [::std::mem::size_of::<aeron_receive_destination_entry_stct>() - 8usize];
    ["Alignment of aeron_receive_destination_entry_stct"]
        [::std::mem::align_of::<aeron_receive_destination_entry_stct>() - 8usize];
    ["Offset of field: aeron_receive_destination_entry_stct::destination"]
        [::std::mem::offset_of!(aeron_receive_destination_entry_stct, destination) - 0usize];
};
pub type aeron_receive_destination_entry_t = aeron_receive_destination_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_channel_endpoint_stct {
    pub conductor_fields:
        aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct,
    pub destinations: aeron_receive_channel_endpoint_stct_destination_stct,
    pub dispatcher: aeron_data_packet_dispatcher_t,
    pub stream_id_to_refcnt_map: aeron_int64_counter_map_t,
    pub stream_and_session_id_to_refcnt_map: aeron_int64_counter_map_t,
    pub response_stream_id_to_refcnt_map: aeron_int64_counter_map_t,
    pub channel_status: aeron_atomic_counter_t,
    pub receiver_proxy: *mut aeron_driver_receiver_proxy_t,
    pub transport_bindings: *mut aeron_udp_channel_transport_bindings_t,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub send_nak_message: aeron_driver_send_nak_message_func_t,
    pub receiver_id: i64,
    pub has_receiver_released: bool,
    pub group_tag: aeron_receive_channel_endpoint_stct__bindgen_ty_1,
    pub short_sends_counter: *mut i64,
    pub possible_ttl_asymmetry_counter: *mut i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct
{
    pub managed_resource: aeron_driver_managed_resource_t,
    pub udp_channel: *mut aeron_udp_channel_t,
    pub status: aeron_receive_channel_endpoint_status_t,
    pub image_ref_count: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct"] [:: std :: mem :: size_of :: < aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct > () - 64usize] ;
    ["Alignment of aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct"] [:: std :: mem :: align_of :: < aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct > () - 8usize] ;
    ["Offset of field: aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct::managed_resource"] [:: std :: mem :: offset_of ! (aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct , managed_resource) - 0usize] ;
    ["Offset of field: aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct::udp_channel"] [:: std :: mem :: offset_of ! (aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct , udp_channel) - 40usize] ;
    ["Offset of field: aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct::status"] [:: std :: mem :: offset_of ! (aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct , status) - 48usize] ;
    ["Offset of field: aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct::image_ref_count"] [:: std :: mem :: offset_of ! (aeron_receive_channel_endpoint_stct_aeron_receive_channel_endpoint_conductor_fields_stct , image_ref_count) - 56usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_channel_endpoint_stct_destination_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_receive_destination_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_channel_endpoint_stct_destination_stct"]
        [::std::mem::size_of::<aeron_receive_channel_endpoint_stct_destination_stct>() - 24usize];
    ["Alignment of aeron_receive_channel_endpoint_stct_destination_stct"]
        [::std::mem::align_of::<aeron_receive_channel_endpoint_stct_destination_stct>() - 8usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct_destination_stct::length"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct_destination_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct_destination_stct::capacity"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct_destination_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct_destination_stct::array"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct_destination_stct,
        array
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_channel_endpoint_stct__bindgen_ty_1 {
    pub is_present: bool,
    pub value: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_channel_endpoint_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_receive_channel_endpoint_stct__bindgen_ty_1>() - 16usize];
    ["Alignment of aeron_receive_channel_endpoint_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_receive_channel_endpoint_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct__bindgen_ty_1::is_present"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct__bindgen_ty_1,
        is_present
    ) - 0usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct__bindgen_ty_1::value"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct__bindgen_ty_1, value) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_channel_endpoint_stct"]
        [::std::mem::size_of::<aeron_receive_channel_endpoint_stct>() - 456usize];
    ["Alignment of aeron_receive_channel_endpoint_stct"]
        [::std::mem::align_of::<aeron_receive_channel_endpoint_stct>() - 8usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::conductor_fields"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, conductor_fields) - 0usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::destinations"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, destinations) - 64usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::dispatcher"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, dispatcher) - 88usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::stream_id_to_refcnt_map"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        stream_id_to_refcnt_map
    ) - 216usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::stream_and_session_id_to_refcnt_map"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        stream_and_session_id_to_refcnt_map
    )
        - 264usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::response_stream_id_to_refcnt_map"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        response_stream_id_to_refcnt_map
    )
        - 312usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::channel_status"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, channel_status) - 360usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::receiver_proxy"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, receiver_proxy) - 376usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::transport_bindings"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        transport_bindings
    ) - 384usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, cached_clock) - 392usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::send_nak_message"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, send_nak_message) - 400usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::receiver_id"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, receiver_id) - 408usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::has_receiver_released"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        has_receiver_released
    ) - 416usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::group_tag"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_stct, group_tag) - 424usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::short_sends_counter"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        short_sends_counter
    ) - 440usize];
    ["Offset of field: aeron_receive_channel_endpoint_stct::possible_ttl_asymmetry_counter"][::std::mem::offset_of!(
        aeron_receive_channel_endpoint_stct,
        possible_ttl_asymmetry_counter
    )
        - 448usize];
};
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_create(
        endpoint: *mut *mut aeron_receive_channel_endpoint_t,
        channel: *mut aeron_udp_channel_t,
        straight_through_destination: *mut aeron_receive_destination_t,
        status_indicator: *mut aeron_atomic_counter_t,
        system_counters: *mut aeron_system_counters_t,
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_delete(
        counters_manager: *mut aeron_counters_manager_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_close(
        endpoint: *mut aeron_receive_channel_endpoint_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_send(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        address: *mut sockaddr_storage,
        iov: *mut iovec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_elicit_setup(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_send_sm(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        control_addr: *mut sockaddr_storage,
        stream_id: i32,
        session_id: i32,
        term_id: i32,
        term_offset: i32,
        receiver_window: i32,
        flags: u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_send_nak(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        addr: *mut sockaddr_storage,
        stream_id: i32,
        session_id: i32,
        term_id: i32,
        term_offset: i32,
        length: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_send_rttm(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        addr: *mut sockaddr_storage,
        stream_id: i32,
        session_id: i32,
        echo_timestamp: i64,
        reception_delta: i64,
        is_reply: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_send_response_setup(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        addr: *mut sockaddr_storage,
        stream_id: i32,
        session_id: i32,
        response_session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_dispatch(
        data_paths: *mut aeron_udp_channel_data_paths_t,
        transport: *mut aeron_udp_channel_transport_t,
        receiver_clientd: *mut ::std::os::raw::c_void,
        endpoint_clientd: *mut ::std::os::raw::c_void,
        destination_clientd: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
        media_receive_timestamp: *mut timespec,
    );
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_data(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
        media_receive_timestamp: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_setup(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_rttm(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_unconnected_stream(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        buffer: *mut u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_try_remove_endpoint(
        endpoint: *mut aeron_receive_channel_endpoint_t,
    );
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_incref_to_stream(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_decref_to_stream(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_incref_to_stream_and_session(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_decref_to_stream_and_session(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_incref_to_response_stream(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_decref_to_response_stream(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_add_subscription(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_remove_subscription(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_add_subscription_by_session(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_remove_subscription_by_session(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_add_destination(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_remove_destination(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        channel: *mut aeron_udp_channel_t,
        destination_out: *mut *mut aeron_receive_destination_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_add_publication_image(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        image: *mut aeron_publication_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_on_remove_publication_image(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        image: *mut aeron_publication_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receiver_channel_endpoint_validate_sender_mtu_length(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        sender_mtu_length: usize,
        window_max_length: usize,
        ctx: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_check_for_re_resolution(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        now_ns: i64,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    );
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_update_control_address(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        address: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_add_poll_transports(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        poller: *mut aeron_udp_transport_poller_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_remove_poll_transports(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        poller: *mut aeron_udp_transport_poller_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_add_pending_setup(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        receiver: *mut aeron_driver_receiver_t,
        session_id: i32,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_add_pending_setup_destination(
        endpoint: *mut aeron_receive_channel_endpoint_t,
        receiver: *mut aeron_driver_receiver_t,
        destination: *mut aeron_receive_destination_t,
        session_id: i32,
        stream_id: i32,
    ) -> ::std::os::raw::c_int;
}
pub type aeron_term_gap_scanner_on_gap_detected_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        clientd: *mut ::std::os::raw::c_void,
        term_id: i32,
        term_offset: i32,
        length: usize,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_loss_detector_gap_stct {
    pub term_id: i32,
    pub term_offset: i32,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_loss_detector_gap_stct"]
        [::std::mem::size_of::<aeron_loss_detector_gap_stct>() - 16usize];
    ["Alignment of aeron_loss_detector_gap_stct"]
        [::std::mem::align_of::<aeron_loss_detector_gap_stct>() - 8usize];
    ["Offset of field: aeron_loss_detector_gap_stct::term_id"]
        [::std::mem::offset_of!(aeron_loss_detector_gap_stct, term_id) - 0usize];
    ["Offset of field: aeron_loss_detector_gap_stct::term_offset"]
        [::std::mem::offset_of!(aeron_loss_detector_gap_stct, term_offset) - 4usize];
    ["Offset of field: aeron_loss_detector_gap_stct::length"]
        [::std::mem::offset_of!(aeron_loss_detector_gap_stct, length) - 8usize];
};
pub type aeron_loss_detector_gap_t = aeron_loss_detector_gap_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_loss_detector_stct {
    pub on_gap_detected: aeron_term_gap_scanner_on_gap_detected_func_t,
    pub feedback_delay_state: *mut aeron_feedback_delay_generator_state_t,
    pub on_gap_detected_clientd: *mut ::std::os::raw::c_void,
    pub scanned_gap: aeron_loss_detector_gap_t,
    pub active_gap: aeron_loss_detector_gap_t,
    pub expiry_ns: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_loss_detector_stct"]
        [::std::mem::size_of::<aeron_loss_detector_stct>() - 64usize];
    ["Alignment of aeron_loss_detector_stct"]
        [::std::mem::align_of::<aeron_loss_detector_stct>() - 8usize];
    ["Offset of field: aeron_loss_detector_stct::on_gap_detected"]
        [::std::mem::offset_of!(aeron_loss_detector_stct, on_gap_detected) - 0usize];
    ["Offset of field: aeron_loss_detector_stct::feedback_delay_state"]
        [::std::mem::offset_of!(aeron_loss_detector_stct, feedback_delay_state) - 8usize];
    ["Offset of field: aeron_loss_detector_stct::on_gap_detected_clientd"]
        [::std::mem::offset_of!(aeron_loss_detector_stct, on_gap_detected_clientd) - 16usize];
    ["Offset of field: aeron_loss_detector_stct::scanned_gap"]
        [::std::mem::offset_of!(aeron_loss_detector_stct, scanned_gap) - 24usize];
    ["Offset of field: aeron_loss_detector_stct::active_gap"]
        [::std::mem::offset_of!(aeron_loss_detector_stct, active_gap) - 40usize];
    ["Offset of field: aeron_loss_detector_stct::expiry_ns"]
        [::std::mem::offset_of!(aeron_loss_detector_stct, expiry_ns) - 56usize];
};
pub type aeron_loss_detector_t = aeron_loss_detector_stct;
unsafe extern "C" {
    pub fn aeron_loss_detector_init(
        detector: *mut aeron_loss_detector_t,
        feedback_delay_state: *mut aeron_feedback_delay_generator_state_t,
        on_gap_detected: aeron_term_gap_scanner_on_gap_detected_func_t,
        on_gap_detected_clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_loss_detector_scan(
        detector: *mut aeron_loss_detector_t,
        loss_found: *mut bool,
        buffer: *const u8,
        rebuild_position: i64,
        hwm_position: i64,
        now_ns: i64,
        term_length_mask: usize,
        position_bits_to_shift: usize,
        initial_term_id: i32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn aeron_feedback_delay_state_init(
        state: *mut aeron_feedback_delay_generator_state_t,
        delay_generator: aeron_feedback_delay_generator_func_t,
        delay_ns: i64,
        retry_ns: i64,
        multicast_group_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_loss_detector_nak_multicast_delay_generator(
        state: *mut aeron_feedback_delay_generator_state_t,
        retry: bool,
    ) -> i64;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aeron_loss_reporter_entry_stct {
    pub observation_count: i64,
    pub total_bytes_lost: i64,
    pub first_observation_timestamp: i64,
    pub last_observation_timestamp: i64,
    pub session_id: i32,
    pub stream_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_loss_reporter_entry_stct"]
        [::std::mem::size_of::<aeron_loss_reporter_entry_stct>() - 40usize];
    ["Alignment of aeron_loss_reporter_entry_stct"]
        [::std::mem::align_of::<aeron_loss_reporter_entry_stct>() - 4usize];
    ["Offset of field: aeron_loss_reporter_entry_stct::observation_count"]
        [::std::mem::offset_of!(aeron_loss_reporter_entry_stct, observation_count) - 0usize];
    ["Offset of field: aeron_loss_reporter_entry_stct::total_bytes_lost"]
        [::std::mem::offset_of!(aeron_loss_reporter_entry_stct, total_bytes_lost) - 8usize];
    ["Offset of field: aeron_loss_reporter_entry_stct::first_observation_timestamp"][::std::mem::offset_of!(
        aeron_loss_reporter_entry_stct,
        first_observation_timestamp
    ) - 16usize];
    ["Offset of field: aeron_loss_reporter_entry_stct::last_observation_timestamp"][::std::mem::offset_of!(
        aeron_loss_reporter_entry_stct,
        last_observation_timestamp
    ) - 24usize];
    ["Offset of field: aeron_loss_reporter_entry_stct::session_id"]
        [::std::mem::offset_of!(aeron_loss_reporter_entry_stct, session_id) - 32usize];
    ["Offset of field: aeron_loss_reporter_entry_stct::stream_id"]
        [::std::mem::offset_of!(aeron_loss_reporter_entry_stct, stream_id) - 36usize];
};
pub type aeron_loss_reporter_entry_t = aeron_loss_reporter_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_loss_reporter_stct {
    pub buffer: *mut u8,
    pub next_record_offset: usize,
    pub capacity: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_loss_reporter_stct"]
        [::std::mem::size_of::<aeron_loss_reporter_stct>() - 24usize];
    ["Alignment of aeron_loss_reporter_stct"]
        [::std::mem::align_of::<aeron_loss_reporter_stct>() - 8usize];
    ["Offset of field: aeron_loss_reporter_stct::buffer"]
        [::std::mem::offset_of!(aeron_loss_reporter_stct, buffer) - 0usize];
    ["Offset of field: aeron_loss_reporter_stct::next_record_offset"]
        [::std::mem::offset_of!(aeron_loss_reporter_stct, next_record_offset) - 8usize];
    ["Offset of field: aeron_loss_reporter_stct::capacity"]
        [::std::mem::offset_of!(aeron_loss_reporter_stct, capacity) - 16usize];
};
pub type aeron_loss_reporter_t = aeron_loss_reporter_stct;
pub type aeron_loss_reporter_entry_offset_t = i64;
unsafe extern "C" {
    pub fn aeron_loss_reporter_init(
        reporter: *mut aeron_loss_reporter_t,
        buffer: *mut u8,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_loss_reporter_create_entry(
        reporter: *mut aeron_loss_reporter_t,
        initial_bytes_lost: i64,
        timestamp_ms: i64,
        session_id: i32,
        stream_id: i32,
        channel: *const ::std::os::raw::c_char,
        channel_length: usize,
        source: *const ::std::os::raw::c_char,
        source_length: usize,
    ) -> aeron_loss_reporter_entry_offset_t;
}
unsafe extern "C" {
    pub fn aeron_loss_reporter_record_observation(
        reporter: *mut aeron_loss_reporter_t,
        offset: aeron_loss_reporter_entry_offset_t,
        bytes_lost: i64,
        timestamp_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_loss_reporter_resolve_filename(
        directory: *const ::std::os::raw::c_char,
        filename_buffer: *mut ::std::os::raw::c_char,
        filename_buffer_length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_loss_reporter_read(
        buffer: *const u8,
        capacity: usize,
        entry_func: aeron_loss_reporter_read_entry_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aeron_publication_image_state_enum {
    AERON_PUBLICATION_IMAGE_STATE_ACTIVE = 0,
    AERON_PUBLICATION_IMAGE_STATE_DRAINING = 1,
    AERON_PUBLICATION_IMAGE_STATE_LINGER = 2,
    AERON_PUBLICATION_IMAGE_STATE_DONE = 3,
}
pub use self::aeron_publication_image_state_enum as aeron_publication_image_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_image_connection_stct {
    pub padding_before: [u8; 64usize],
    pub resolved_control_address_for_implicit_unicast_channels: sockaddr_storage,
    pub destination: *mut aeron_receive_destination_t,
    pub control_addr: *mut sockaddr_storage,
    pub is_eos: bool,
    pub time_of_last_activity_ns: i64,
    pub time_of_last_frame_ns: i64,
    pub eos_position: i64,
    pub padding_after: [u8; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_image_connection_stct"]
        [::std::mem::size_of::<aeron_publication_image_connection_stct>() - 304usize];
    ["Alignment of aeron_publication_image_connection_stct"]
        [::std::mem::align_of::<aeron_publication_image_connection_stct>() - 8usize];
    ["Offset of field: aeron_publication_image_connection_stct::padding_before"]
        [::std::mem::offset_of!(aeron_publication_image_connection_stct, padding_before) - 0usize];
    ["Offset of field: aeron_publication_image_connection_stct::resolved_control_address_for_implicit_unicast_channels"] [:: std :: mem :: offset_of ! (aeron_publication_image_connection_stct , resolved_control_address_for_implicit_unicast_channels) - 64usize] ;
    ["Offset of field: aeron_publication_image_connection_stct::destination"]
        [::std::mem::offset_of!(aeron_publication_image_connection_stct, destination) - 192usize];
    ["Offset of field: aeron_publication_image_connection_stct::control_addr"]
        [::std::mem::offset_of!(aeron_publication_image_connection_stct, control_addr) - 200usize];
    ["Offset of field: aeron_publication_image_connection_stct::is_eos"]
        [::std::mem::offset_of!(aeron_publication_image_connection_stct, is_eos) - 208usize];
    ["Offset of field: aeron_publication_image_connection_stct::time_of_last_activity_ns"][::std::mem::offset_of!(
        aeron_publication_image_connection_stct,
        time_of_last_activity_ns
    )
        - 216usize];
    ["Offset of field: aeron_publication_image_connection_stct::time_of_last_frame_ns"][::std::mem::offset_of!(
        aeron_publication_image_connection_stct,
        time_of_last_frame_ns
    )
        - 224usize];
    ["Offset of field: aeron_publication_image_connection_stct::eos_position"]
        [::std::mem::offset_of!(aeron_publication_image_connection_stct, eos_position) - 232usize];
    ["Offset of field: aeron_publication_image_connection_stct::padding_after"]
        [::std::mem::offset_of!(aeron_publication_image_connection_stct, padding_after) - 240usize];
};
pub type aeron_publication_image_connection_t = aeron_publication_image_connection_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_image_stct {
    pub padding_before: [u8; 64usize],
    pub conductor_fields:
        aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct,
    pub padding_after: [u8; 64usize],
    pub connections: aeron_publication_image_stct_image_connection_entries,
    pub source_address: sockaddr_storage,
    pub source_identity_length: usize,
    pub source_identity: [::std::os::raw::c_char; 54usize],
    pub loss_detector: aeron_loss_detector_t,
    pub feedback_delay_state: aeron_feedback_delay_generator_state_t,
    pub mapped_raw_log: aeron_mapped_raw_log_t,
    pub rcv_hwm_position: aeron_position_t,
    pub rcv_pos_position: aeron_position_t,
    pub log_meta_data: *mut aeron_logbuffer_metadata_t,
    pub endpoint: *mut aeron_receive_channel_endpoint_t,
    pub congestion_control: *mut aeron_congestion_control_strategy_t,
    pub nano_clock: aeron_clock_func_t,
    pub epoch_clock: aeron_clock_func_t,
    pub cached_clock: *mut aeron_clock_cache_t,
    pub loss_reporter: *mut aeron_loss_reporter_t,
    pub loss_reporter_offset: aeron_loss_reporter_entry_offset_t,
    pub log_file_name: *mut ::std::os::raw::c_char,
    pub session_id: i32,
    pub stream_id: i32,
    pub initial_term_id: i32,
    pub active_term_id: i32,
    pub term_length: i32,
    pub mtu_length: i32,
    pub term_length_mask: i32,
    pub log_file_name_length: usize,
    pub position_bits_to_shift: usize,
    pub raw_log_close_func: aeron_raw_log_close_func_t,
    pub raw_log_free_func: aeron_raw_log_free_func_t,
    pub log: aeron_publication_image_stct__bindgen_ty_1,
    pub last_loss_change_number: i64,
    pub begin_loss_change: i64,
    pub end_loss_change: i64,
    pub loss_term_id: i32,
    pub loss_term_offset: i32,
    pub loss_length: usize,
    pub begin_sm_change: i64,
    pub end_sm_change: i64,
    pub last_overrun_threshold: i64,
    pub next_sm_position: i64,
    pub next_sm_receiver_window_length: i32,
    pub max_receiver_window_length: i32,
    pub last_sm_change_number: i64,
    pub last_sm_position: i64,
    pub time_of_last_sm_ns: i64,
    pub sm_timeout_ns: i64,
    pub time_of_last_packet_ns: i64,
    pub response_session_id: i64,
    pub is_end_of_stream: bool,
    pub is_sending_eos_sm: bool,
    pub has_receiver_released: bool,
    pub heartbeats_received_counter: *mut i64,
    pub flow_control_under_runs_counter: *mut i64,
    pub flow_control_over_runs_counter: *mut i64,
    pub status_messages_sent_counter: *mut i64,
    pub nak_messages_sent_counter: *mut i64,
    pub loss_gap_fills_counter: *mut i64,
    pub mapped_bytes_counter: *mut i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct {
    pub is_reliable: bool,
    pub state: aeron_publication_image_state_t,
    pub managed_resource: aeron_driver_managed_resource_t,
    pub subscribable: aeron_subscribable_t,
    pub time_of_last_state_change_ns: i64,
    pub liveness_timeout_ns: i64,
    pub untethered_window_limit_timeout_ns: i64,
    pub untethered_resting_timeout_ns: i64,
    pub clean_position: i64,
    pub endpoint: *mut aeron_receive_channel_endpoint_t,
    pub flags: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct"]
        [::std::mem::size_of::<
            aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct,
        >() - 168usize];
    ["Alignment of aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct"]
        [::std::mem::align_of::<
            aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct,
        >() - 8usize];
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::is_reliable"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , is_reliable) - 0usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::state"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , state) - 4usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::managed_resource"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , managed_resource) - 8usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::subscribable"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , subscribable) - 48usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::time_of_last_state_change_ns"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , time_of_last_state_change_ns) - 112usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::liveness_timeout_ns"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , liveness_timeout_ns) - 120usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::untethered_window_limit_timeout_ns"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , untethered_window_limit_timeout_ns) - 128usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::untethered_resting_timeout_ns"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , untethered_resting_timeout_ns) - 136usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::clean_position"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , clean_position) - 144usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::endpoint"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , endpoint) - 152usize] ;
    ["Offset of field: aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct::flags"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct_aeron_publication_image_conductor_fields_stct , flags) - 160usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_image_stct_image_connection_entries {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_publication_image_connection_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_image_stct_image_connection_entries"]
        [::std::mem::size_of::<aeron_publication_image_stct_image_connection_entries>() - 24usize];
    ["Alignment of aeron_publication_image_stct_image_connection_entries"]
        [::std::mem::align_of::<aeron_publication_image_stct_image_connection_entries>() - 8usize];
    ["Offset of field: aeron_publication_image_stct_image_connection_entries::length"][::std::mem::offset_of!(
        aeron_publication_image_stct_image_connection_entries,
        length
    ) - 0usize];
    ["Offset of field: aeron_publication_image_stct_image_connection_entries::capacity"][::std::mem::offset_of!(
        aeron_publication_image_stct_image_connection_entries,
        capacity
    )
        - 8usize];
    ["Offset of field: aeron_publication_image_stct_image_connection_entries::array"][::std::mem::offset_of!(
        aeron_publication_image_stct_image_connection_entries,
        array
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_image_stct__bindgen_ty_1 {
    pub untethered_subscription_state_change: aeron_untethered_subscription_state_change_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_image_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_publication_image_stct__bindgen_ty_1>() - 8usize];
    ["Alignment of aeron_publication_image_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_publication_image_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_publication_image_stct__bindgen_ty_1::untethered_subscription_state_change"] [:: std :: mem :: offset_of ! (aeron_publication_image_stct__bindgen_ty_1 , untethered_subscription_state_change) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_image_stct"]
        [::std::mem::size_of::<aeron_publication_image_stct>() - 1088usize];
    ["Alignment of aeron_publication_image_stct"]
        [::std::mem::align_of::<aeron_publication_image_stct>() - 8usize];
    ["Offset of field: aeron_publication_image_stct::padding_before"]
        [::std::mem::offset_of!(aeron_publication_image_stct, padding_before) - 0usize];
    ["Offset of field: aeron_publication_image_stct::conductor_fields"]
        [::std::mem::offset_of!(aeron_publication_image_stct, conductor_fields) - 64usize];
    ["Offset of field: aeron_publication_image_stct::padding_after"]
        [::std::mem::offset_of!(aeron_publication_image_stct, padding_after) - 232usize];
    ["Offset of field: aeron_publication_image_stct::connections"]
        [::std::mem::offset_of!(aeron_publication_image_stct, connections) - 296usize];
    ["Offset of field: aeron_publication_image_stct::source_address"]
        [::std::mem::offset_of!(aeron_publication_image_stct, source_address) - 320usize];
    ["Offset of field: aeron_publication_image_stct::source_identity_length"]
        [::std::mem::offset_of!(aeron_publication_image_stct, source_identity_length) - 448usize];
    ["Offset of field: aeron_publication_image_stct::source_identity"]
        [::std::mem::offset_of!(aeron_publication_image_stct, source_identity) - 456usize];
    ["Offset of field: aeron_publication_image_stct::loss_detector"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_detector) - 512usize];
    ["Offset of field: aeron_publication_image_stct::feedback_delay_state"]
        [::std::mem::offset_of!(aeron_publication_image_stct, feedback_delay_state) - 576usize];
    ["Offset of field: aeron_publication_image_stct::mapped_raw_log"]
        [::std::mem::offset_of!(aeron_publication_image_stct, mapped_raw_log) - 632usize];
    ["Offset of field: aeron_publication_image_stct::rcv_hwm_position"]
        [::std::mem::offset_of!(aeron_publication_image_stct, rcv_hwm_position) - 720usize];
    ["Offset of field: aeron_publication_image_stct::rcv_pos_position"]
        [::std::mem::offset_of!(aeron_publication_image_stct, rcv_pos_position) - 736usize];
    ["Offset of field: aeron_publication_image_stct::log_meta_data"]
        [::std::mem::offset_of!(aeron_publication_image_stct, log_meta_data) - 752usize];
    ["Offset of field: aeron_publication_image_stct::endpoint"]
        [::std::mem::offset_of!(aeron_publication_image_stct, endpoint) - 760usize];
    ["Offset of field: aeron_publication_image_stct::congestion_control"]
        [::std::mem::offset_of!(aeron_publication_image_stct, congestion_control) - 768usize];
    ["Offset of field: aeron_publication_image_stct::nano_clock"]
        [::std::mem::offset_of!(aeron_publication_image_stct, nano_clock) - 776usize];
    ["Offset of field: aeron_publication_image_stct::epoch_clock"]
        [::std::mem::offset_of!(aeron_publication_image_stct, epoch_clock) - 784usize];
    ["Offset of field: aeron_publication_image_stct::cached_clock"]
        [::std::mem::offset_of!(aeron_publication_image_stct, cached_clock) - 792usize];
    ["Offset of field: aeron_publication_image_stct::loss_reporter"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_reporter) - 800usize];
    ["Offset of field: aeron_publication_image_stct::loss_reporter_offset"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_reporter_offset) - 808usize];
    ["Offset of field: aeron_publication_image_stct::log_file_name"]
        [::std::mem::offset_of!(aeron_publication_image_stct, log_file_name) - 816usize];
    ["Offset of field: aeron_publication_image_stct::session_id"]
        [::std::mem::offset_of!(aeron_publication_image_stct, session_id) - 824usize];
    ["Offset of field: aeron_publication_image_stct::stream_id"]
        [::std::mem::offset_of!(aeron_publication_image_stct, stream_id) - 828usize];
    ["Offset of field: aeron_publication_image_stct::initial_term_id"]
        [::std::mem::offset_of!(aeron_publication_image_stct, initial_term_id) - 832usize];
    ["Offset of field: aeron_publication_image_stct::active_term_id"]
        [::std::mem::offset_of!(aeron_publication_image_stct, active_term_id) - 836usize];
    ["Offset of field: aeron_publication_image_stct::term_length"]
        [::std::mem::offset_of!(aeron_publication_image_stct, term_length) - 840usize];
    ["Offset of field: aeron_publication_image_stct::mtu_length"]
        [::std::mem::offset_of!(aeron_publication_image_stct, mtu_length) - 844usize];
    ["Offset of field: aeron_publication_image_stct::term_length_mask"]
        [::std::mem::offset_of!(aeron_publication_image_stct, term_length_mask) - 848usize];
    ["Offset of field: aeron_publication_image_stct::log_file_name_length"]
        [::std::mem::offset_of!(aeron_publication_image_stct, log_file_name_length) - 856usize];
    ["Offset of field: aeron_publication_image_stct::position_bits_to_shift"]
        [::std::mem::offset_of!(aeron_publication_image_stct, position_bits_to_shift) - 864usize];
    ["Offset of field: aeron_publication_image_stct::raw_log_close_func"]
        [::std::mem::offset_of!(aeron_publication_image_stct, raw_log_close_func) - 872usize];
    ["Offset of field: aeron_publication_image_stct::raw_log_free_func"]
        [::std::mem::offset_of!(aeron_publication_image_stct, raw_log_free_func) - 880usize];
    ["Offset of field: aeron_publication_image_stct::log"]
        [::std::mem::offset_of!(aeron_publication_image_stct, log) - 888usize];
    ["Offset of field: aeron_publication_image_stct::last_loss_change_number"]
        [::std::mem::offset_of!(aeron_publication_image_stct, last_loss_change_number) - 896usize];
    ["Offset of field: aeron_publication_image_stct::begin_loss_change"]
        [::std::mem::offset_of!(aeron_publication_image_stct, begin_loss_change) - 904usize];
    ["Offset of field: aeron_publication_image_stct::end_loss_change"]
        [::std::mem::offset_of!(aeron_publication_image_stct, end_loss_change) - 912usize];
    ["Offset of field: aeron_publication_image_stct::loss_term_id"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_term_id) - 920usize];
    ["Offset of field: aeron_publication_image_stct::loss_term_offset"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_term_offset) - 924usize];
    ["Offset of field: aeron_publication_image_stct::loss_length"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_length) - 928usize];
    ["Offset of field: aeron_publication_image_stct::begin_sm_change"]
        [::std::mem::offset_of!(aeron_publication_image_stct, begin_sm_change) - 936usize];
    ["Offset of field: aeron_publication_image_stct::end_sm_change"]
        [::std::mem::offset_of!(aeron_publication_image_stct, end_sm_change) - 944usize];
    ["Offset of field: aeron_publication_image_stct::last_overrun_threshold"]
        [::std::mem::offset_of!(aeron_publication_image_stct, last_overrun_threshold) - 952usize];
    ["Offset of field: aeron_publication_image_stct::next_sm_position"]
        [::std::mem::offset_of!(aeron_publication_image_stct, next_sm_position) - 960usize];
    ["Offset of field: aeron_publication_image_stct::next_sm_receiver_window_length"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        next_sm_receiver_window_length
    ) - 968usize];
    ["Offset of field: aeron_publication_image_stct::max_receiver_window_length"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        max_receiver_window_length
    ) - 972usize];
    ["Offset of field: aeron_publication_image_stct::last_sm_change_number"]
        [::std::mem::offset_of!(aeron_publication_image_stct, last_sm_change_number) - 976usize];
    ["Offset of field: aeron_publication_image_stct::last_sm_position"]
        [::std::mem::offset_of!(aeron_publication_image_stct, last_sm_position) - 984usize];
    ["Offset of field: aeron_publication_image_stct::time_of_last_sm_ns"]
        [::std::mem::offset_of!(aeron_publication_image_stct, time_of_last_sm_ns) - 992usize];
    ["Offset of field: aeron_publication_image_stct::sm_timeout_ns"]
        [::std::mem::offset_of!(aeron_publication_image_stct, sm_timeout_ns) - 1000usize];
    ["Offset of field: aeron_publication_image_stct::time_of_last_packet_ns"]
        [::std::mem::offset_of!(aeron_publication_image_stct, time_of_last_packet_ns) - 1008usize];
    ["Offset of field: aeron_publication_image_stct::response_session_id"]
        [::std::mem::offset_of!(aeron_publication_image_stct, response_session_id) - 1016usize];
    ["Offset of field: aeron_publication_image_stct::is_end_of_stream"]
        [::std::mem::offset_of!(aeron_publication_image_stct, is_end_of_stream) - 1024usize];
    ["Offset of field: aeron_publication_image_stct::is_sending_eos_sm"]
        [::std::mem::offset_of!(aeron_publication_image_stct, is_sending_eos_sm) - 1025usize];
    ["Offset of field: aeron_publication_image_stct::has_receiver_released"]
        [::std::mem::offset_of!(aeron_publication_image_stct, has_receiver_released) - 1026usize];
    ["Offset of field: aeron_publication_image_stct::heartbeats_received_counter"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        heartbeats_received_counter
    ) - 1032usize];
    ["Offset of field: aeron_publication_image_stct::flow_control_under_runs_counter"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        flow_control_under_runs_counter
    )
        - 1040usize];
    ["Offset of field: aeron_publication_image_stct::flow_control_over_runs_counter"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        flow_control_over_runs_counter
    )
        - 1048usize];
    ["Offset of field: aeron_publication_image_stct::status_messages_sent_counter"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        status_messages_sent_counter
    ) - 1056usize];
    ["Offset of field: aeron_publication_image_stct::nak_messages_sent_counter"][::std::mem::offset_of!(
        aeron_publication_image_stct,
        nak_messages_sent_counter
    ) - 1064usize];
    ["Offset of field: aeron_publication_image_stct::loss_gap_fills_counter"]
        [::std::mem::offset_of!(aeron_publication_image_stct, loss_gap_fills_counter) - 1072usize];
    ["Offset of field: aeron_publication_image_stct::mapped_bytes_counter"]
        [::std::mem::offset_of!(aeron_publication_image_stct, mapped_bytes_counter) - 1080usize];
};
unsafe extern "C" {
    pub fn aeron_publication_image_create(
        image: *mut *mut aeron_publication_image_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        context: *mut aeron_driver_context_t,
        correlation_id: i64,
        session_id: i32,
        stream_id: i32,
        initial_term_id: i32,
        active_term_id: i32,
        initial_term_offset: i32,
        rcv_hwm_position: *mut aeron_position_t,
        rcv_pos_position: *mut aeron_position_t,
        congestion_control: *mut aeron_congestion_control_strategy_t,
        control_address: *mut sockaddr_storage,
        source_address: *mut sockaddr_storage,
        term_buffer_length: i32,
        sender_mtu_length: i32,
        flags: u8,
        loss_reporter: *mut aeron_loss_reporter_t,
        is_reliable: bool,
        is_sparse: bool,
        treat_as_multicast: bool,
        system_counters: *mut aeron_system_counters_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_close(
        counters_manager: *mut aeron_counters_manager_t,
        image: *mut aeron_publication_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_free(image: *mut aeron_publication_image_t) -> bool;
}
unsafe extern "C" {
    pub fn aeron_publication_image_clean_buffer_to(
        image: *mut aeron_publication_image_t,
        position: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_on_gap_detected(
        clientd: *mut ::std::os::raw::c_void,
        term_id: i32,
        term_offset: i32,
        length: usize,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_track_rebuild(
        image: *mut aeron_publication_image_t,
        now_ns: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_insert_packet(
        image: *mut aeron_publication_image_t,
        destination: *mut aeron_receive_destination_t,
        term_id: i32,
        term_offset: i32,
        buffer: *const u8,
        length: usize,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_on_rttm(
        image: *mut aeron_publication_image_t,
        header: *mut aeron_rttm_header_t,
        addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_send_pending_status_message(
        image: *mut aeron_publication_image_t,
        now_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_send_pending_loss(
        image: *mut aeron_publication_image_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_initiate_rttm(
        image: *mut aeron_publication_image_t,
        now_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_add_destination(
        image: *mut aeron_publication_image_t,
        destination: *mut aeron_receive_destination_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_remove_destination(
        image: *mut aeron_publication_image_t,
        channel: *mut aeron_udp_channel_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_publication_image_add_connection_if_unknown(
        image: *mut aeron_publication_image_t,
        destination: *mut aeron_receive_destination_t,
        src_addr: *mut sockaddr_storage,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        image: *mut aeron_publication_image_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_receiver_release(image: *mut aeron_publication_image_t);
}
unsafe extern "C" {
    pub fn aeron_publication_image_remove_response_session_id(
        image: *mut aeron_publication_image_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_deque_stct {
    pub data: *mut u8,
    pub element_count: usize,
    pub element_size: usize,
    pub first_element: usize,
    pub last_element: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_deque_stct"][::std::mem::size_of::<aeron_deque_stct>() - 40usize];
    ["Alignment of aeron_deque_stct"][::std::mem::align_of::<aeron_deque_stct>() - 8usize];
    ["Offset of field: aeron_deque_stct::data"]
        [::std::mem::offset_of!(aeron_deque_stct, data) - 0usize];
    ["Offset of field: aeron_deque_stct::element_count"]
        [::std::mem::offset_of!(aeron_deque_stct, element_count) - 8usize];
    ["Offset of field: aeron_deque_stct::element_size"]
        [::std::mem::offset_of!(aeron_deque_stct, element_size) - 16usize];
    ["Offset of field: aeron_deque_stct::first_element"]
        [::std::mem::offset_of!(aeron_deque_stct, first_element) - 24usize];
    ["Offset of field: aeron_deque_stct::last_element"]
        [::std::mem::offset_of!(aeron_deque_stct, last_element) - 32usize];
};
pub type aeron_deque_t = aeron_deque_stct;
unsafe extern "C" {
    pub fn aeron_deque_init(
        deque: *mut aeron_deque_t,
        initial_element_count: usize,
        element_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_deque_close(deque: *mut aeron_deque_t);
}
unsafe extern "C" {
    #[doc = " Add value into the deque as the last element.  Will memcpy into the deque from the void pointer provided using\n the specified element size.  May need to allocate in order to increase the size of the dequeue.\n\n Errors:\n   ENOMEM if growing the array fails.\n\n @param deque to add the value too.\n @param value value to be added.\n @return 0 on success, -1 on failure."]
    pub fn aeron_deque_add_last(
        deque: *mut aeron_deque_t,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_deque_remove_first(
        deque: *mut aeron_deque_t,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_link_stct {
    pub resource: *mut aeron_driver_managed_resource_t,
    pub registration_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_link_stct"]
        [::std::mem::size_of::<aeron_publication_link_stct>() - 16usize];
    ["Alignment of aeron_publication_link_stct"]
        [::std::mem::align_of::<aeron_publication_link_stct>() - 8usize];
    ["Offset of field: aeron_publication_link_stct::resource"]
        [::std::mem::offset_of!(aeron_publication_link_stct, resource) - 0usize];
    ["Offset of field: aeron_publication_link_stct::registration_id"]
        [::std::mem::offset_of!(aeron_publication_link_stct, registration_id) - 8usize];
};
pub type aeron_publication_link_t = aeron_publication_link_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_counter_link_stct {
    pub counter_id: i32,
    pub registration_id: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_counter_link_stct"][::std::mem::size_of::<aeron_counter_link_stct>() - 16usize];
    ["Alignment of aeron_counter_link_stct"]
        [::std::mem::align_of::<aeron_counter_link_stct>() - 8usize];
    ["Offset of field: aeron_counter_link_stct::counter_id"]
        [::std::mem::offset_of!(aeron_counter_link_stct, counter_id) - 0usize];
    ["Offset of field: aeron_counter_link_stct::registration_id"]
        [::std::mem::offset_of!(aeron_counter_link_stct, registration_id) - 8usize];
};
pub type aeron_counter_link_t = aeron_counter_link_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_client_stct {
    pub reached_end_of_life: bool,
    pub closed_by_command: bool,
    pub client_id: i64,
    pub client_liveness_timeout_ms: i64,
    pub heartbeat_timestamp: aeron_atomic_counter_t,
    pub publication_links: aeron_client_stct_publication_link_stct,
    pub counter_links: aeron_client_stct_counter_link_stct,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_client_stct_publication_link_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_publication_link_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_client_stct_publication_link_stct"]
        [::std::mem::size_of::<aeron_client_stct_publication_link_stct>() - 24usize];
    ["Alignment of aeron_client_stct_publication_link_stct"]
        [::std::mem::align_of::<aeron_client_stct_publication_link_stct>() - 8usize];
    ["Offset of field: aeron_client_stct_publication_link_stct::length"]
        [::std::mem::offset_of!(aeron_client_stct_publication_link_stct, length) - 0usize];
    ["Offset of field: aeron_client_stct_publication_link_stct::capacity"]
        [::std::mem::offset_of!(aeron_client_stct_publication_link_stct, capacity) - 8usize];
    ["Offset of field: aeron_client_stct_publication_link_stct::array"]
        [::std::mem::offset_of!(aeron_client_stct_publication_link_stct, array) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_client_stct_counter_link_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_counter_link_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_client_stct_counter_link_stct"]
        [::std::mem::size_of::<aeron_client_stct_counter_link_stct>() - 24usize];
    ["Alignment of aeron_client_stct_counter_link_stct"]
        [::std::mem::align_of::<aeron_client_stct_counter_link_stct>() - 8usize];
    ["Offset of field: aeron_client_stct_counter_link_stct::length"]
        [::std::mem::offset_of!(aeron_client_stct_counter_link_stct, length) - 0usize];
    ["Offset of field: aeron_client_stct_counter_link_stct::capacity"]
        [::std::mem::offset_of!(aeron_client_stct_counter_link_stct, capacity) - 8usize];
    ["Offset of field: aeron_client_stct_counter_link_stct::array"]
        [::std::mem::offset_of!(aeron_client_stct_counter_link_stct, array) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_client_stct"][::std::mem::size_of::<aeron_client_stct>() - 88usize];
    ["Alignment of aeron_client_stct"][::std::mem::align_of::<aeron_client_stct>() - 8usize];
    ["Offset of field: aeron_client_stct::reached_end_of_life"]
        [::std::mem::offset_of!(aeron_client_stct, reached_end_of_life) - 0usize];
    ["Offset of field: aeron_client_stct::closed_by_command"]
        [::std::mem::offset_of!(aeron_client_stct, closed_by_command) - 1usize];
    ["Offset of field: aeron_client_stct::client_id"]
        [::std::mem::offset_of!(aeron_client_stct, client_id) - 8usize];
    ["Offset of field: aeron_client_stct::client_liveness_timeout_ms"]
        [::std::mem::offset_of!(aeron_client_stct, client_liveness_timeout_ms) - 16usize];
    ["Offset of field: aeron_client_stct::heartbeat_timestamp"]
        [::std::mem::offset_of!(aeron_client_stct, heartbeat_timestamp) - 24usize];
    ["Offset of field: aeron_client_stct::publication_links"]
        [::std::mem::offset_of!(aeron_client_stct, publication_links) - 40usize];
    ["Offset of field: aeron_client_stct::counter_links"]
        [::std::mem::offset_of!(aeron_client_stct, counter_links) - 64usize];
};
pub type aeron_client_t = aeron_client_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscribable_list_entry_stct {
    pub counter_id: i32,
    pub subscribable: *mut aeron_subscribable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscribable_list_entry_stct"]
        [::std::mem::size_of::<aeron_subscribable_list_entry_stct>() - 16usize];
    ["Alignment of aeron_subscribable_list_entry_stct"]
        [::std::mem::align_of::<aeron_subscribable_list_entry_stct>() - 8usize];
    ["Offset of field: aeron_subscribable_list_entry_stct::counter_id"]
        [::std::mem::offset_of!(aeron_subscribable_list_entry_stct, counter_id) - 0usize];
    ["Offset of field: aeron_subscribable_list_entry_stct::subscribable"]
        [::std::mem::offset_of!(aeron_subscribable_list_entry_stct, subscribable) - 8usize];
};
pub type aeron_subscribable_list_entry_t = aeron_subscribable_list_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscription_link_stct {
    pub channel: [::std::os::raw::c_char; 384usize],
    pub is_tether: bool,
    pub is_sparse: bool,
    pub is_reliable: bool,
    pub is_rejoin: bool,
    pub has_session_id: bool,
    pub is_response: bool,
    pub group: aeron_inferable_boolean_t,
    pub stream_id: i32,
    pub session_id: i32,
    pub channel_length: i32,
    pub registration_id: i64,
    pub client_id: i64,
    pub endpoint: *mut aeron_receive_channel_endpoint_t,
    pub spy_channel: *mut aeron_udp_channel_t,
    pub subscribable_list: aeron_subscription_link_stct_subscribable_list_stct,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_subscription_link_stct_subscribable_list_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_subscribable_list_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscription_link_stct_subscribable_list_stct"]
        [::std::mem::size_of::<aeron_subscription_link_stct_subscribable_list_stct>() - 24usize];
    ["Alignment of aeron_subscription_link_stct_subscribable_list_stct"]
        [::std::mem::align_of::<aeron_subscription_link_stct_subscribable_list_stct>() - 8usize];
    ["Offset of field: aeron_subscription_link_stct_subscribable_list_stct::length"][::std::mem::offset_of!(
        aeron_subscription_link_stct_subscribable_list_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_subscription_link_stct_subscribable_list_stct::capacity"][::std::mem::offset_of!(
        aeron_subscription_link_stct_subscribable_list_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_subscription_link_stct_subscribable_list_stct::array"][::std::mem::offset_of!(
        aeron_subscription_link_stct_subscribable_list_stct,
        array
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_subscription_link_stct"]
        [::std::mem::size_of::<aeron_subscription_link_stct>() - 464usize];
    ["Alignment of aeron_subscription_link_stct"]
        [::std::mem::align_of::<aeron_subscription_link_stct>() - 8usize];
    ["Offset of field: aeron_subscription_link_stct::channel"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, channel) - 0usize];
    ["Offset of field: aeron_subscription_link_stct::is_tether"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, is_tether) - 384usize];
    ["Offset of field: aeron_subscription_link_stct::is_sparse"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, is_sparse) - 385usize];
    ["Offset of field: aeron_subscription_link_stct::is_reliable"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, is_reliable) - 386usize];
    ["Offset of field: aeron_subscription_link_stct::is_rejoin"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, is_rejoin) - 387usize];
    ["Offset of field: aeron_subscription_link_stct::has_session_id"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, has_session_id) - 388usize];
    ["Offset of field: aeron_subscription_link_stct::is_response"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, is_response) - 389usize];
    ["Offset of field: aeron_subscription_link_stct::group"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, group) - 392usize];
    ["Offset of field: aeron_subscription_link_stct::stream_id"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, stream_id) - 396usize];
    ["Offset of field: aeron_subscription_link_stct::session_id"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, session_id) - 400usize];
    ["Offset of field: aeron_subscription_link_stct::channel_length"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, channel_length) - 404usize];
    ["Offset of field: aeron_subscription_link_stct::registration_id"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, registration_id) - 408usize];
    ["Offset of field: aeron_subscription_link_stct::client_id"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, client_id) - 416usize];
    ["Offset of field: aeron_subscription_link_stct::endpoint"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, endpoint) - 424usize];
    ["Offset of field: aeron_subscription_link_stct::spy_channel"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, spy_channel) - 432usize];
    ["Offset of field: aeron_subscription_link_stct::subscribable_list"]
        [::std::mem::offset_of!(aeron_subscription_link_stct, subscribable_list) - 440usize];
};
pub type aeron_subscription_link_t = aeron_subscription_link_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_ipc_publication_entry_stct {
    pub publication: *mut aeron_ipc_publication_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_ipc_publication_entry_stct"]
        [::std::mem::size_of::<aeron_ipc_publication_entry_stct>() - 8usize];
    ["Alignment of aeron_ipc_publication_entry_stct"]
        [::std::mem::align_of::<aeron_ipc_publication_entry_stct>() - 8usize];
    ["Offset of field: aeron_ipc_publication_entry_stct::publication"]
        [::std::mem::offset_of!(aeron_ipc_publication_entry_stct, publication) - 0usize];
};
pub type aeron_ipc_publication_entry_t = aeron_ipc_publication_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_network_publication_entry_stct {
    pub publication: *mut aeron_network_publication_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_network_publication_entry_stct"]
        [::std::mem::size_of::<aeron_network_publication_entry_stct>() - 8usize];
    ["Alignment of aeron_network_publication_entry_stct"]
        [::std::mem::align_of::<aeron_network_publication_entry_stct>() - 8usize];
    ["Offset of field: aeron_network_publication_entry_stct::publication"]
        [::std::mem::offset_of!(aeron_network_publication_entry_stct, publication) - 0usize];
};
pub type aeron_network_publication_entry_t = aeron_network_publication_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_send_channel_endpoint_entry_stct {
    pub endpoint: *mut aeron_send_channel_endpoint_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_send_channel_endpoint_entry_stct"]
        [::std::mem::size_of::<aeron_send_channel_endpoint_entry_stct>() - 8usize];
    ["Alignment of aeron_send_channel_endpoint_entry_stct"]
        [::std::mem::align_of::<aeron_send_channel_endpoint_entry_stct>() - 8usize];
    ["Offset of field: aeron_send_channel_endpoint_entry_stct::endpoint"]
        [::std::mem::offset_of!(aeron_send_channel_endpoint_entry_stct, endpoint) - 0usize];
};
pub type aeron_send_channel_endpoint_entry_t = aeron_send_channel_endpoint_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_receive_channel_endpoint_entry_stct {
    pub endpoint: *mut aeron_receive_channel_endpoint_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_receive_channel_endpoint_entry_stct"]
        [::std::mem::size_of::<aeron_receive_channel_endpoint_entry_stct>() - 8usize];
    ["Alignment of aeron_receive_channel_endpoint_entry_stct"]
        [::std::mem::align_of::<aeron_receive_channel_endpoint_entry_stct>() - 8usize];
    ["Offset of field: aeron_receive_channel_endpoint_entry_stct::endpoint"]
        [::std::mem::offset_of!(aeron_receive_channel_endpoint_entry_stct, endpoint) - 0usize];
};
pub type aeron_receive_channel_endpoint_entry_t = aeron_receive_channel_endpoint_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_publication_image_entry_stct {
    pub image: *mut aeron_publication_image_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_publication_image_entry_stct"]
        [::std::mem::size_of::<aeron_publication_image_entry_stct>() - 8usize];
    ["Alignment of aeron_publication_image_entry_stct"]
        [::std::mem::align_of::<aeron_publication_image_entry_stct>() - 8usize];
    ["Offset of field: aeron_publication_image_entry_stct::image"]
        [::std::mem::offset_of!(aeron_publication_image_entry_stct, image) - 0usize];
};
pub type aeron_publication_image_entry_t = aeron_publication_image_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_linger_resource_entry_stct {
    pub has_reached_end_of_life: bool,
    pub buffer: *mut u8,
    pub timeout_ns: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_linger_resource_entry_stct"]
        [::std::mem::size_of::<aeron_linger_resource_entry_stct>() - 24usize];
    ["Alignment of aeron_linger_resource_entry_stct"]
        [::std::mem::align_of::<aeron_linger_resource_entry_stct>() - 8usize];
    ["Offset of field: aeron_linger_resource_entry_stct::has_reached_end_of_life"][::std::mem::offset_of!(
        aeron_linger_resource_entry_stct,
        has_reached_end_of_life
    ) - 0usize];
    ["Offset of field: aeron_linger_resource_entry_stct::buffer"]
        [::std::mem::offset_of!(aeron_linger_resource_entry_stct, buffer) - 8usize];
    ["Offset of field: aeron_linger_resource_entry_stct::timeout_ns"]
        [::std::mem::offset_of!(aeron_linger_resource_entry_stct, timeout_ns) - 16usize];
};
pub type aeron_linger_resource_entry_t = aeron_linger_resource_entry_stct;
pub type aeron_end_of_life_resource_free_t =
    ::std::option::Option<unsafe extern "C" fn(resource: *mut ::std::os::raw::c_void) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_end_of_life_resource_stct {
    pub resource: *mut ::std::os::raw::c_void,
    pub free_func: aeron_end_of_life_resource_free_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_end_of_life_resource_stct"]
        [::std::mem::size_of::<aeron_end_of_life_resource_stct>() - 16usize];
    ["Alignment of aeron_end_of_life_resource_stct"]
        [::std::mem::align_of::<aeron_end_of_life_resource_stct>() - 8usize];
    ["Offset of field: aeron_end_of_life_resource_stct::resource"]
        [::std::mem::offset_of!(aeron_end_of_life_resource_stct, resource) - 0usize];
    ["Offset of field: aeron_end_of_life_resource_stct::free_func"]
        [::std::mem::offset_of!(aeron_end_of_life_resource_stct, free_func) - 8usize];
};
pub type aeron_end_of_life_resource_t = aeron_end_of_life_resource_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct {
    pub context: *mut aeron_driver_context_t,
    pub to_driver_commands: aeron_mpsc_rb_t,
    pub to_clients: aeron_broadcast_transmitter_t,
    pub error_log: aeron_distinct_error_log_t,
    pub counters_manager: aeron_counters_manager_t,
    pub system_counters: aeron_system_counters_t,
    pub conductor_proxy: aeron_driver_conductor_proxy_t,
    pub loss_reporter: aeron_loss_reporter_t,
    pub name_resolver: aeron_name_resolver_t,
    pub executor: aeron_executor_t,
    pub send_channel_endpoint_by_channel_map: aeron_str_to_ptr_hash_map_t,
    pub receive_channel_endpoint_by_channel_map: aeron_str_to_ptr_hash_map_t,
    pub clients: aeron_driver_conductor_stct_client_stct,
    pub ipc_subscriptions: aeron_driver_conductor_stct_ipc_subscriptions_stct,
    pub ipc_publications: aeron_driver_conductor_stct_ipc_publication_stct,
    pub network_subscriptions: aeron_driver_conductor_stct_network_subscriptions_stct,
    pub spy_subscriptions: aeron_driver_conductor_stct_spy_subscriptions_stct,
    pub network_publications: aeron_driver_conductor_stct_network_publication_stct,
    pub send_channel_endpoints: aeron_driver_conductor_stct_send_channel_endpoint_stct,
    pub receive_channel_endpoints: aeron_driver_conductor_stct_receive_channel_endpoint_stct,
    pub publication_images: aeron_driver_conductor_stct_publication_image_stct,
    pub lingering_resources:
        aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct,
    pub end_of_life_queue: aeron_deque_t,
    pub errors_counter: *mut i64,
    pub unblocked_commands_counter: *mut i64,
    pub client_timeouts_counter: *mut i64,
    pub clock_update_deadline_ns: i64,
    pub next_session_id: i32,
    pub publication_reserved_session_id_low: i32,
    pub publication_reserved_session_id_high: i32,
    pub timeout_check_deadline_ns: i64,
    pub time_of_last_to_driver_position_change_ns: i64,
    pub last_command_consumer_position: i64,
    pub async_client_command_in_flight: bool,
    pub padding: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_client_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_client_t,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_client_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_client_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut aeron_driver_conductor_t, arg2: *mut aeron_client_t),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut aeron_driver_conductor_t, arg2: *mut aeron_client_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_client_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_client_stct>() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_client_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_client_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::length"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_client_stct, length) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::capacity"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_client_stct, capacity) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::array"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_client_stct, array) - 16usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::on_time_event"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_client_stct, on_time_event) - 24usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::has_reached_end_of_life"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_client_stct,
        has_reached_end_of_life
    )
        - 32usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::delete_func"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_client_stct, delete_func) - 40usize];
    ["Offset of field: aeron_driver_conductor_stct_client_stct::free_func"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_client_stct, free_func) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_ipc_subscriptions_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_subscription_link_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_ipc_subscriptions_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_ipc_subscriptions_stct>() - 24usize];
    ["Alignment of aeron_driver_conductor_stct_ipc_subscriptions_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_ipc_subscriptions_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_subscriptions_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_subscriptions_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_subscriptions_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_subscriptions_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_subscriptions_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_subscriptions_stct,
        array
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_ipc_publication_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_ipc_publication_entry_t,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_ipc_publication_entry_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_ipc_publication_entry_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_ipc_publication_entry_t,
        ),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_ipc_publication_entry_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_ipc_publication_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_ipc_publication_stct>() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_ipc_publication_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_ipc_publication_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::length"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_ipc_publication_stct, length) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_publication_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::array"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct_ipc_publication_stct, array) - 16usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::on_time_event"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_publication_stct,
        on_time_event
    )
        - 24usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_ipc_publication_stct , has_reached_end_of_life) - 32usize] ;
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::delete_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_publication_stct,
        delete_func
    ) - 40usize];
    ["Offset of field: aeron_driver_conductor_stct_ipc_publication_stct::free_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_ipc_publication_stct,
        free_func
    ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_network_subscriptions_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_subscription_link_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_network_subscriptions_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_network_subscriptions_stct>() - 24usize];
    ["Alignment of aeron_driver_conductor_stct_network_subscriptions_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_network_subscriptions_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_network_subscriptions_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_subscriptions_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_network_subscriptions_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_subscriptions_stct,
        capacity
    )
        - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_network_subscriptions_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_subscriptions_stct,
        array
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_spy_subscriptions_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_subscription_link_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_spy_subscriptions_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_spy_subscriptions_stct>() - 24usize];
    ["Alignment of aeron_driver_conductor_stct_spy_subscriptions_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_spy_subscriptions_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_spy_subscriptions_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_spy_subscriptions_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_spy_subscriptions_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_spy_subscriptions_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_spy_subscriptions_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_spy_subscriptions_stct,
        array
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_network_publication_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_network_publication_entry_t,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_network_publication_entry_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_network_publication_entry_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_network_publication_entry_t,
        ),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_network_publication_entry_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_network_publication_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_network_publication_stct>() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_network_publication_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_network_publication_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_publication_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_publication_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_publication_stct,
        array
    ) - 16usize];
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::on_time_event"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_publication_stct,
        on_time_event
    )
        - 24usize];
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_network_publication_stct , has_reached_end_of_life) - 32usize] ;
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::delete_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_publication_stct,
        delete_func
    )
        - 40usize];
    ["Offset of field: aeron_driver_conductor_stct_network_publication_stct::free_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_network_publication_stct,
        free_func
    )
        - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_send_channel_endpoint_stct {
    pub array: *mut aeron_send_channel_endpoint_entry_t,
    pub length: usize,
    pub capacity: usize,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_send_channel_endpoint_entry_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_send_channel_endpoint_entry_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_send_channel_endpoint_entry_t,
        ),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_send_channel_endpoint_entry_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_send_channel_endpoint_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_send_channel_endpoint_stct>() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_send_channel_endpoint_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_send_channel_endpoint_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_send_channel_endpoint_stct,
        array
    ) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_send_channel_endpoint_stct,
        length
    ) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_send_channel_endpoint_stct,
        capacity
    )
        - 16usize];
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::on_time_event"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_send_channel_endpoint_stct,
        on_time_event
    )
        - 24usize];
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_send_channel_endpoint_stct , has_reached_end_of_life) - 32usize] ;
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::delete_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_send_channel_endpoint_stct,
        delete_func
    )
        - 40usize];
    ["Offset of field: aeron_driver_conductor_stct_send_channel_endpoint_stct::free_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_send_channel_endpoint_stct,
        free_func
    )
        - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_receive_channel_endpoint_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_receive_channel_endpoint_entry_t,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_receive_channel_endpoint_entry_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_receive_channel_endpoint_entry_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_receive_channel_endpoint_entry_t,
        ),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_receive_channel_endpoint_entry_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_receive_channel_endpoint_stct"][::std::mem::size_of::<
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
    >() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_receive_channel_endpoint_stct"][::std::mem::align_of::<
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
    >() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
        length
    )
        - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
        capacity
    )
        - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
        array
    )
        - 16usize];
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::on_time_event"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
        on_time_event
    )
        - 24usize];
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_receive_channel_endpoint_stct , has_reached_end_of_life) - 32usize] ;
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::delete_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
        delete_func
    )
        - 40usize];
    ["Offset of field: aeron_driver_conductor_stct_receive_channel_endpoint_stct::free_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_receive_channel_endpoint_stct,
        free_func
    )
        - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_publication_image_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_publication_image_entry_t,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_publication_image_entry_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_publication_image_entry_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_publication_image_entry_t,
        ),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_publication_image_entry_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_publication_image_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct_publication_image_stct>() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_publication_image_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct_publication_image_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::length"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_publication_image_stct,
        length
    ) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_publication_image_stct,
        capacity
    ) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::array"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_publication_image_stct,
        array
    ) - 16usize];
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::on_time_event"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_publication_image_stct,
        on_time_event
    )
        - 24usize];
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_publication_image_stct , has_reached_end_of_life) - 32usize] ;
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::delete_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_publication_image_stct,
        delete_func
    )
        - 40usize];
    ["Offset of field: aeron_driver_conductor_stct_publication_image_stct::free_func"][::std::mem::offset_of!(
        aeron_driver_conductor_stct_publication_image_stct,
        free_func
    ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct {
    pub length: usize,
    pub capacity: usize,
    pub array: *mut aeron_linger_resource_entry_t,
    pub on_time_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_linger_resource_entry_t,
            arg3: i64,
            arg4: i64,
        ),
    >,
    pub has_reached_end_of_life: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_linger_resource_entry_t,
        ) -> bool,
    >,
    pub delete_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_linger_resource_entry_t,
        ),
    >,
    pub free_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut aeron_driver_conductor_t,
            arg2: *mut aeron_linger_resource_entry_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct"]
        [::std::mem::size_of::<
            aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct,
        >() - 56usize];
    ["Alignment of aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct"]
        [::std::mem::align_of::<
            aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct,
        >() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::length"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , length) - 0usize] ;
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::capacity"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , capacity) - 8usize] ;
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::array"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , array) - 16usize] ;
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::on_time_event"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , on_time_event) - 24usize] ;
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::has_reached_end_of_life"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , has_reached_end_of_life) - 32usize] ;
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::delete_func"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , delete_func) - 40usize] ;
    ["Offset of field: aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct::free_func"] [:: std :: mem :: offset_of ! (aeron_driver_conductor_stct_aeron_driver_conductor_lingering_resources_stct , free_func) - 48usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_conductor_stct"]
        [::std::mem::size_of::<aeron_driver_conductor_stct>() - 1408usize];
    ["Alignment of aeron_driver_conductor_stct"]
        [::std::mem::align_of::<aeron_driver_conductor_stct>() - 8usize];
    ["Offset of field: aeron_driver_conductor_stct::context"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, context) - 0usize];
    ["Offset of field: aeron_driver_conductor_stct::to_driver_commands"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, to_driver_commands) - 8usize];
    ["Offset of field: aeron_driver_conductor_stct::to_clients"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, to_clients) - 40usize];
    ["Offset of field: aeron_driver_conductor_stct::error_log"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, error_log) - 72usize];
    ["Offset of field: aeron_driver_conductor_stct::counters_manager"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, counters_manager) - 176usize];
    ["Offset of field: aeron_driver_conductor_stct::system_counters"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, system_counters) - 256usize];
    ["Offset of field: aeron_driver_conductor_stct::conductor_proxy"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, conductor_proxy) - 272usize];
    ["Offset of field: aeron_driver_conductor_stct::loss_reporter"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, loss_reporter) - 304usize];
    ["Offset of field: aeron_driver_conductor_stct::name_resolver"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, name_resolver) - 328usize];
    ["Offset of field: aeron_driver_conductor_stct::executor"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, executor) - 376usize];
    ["Offset of field: aeron_driver_conductor_stct::send_channel_endpoint_by_channel_map"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        send_channel_endpoint_by_channel_map
    )
        - 664usize];
    ["Offset of field: aeron_driver_conductor_stct::receive_channel_endpoint_by_channel_map"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        receive_channel_endpoint_by_channel_map
    )
        - 712usize];
    ["Offset of field: aeron_driver_conductor_stct::clients"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, clients) - 760usize];
    ["Offset of field: aeron_driver_conductor_stct::ipc_subscriptions"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, ipc_subscriptions) - 816usize];
    ["Offset of field: aeron_driver_conductor_stct::ipc_publications"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, ipc_publications) - 840usize];
    ["Offset of field: aeron_driver_conductor_stct::network_subscriptions"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, network_subscriptions) - 896usize];
    ["Offset of field: aeron_driver_conductor_stct::spy_subscriptions"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, spy_subscriptions) - 920usize];
    ["Offset of field: aeron_driver_conductor_stct::network_publications"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, network_publications) - 944usize];
    ["Offset of field: aeron_driver_conductor_stct::send_channel_endpoints"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, send_channel_endpoints) - 1000usize];
    ["Offset of field: aeron_driver_conductor_stct::receive_channel_endpoints"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        receive_channel_endpoints
    ) - 1056usize];
    ["Offset of field: aeron_driver_conductor_stct::publication_images"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, publication_images) - 1112usize];
    ["Offset of field: aeron_driver_conductor_stct::lingering_resources"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, lingering_resources) - 1168usize];
    ["Offset of field: aeron_driver_conductor_stct::end_of_life_queue"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, end_of_life_queue) - 1224usize];
    ["Offset of field: aeron_driver_conductor_stct::errors_counter"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, errors_counter) - 1264usize];
    ["Offset of field: aeron_driver_conductor_stct::unblocked_commands_counter"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        unblocked_commands_counter
    ) - 1272usize];
    ["Offset of field: aeron_driver_conductor_stct::client_timeouts_counter"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, client_timeouts_counter) - 1280usize];
    ["Offset of field: aeron_driver_conductor_stct::clock_update_deadline_ns"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, clock_update_deadline_ns) - 1288usize];
    ["Offset of field: aeron_driver_conductor_stct::next_session_id"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, next_session_id) - 1296usize];
    ["Offset of field: aeron_driver_conductor_stct::publication_reserved_session_id_low"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        publication_reserved_session_id_low
    )
        - 1300usize];
    ["Offset of field: aeron_driver_conductor_stct::publication_reserved_session_id_high"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        publication_reserved_session_id_high
    )
        - 1304usize];
    ["Offset of field: aeron_driver_conductor_stct::timeout_check_deadline_ns"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        timeout_check_deadline_ns
    ) - 1312usize];
    ["Offset of field: aeron_driver_conductor_stct::time_of_last_to_driver_position_change_ns"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        time_of_last_to_driver_position_change_ns
    )
        - 1320usize];
    ["Offset of field: aeron_driver_conductor_stct::last_command_consumer_position"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        last_command_consumer_position
    ) - 1328usize];
    ["Offset of field: aeron_driver_conductor_stct::async_client_command_in_flight"][::std::mem::offset_of!(
        aeron_driver_conductor_stct,
        async_client_command_in_flight
    ) - 1336usize];
    ["Offset of field: aeron_driver_conductor_stct::padding"]
        [::std::mem::offset_of!(aeron_driver_conductor_stct, padding) - 1337usize];
};
unsafe extern "C" {
    pub fn aeron_client_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        client: *mut aeron_client_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_client_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        client: *mut aeron_client_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_add_end_of_life_resource(
        conductor: *mut aeron_driver_conductor_t,
        resource: *mut ::std::os::raw::c_void,
        free_func: aeron_end_of_life_resource_free_t,
    );
}
unsafe extern "C" {
    pub fn aeron_client_delete(conductor: *mut aeron_driver_conductor_t, arg1: *mut aeron_client_t);
}
unsafe extern "C" {
    pub fn aeron_client_free(arg1: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_entry_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_ipc_publication_entry_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_entry_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_ipc_publication_entry_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_entry_delete(
        conductor: *mut aeron_driver_conductor_t,
        arg1: *mut aeron_ipc_publication_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_ipc_publication_entry_free(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_ipc_publication_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_entry_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_network_publication_entry_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_entry_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_network_publication_entry_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_network_publication_entry_delete(
        conductor: *mut aeron_driver_conductor_t,
        arg1: *mut aeron_network_publication_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_network_publication_entry_free(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_network_publication_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_entry_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_send_channel_endpoint_entry_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_entry_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_send_channel_endpoint_entry_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_send_channel_endpoint_entry_delete(
        conductor: *mut aeron_driver_conductor_t,
        arg1: *mut aeron_send_channel_endpoint_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_entry_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_receive_channel_endpoint_entry_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_entry_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_receive_channel_endpoint_entry_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_receive_channel_endpoint_entry_delete(
        conductor: *mut aeron_driver_conductor_t,
        arg1: *mut aeron_receive_channel_endpoint_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_entry_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_publication_image_entry_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_entry_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_publication_image_entry_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_publication_image_entry_delete(
        conductor: *mut aeron_driver_conductor_t,
        arg1: *mut aeron_publication_image_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_publication_image_entry_free(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_publication_image_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_linger_resource_entry_on_time_event(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_linger_resource_entry_t,
        now_ns: i64,
        now_ms: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_linger_resource_entry_has_reached_end_of_life(
        conductor: *mut aeron_driver_conductor_t,
        entry: *mut aeron_linger_resource_entry_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn aeron_linger_resource_entry_delete(
        conductor: *mut aeron_driver_conductor_t,
        arg1: *mut aeron_linger_resource_entry_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_image_transition_to_linger(
        conductor: *mut aeron_driver_conductor_t,
        image: *mut aeron_publication_image_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_init(
        conductor: *mut aeron_driver_conductor_t,
        context: *mut aeron_driver_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_client_transmit(
        conductor: *mut aeron_driver_conductor_t,
        msg_type_id: i32,
        message: *const ::std::os::raw::c_void,
        length: usize,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_available_image(
        conductor: *mut aeron_driver_conductor_t,
        correlation_id: i64,
        stream_id: i32,
        session_id: i32,
        log_file_name: *const ::std::os::raw::c_char,
        log_file_name_length: usize,
        subscriber_position_id: i32,
        subscriber_registration_id: i64,
        source_identity: *const ::std::os::raw::c_char,
        source_identity_length: usize,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_unavailable_image(
        conductor: *mut aeron_driver_conductor_t,
        correlation_id: i64,
        subscription_registration_id: i64,
        stream_id: i32,
        channel: *const ::std::os::raw::c_char,
        channel_length: usize,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_counter_ready(
        conductor: *mut aeron_driver_conductor_t,
        registration_id: i64,
        counter_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_unavailable_counter(
        conductor: *mut aeron_driver_conductor_t,
        registration_id: i64,
        counter_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_client_timeout(
        conductor: *mut aeron_driver_conductor_t,
        correlation_id: i64,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_static_counter(
        conductor: *mut aeron_driver_conductor_t,
        correlation_id: i64,
        counter_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_cleanup_spies(
        conductor: *mut aeron_driver_conductor_t,
        publication: *mut aeron_network_publication_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_cleanup_network_publication(
        conductor: *mut aeron_driver_conductor_t,
        publication: *mut aeron_network_publication_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_command(
        msg_type_id: i32,
        message: *const ::std::os::raw::c_void,
        length: usize,
        clientd: *mut ::std::os::raw::c_void,
    ) -> aeron_rb_read_action_t;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_do_work(
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_close(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_link_subscribable(
        conductor: *mut aeron_driver_conductor_t,
        link: *mut aeron_subscription_link_t,
        subscribable: *mut aeron_subscribable_t,
        original_registration_id: i64,
        session_id: i32,
        stream_id: i32,
        join_position: i64,
        now_ns: i64,
        source_identity_length: usize,
        source_identity: *const ::std::os::raw::c_char,
        log_file_name_length: usize,
        log_file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_unlink_subscribable(
        link: *mut aeron_subscription_link_t,
        subscribable: *mut aeron_subscribable_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_unlink_all_subscribable(
        conductor: *mut aeron_driver_conductor_t,
        link: *mut aeron_subscription_link_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_ipc_publication(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_publication_command_t,
        is_exclusive: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_network_publication(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_publication_command_t,
        is_exclusive: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_publication(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_remove_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_ipc_subscription(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_subscription_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_spy_subscription(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_subscription_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_network_subscription(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_subscription_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_subscription(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_remove_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_client_keepalive(
        conductor: *mut aeron_driver_conductor_t,
        client_id: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_send_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_send_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_receive_send_destination_by_id(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_by_id_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_receive_ipc_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_receive_spy_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_receive_network_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_receive_ipc_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_receive_spy_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_receive_network_destination(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_destination_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_delete_receive_destination(
        clientd: *mut ::std::os::raw::c_void,
        cmd: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_delete_send_destination(
        clientd: *mut ::std::os::raw::c_void,
        cmd: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_counter(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_counter_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_remove_counter(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_remove_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_add_static_counter(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_static_counter_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_client_close(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_correlated_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_terminate_driver(
        conductor: *mut aeron_driver_conductor_t,
        command: *mut aeron_terminate_driver_command_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_create_publication_image(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_re_resolve_endpoint(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_re_resolve_control(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_receive_endpoint_removed(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_response_setup(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_response_connected(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_on_release_resource(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_find_send_channel_endpoint_by_tag(
        conductor: *mut aeron_driver_conductor_t,
        channel_tag_id: i64,
    ) -> *mut aeron_send_channel_endpoint_t;
}
unsafe extern "C" {
    pub fn aeron_driver_conductor_find_receive_channel_endpoint_by_tag(
        conductor: *mut aeron_driver_conductor_t,
        channel_tag_id: i64,
    ) -> *mut aeron_receive_channel_endpoint_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_channel_transport_entry_stct {
    pub transport: *mut aeron_udp_channel_transport_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_channel_transport_entry_stct"]
        [::std::mem::size_of::<aeron_udp_channel_transport_entry_stct>() - 8usize];
    ["Alignment of aeron_udp_channel_transport_entry_stct"]
        [::std::mem::align_of::<aeron_udp_channel_transport_entry_stct>() - 8usize];
    ["Offset of field: aeron_udp_channel_transport_entry_stct::transport"]
        [::std::mem::offset_of!(aeron_udp_channel_transport_entry_stct, transport) - 0usize];
};
pub type aeron_udp_channel_transport_entry_t = aeron_udp_channel_transport_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_transport_poller_stct {
    pub transports: aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct,
    pub fd: ::std::os::raw::c_int,
    pub bindings_clientd: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct {
    pub array: *mut aeron_udp_channel_transport_entry_t,
    pub length: usize,
    pub capacity: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct"]
        [::std::mem::size_of::<aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct>(
        ) - 24usize];
    ["Alignment of aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct"]
        [::std::mem::align_of::<aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct>(
        ) - 8usize];
    ["Offset of field: aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct::array"][::std::mem::offset_of!(
        aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct,
        array
    )
        - 0usize];
    ["Offset of field: aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct::length"] [:: std :: mem :: offset_of ! (aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct , length) - 8usize] ;
    ["Offset of field: aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct::capacity"] [:: std :: mem :: offset_of ! (aeron_udp_transport_poller_stct_aeron_udp_channel_transports_stct , capacity) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_udp_transport_poller_stct"]
        [::std::mem::size_of::<aeron_udp_transport_poller_stct>() - 40usize];
    ["Alignment of aeron_udp_transport_poller_stct"]
        [::std::mem::align_of::<aeron_udp_transport_poller_stct>() - 8usize];
    ["Offset of field: aeron_udp_transport_poller_stct::transports"]
        [::std::mem::offset_of!(aeron_udp_transport_poller_stct, transports) - 0usize];
    ["Offset of field: aeron_udp_transport_poller_stct::fd"]
        [::std::mem::offset_of!(aeron_udp_transport_poller_stct, fd) - 24usize];
    ["Offset of field: aeron_udp_transport_poller_stct::bindings_clientd"]
        [::std::mem::offset_of!(aeron_udp_transport_poller_stct, bindings_clientd) - 32usize];
};
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_init(
        poller: *mut aeron_udp_transport_poller_t,
        context: *mut aeron_driver_context_t,
        affinity: aeron_udp_channel_transport_affinity_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_close(
        poller: *mut aeron_udp_transport_poller_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_add(
        poller: *mut aeron_udp_transport_poller_t,
        transport: *mut aeron_udp_channel_transport_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_remove(
        poller: *mut aeron_udp_transport_poller_t,
        transport: *mut aeron_udp_channel_transport_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_poll(
        poller: *mut aeron_udp_transport_poller_t,
        msgvec: *mut mmsghdr,
        vlen: usize,
        bytes_rcved: *mut i64,
        recv_func: aeron_udp_transport_recv_func_t,
        recvmmsg_func: aeron_udp_channel_transport_recvmmsg_func_t,
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_check_send_endpoint_re_resolutions(
        poller: *mut aeron_udp_transport_poller_t,
        now_ns: i64,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_udp_transport_poller_check_receive_endpoint_re_resolutions(
        poller: *mut aeron_udp_transport_poller_t,
        now_ns: i64,
        conductor_proxy: *mut aeron_driver_conductor_proxy_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_sender_network_publication_entry_stct {
    pub publication: *mut aeron_network_publication_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_sender_network_publication_entry_stct"]
        [::std::mem::size_of::<aeron_driver_sender_network_publication_entry_stct>() - 8usize];
    ["Alignment of aeron_driver_sender_network_publication_entry_stct"]
        [::std::mem::align_of::<aeron_driver_sender_network_publication_entry_stct>() - 8usize];
    ["Offset of field: aeron_driver_sender_network_publication_entry_stct::publication"][::std::mem::offset_of!(
        aeron_driver_sender_network_publication_entry_stct,
        publication
    )
        - 0usize];
};
pub type aeron_driver_sender_network_publication_entry_t =
    aeron_driver_sender_network_publication_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_sender_stct {
    pub sender_proxy: aeron_driver_sender_proxy_t,
    pub poller: aeron_udp_transport_poller_t,
    pub network_publications:
        aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct,
    pub recv_buffers: aeron_driver_sender_stct_aeron_driver_sender_buffers_stct,
    pub data_paths: aeron_udp_channel_data_paths_t,
    pub total_bytes_sent_counter: *mut i64,
    pub errors_counter: *mut i64,
    pub invalid_frames_counter: *mut i64,
    pub status_messages_received_counter: *mut i64,
    pub nak_messages_received_counter: *mut i64,
    pub resolution_changes_counter: *mut i64,
    pub short_sends_counter: *mut i64,
    pub context: *mut aeron_driver_context_t,
    pub poller_poll_func: aeron_udp_transport_poller_poll_func_t,
    pub recvmmsg_func: aeron_udp_channel_transport_recvmmsg_func_t,
    pub error_log: *mut aeron_distinct_error_log_t,
    pub status_message_read_timeout_ns: i64,
    pub control_poll_timeout_ns: i64,
    pub re_resolution_deadline_ns: i64,
    pub round_robin_index: usize,
    pub duty_cycle_counter: usize,
    pub duty_cycle_ratio: usize,
    pub padding: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct {
    pub array: *mut aeron_driver_sender_network_publication_entry_t,
    pub length: usize,
    pub capacity: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct"]
        [::std::mem::size_of::<
            aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct,
        >() - 24usize];
    ["Alignment of aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct"]
        [::std::mem::align_of::<
            aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct,
        >() - 8usize];
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct::array"] [:: std :: mem :: offset_of ! (aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct , array) - 0usize] ;
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct::length"] [:: std :: mem :: offset_of ! (aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct , length) - 8usize] ;
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct::capacity"] [:: std :: mem :: offset_of ! (aeron_driver_sender_stct_aeron_driver_sender_network_publications_stct , capacity) - 16usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_sender_stct_aeron_driver_sender_buffers_stct {
    pub vector_capacity: usize,
    pub buffers: [*mut u8; 16usize],
    pub iov: [iovec; 16usize],
    pub addrs: [sockaddr_storage; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_sender_stct_aeron_driver_sender_buffers_stct"][::std::mem::size_of::<
        aeron_driver_sender_stct_aeron_driver_sender_buffers_stct,
    >() - 2440usize];
    ["Alignment of aeron_driver_sender_stct_aeron_driver_sender_buffers_stct"][::std::mem::align_of::<
        aeron_driver_sender_stct_aeron_driver_sender_buffers_stct,
    >() - 8usize];
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_buffers_stct::vector_capacity"] [:: std :: mem :: offset_of ! (aeron_driver_sender_stct_aeron_driver_sender_buffers_stct , vector_capacity) - 0usize] ;
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_buffers_stct::buffers"][::std::mem::offset_of!(
        aeron_driver_sender_stct_aeron_driver_sender_buffers_stct,
        buffers
    )
        - 8usize];
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_buffers_stct::iov"][::std::mem::offset_of!(
        aeron_driver_sender_stct_aeron_driver_sender_buffers_stct,
        iov
    )
        - 136usize];
    ["Offset of field: aeron_driver_sender_stct_aeron_driver_sender_buffers_stct::addrs"][::std::mem::offset_of!(
        aeron_driver_sender_stct_aeron_driver_sender_buffers_stct,
        addrs
    )
        - 392usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_sender_stct"]
        [::std::mem::size_of::<aeron_driver_sender_stct>() - 2784usize];
    ["Alignment of aeron_driver_sender_stct"]
        [::std::mem::align_of::<aeron_driver_sender_stct>() - 8usize];
    ["Offset of field: aeron_driver_sender_stct::sender_proxy"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, sender_proxy) - 0usize];
    ["Offset of field: aeron_driver_sender_stct::poller"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, poller) - 48usize];
    ["Offset of field: aeron_driver_sender_stct::network_publications"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, network_publications) - 88usize];
    ["Offset of field: aeron_driver_sender_stct::recv_buffers"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, recv_buffers) - 112usize];
    ["Offset of field: aeron_driver_sender_stct::data_paths"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, data_paths) - 2552usize];
    ["Offset of field: aeron_driver_sender_stct::total_bytes_sent_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, total_bytes_sent_counter) - 2584usize];
    ["Offset of field: aeron_driver_sender_stct::errors_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, errors_counter) - 2592usize];
    ["Offset of field: aeron_driver_sender_stct::invalid_frames_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, invalid_frames_counter) - 2600usize];
    ["Offset of field: aeron_driver_sender_stct::status_messages_received_counter"][::std::mem::offset_of!(
        aeron_driver_sender_stct,
        status_messages_received_counter
    ) - 2608usize];
    ["Offset of field: aeron_driver_sender_stct::nak_messages_received_counter"][::std::mem::offset_of!(
        aeron_driver_sender_stct,
        nak_messages_received_counter
    ) - 2616usize];
    ["Offset of field: aeron_driver_sender_stct::resolution_changes_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, resolution_changes_counter) - 2624usize];
    ["Offset of field: aeron_driver_sender_stct::short_sends_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, short_sends_counter) - 2632usize];
    ["Offset of field: aeron_driver_sender_stct::context"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, context) - 2640usize];
    ["Offset of field: aeron_driver_sender_stct::poller_poll_func"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, poller_poll_func) - 2648usize];
    ["Offset of field: aeron_driver_sender_stct::recvmmsg_func"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, recvmmsg_func) - 2656usize];
    ["Offset of field: aeron_driver_sender_stct::error_log"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, error_log) - 2664usize];
    ["Offset of field: aeron_driver_sender_stct::status_message_read_timeout_ns"][::std::mem::offset_of!(
        aeron_driver_sender_stct,
        status_message_read_timeout_ns
    ) - 2672usize];
    ["Offset of field: aeron_driver_sender_stct::control_poll_timeout_ns"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, control_poll_timeout_ns) - 2680usize];
    ["Offset of field: aeron_driver_sender_stct::re_resolution_deadline_ns"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, re_resolution_deadline_ns) - 2688usize];
    ["Offset of field: aeron_driver_sender_stct::round_robin_index"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, round_robin_index) - 2696usize];
    ["Offset of field: aeron_driver_sender_stct::duty_cycle_counter"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, duty_cycle_counter) - 2704usize];
    ["Offset of field: aeron_driver_sender_stct::duty_cycle_ratio"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, duty_cycle_ratio) - 2712usize];
    ["Offset of field: aeron_driver_sender_stct::padding"]
        [::std::mem::offset_of!(aeron_driver_sender_stct, padding) - 2720usize];
};
unsafe extern "C" {
    pub fn aeron_driver_sender_init(
        sender: *mut aeron_driver_sender_t,
        context: *mut aeron_driver_context_t,
        system_counters: *mut aeron_system_counters_t,
        error_log: *mut aeron_distinct_error_log_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_sender_do_work(
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_close(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_add_endpoint(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_remove_endpoint(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_add_publication(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_remove_publication(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_add_destination(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_remove_destination(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_remove_destination_by_id(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_on_resolution_change(
        clientd: *mut ::std::os::raw::c_void,
        command: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_sender_do_send(
        sender: *mut aeron_driver_sender_t,
        now_ns: i64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_proxy_stct {
    pub receiver: *mut aeron_driver_receiver_t,
    pub threading_mode: aeron_threading_mode_t,
    pub log: aeron_driver_receiver_proxy_stct__bindgen_ty_1,
    pub command_queue: *mut aeron_mpsc_rb_t,
    pub fail_counter: *mut i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_proxy_stct__bindgen_ty_1 {
    pub on_add_endpoint: aeron_on_endpoint_change_func_t,
    pub on_remove_endpoint: aeron_on_endpoint_change_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_proxy_stct__bindgen_ty_1"]
        [::std::mem::size_of::<aeron_driver_receiver_proxy_stct__bindgen_ty_1>() - 16usize];
    ["Alignment of aeron_driver_receiver_proxy_stct__bindgen_ty_1"]
        [::std::mem::align_of::<aeron_driver_receiver_proxy_stct__bindgen_ty_1>() - 8usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct__bindgen_ty_1::on_add_endpoint"][::std::mem::offset_of!(
        aeron_driver_receiver_proxy_stct__bindgen_ty_1,
        on_add_endpoint
    )
        - 0usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct__bindgen_ty_1::on_remove_endpoint"][::std::mem::offset_of!(
        aeron_driver_receiver_proxy_stct__bindgen_ty_1,
        on_remove_endpoint
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_proxy_stct"]
        [::std::mem::size_of::<aeron_driver_receiver_proxy_stct>() - 48usize];
    ["Alignment of aeron_driver_receiver_proxy_stct"]
        [::std::mem::align_of::<aeron_driver_receiver_proxy_stct>() - 8usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct::receiver"]
        [::std::mem::offset_of!(aeron_driver_receiver_proxy_stct, receiver) - 0usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct::threading_mode"]
        [::std::mem::offset_of!(aeron_driver_receiver_proxy_stct, threading_mode) - 8usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct::log"]
        [::std::mem::offset_of!(aeron_driver_receiver_proxy_stct, log) - 16usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct::command_queue"]
        [::std::mem::offset_of!(aeron_driver_receiver_proxy_stct, command_queue) - 32usize];
    ["Offset of field: aeron_driver_receiver_proxy_stct::fail_counter"]
        [::std::mem::offset_of!(aeron_driver_receiver_proxy_stct, fail_counter) - 40usize];
};
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_add_endpoint(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_endpoint(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_subscription_stct {
    pub base: aeron_command_base_t,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub stream_id: i32,
    pub session_id: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_subscription_stct"]
        [::std::mem::size_of::<aeron_command_subscription_stct>() - 32usize];
    ["Alignment of aeron_command_subscription_stct"]
        [::std::mem::align_of::<aeron_command_subscription_stct>() - 8usize];
    ["Offset of field: aeron_command_subscription_stct::base"]
        [::std::mem::offset_of!(aeron_command_subscription_stct, base) - 0usize];
    ["Offset of field: aeron_command_subscription_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_subscription_stct, endpoint) - 16usize];
    ["Offset of field: aeron_command_subscription_stct::stream_id"]
        [::std::mem::offset_of!(aeron_command_subscription_stct, stream_id) - 24usize];
    ["Offset of field: aeron_command_subscription_stct::session_id"]
        [::std::mem::offset_of!(aeron_command_subscription_stct, session_id) - 28usize];
};
pub type aeron_command_subscription_t = aeron_command_subscription_stct;
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_add_subscription(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_subscription(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_add_subscription_by_session(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_request_setup(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_subscription_by_session(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        stream_id: i32,
        session_id: i32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_add_rcv_destination_stct {
    pub base: aeron_command_base_t,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub destination: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_add_rcv_destination_stct"]
        [::std::mem::size_of::<aeron_command_add_rcv_destination_stct>() - 32usize];
    ["Alignment of aeron_command_add_rcv_destination_stct"]
        [::std::mem::align_of::<aeron_command_add_rcv_destination_stct>() - 8usize];
    ["Offset of field: aeron_command_add_rcv_destination_stct::base"]
        [::std::mem::offset_of!(aeron_command_add_rcv_destination_stct, base) - 0usize];
    ["Offset of field: aeron_command_add_rcv_destination_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_add_rcv_destination_stct, endpoint) - 16usize];
    ["Offset of field: aeron_command_add_rcv_destination_stct::destination"]
        [::std::mem::offset_of!(aeron_command_add_rcv_destination_stct, destination) - 24usize];
};
pub type aeron_command_add_rcv_destination_t = aeron_command_add_rcv_destination_stct;
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_add_destination(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_remove_rcv_destination_stct {
    pub base: aeron_command_base_t,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub channel: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_remove_rcv_destination_stct"]
        [::std::mem::size_of::<aeron_command_remove_rcv_destination_stct>() - 32usize];
    ["Alignment of aeron_command_remove_rcv_destination_stct"]
        [::std::mem::align_of::<aeron_command_remove_rcv_destination_stct>() - 8usize];
    ["Offset of field: aeron_command_remove_rcv_destination_stct::base"]
        [::std::mem::offset_of!(aeron_command_remove_rcv_destination_stct, base) - 0usize];
    ["Offset of field: aeron_command_remove_rcv_destination_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_remove_rcv_destination_stct, endpoint) - 16usize];
    ["Offset of field: aeron_command_remove_rcv_destination_stct::channel"]
        [::std::mem::offset_of!(aeron_command_remove_rcv_destination_stct, channel) - 24usize];
};
pub type aeron_command_remove_rcv_destination_t = aeron_command_remove_rcv_destination_stct;
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_destination(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        channel: *mut aeron_udp_channel_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_publication_image_stct {
    pub base: aeron_command_base_t,
    pub image: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_publication_image_stct"]
        [::std::mem::size_of::<aeron_command_publication_image_stct>() - 24usize];
    ["Alignment of aeron_command_publication_image_stct"]
        [::std::mem::align_of::<aeron_command_publication_image_stct>() - 8usize];
    ["Offset of field: aeron_command_publication_image_stct::base"]
        [::std::mem::offset_of!(aeron_command_publication_image_stct, base) - 0usize];
    ["Offset of field: aeron_command_publication_image_stct::image"]
        [::std::mem::offset_of!(aeron_command_publication_image_stct, image) - 16usize];
};
pub type aeron_command_publication_image_t = aeron_command_publication_image_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_on_remove_matching_state_stct {
    pub base: aeron_command_base_t,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub session_id: i32,
    pub stream_id: i32,
    pub state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_on_remove_matching_state_stct"]
        [::std::mem::size_of::<aeron_command_on_remove_matching_state_stct>() - 40usize];
    ["Alignment of aeron_command_on_remove_matching_state_stct"]
        [::std::mem::align_of::<aeron_command_on_remove_matching_state_stct>() - 8usize];
    ["Offset of field: aeron_command_on_remove_matching_state_stct::base"]
        [::std::mem::offset_of!(aeron_command_on_remove_matching_state_stct, base) - 0usize];
    ["Offset of field: aeron_command_on_remove_matching_state_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_on_remove_matching_state_stct, endpoint) - 16usize];
    ["Offset of field: aeron_command_on_remove_matching_state_stct::session_id"]
        [::std::mem::offset_of!(aeron_command_on_remove_matching_state_stct, session_id) - 24usize];
    ["Offset of field: aeron_command_on_remove_matching_state_stct::stream_id"]
        [::std::mem::offset_of!(aeron_command_on_remove_matching_state_stct, stream_id) - 28usize];
    ["Offset of field: aeron_command_on_remove_matching_state_stct::state"]
        [::std::mem::offset_of!(aeron_command_on_remove_matching_state_stct, state) - 32usize];
};
pub type aeron_command_on_remove_matching_state_t = aeron_command_on_remove_matching_state_stct;
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_add_publication_image(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        image: *mut aeron_publication_image_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_publication_image(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        image: *mut aeron_publication_image_t,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_cool_down(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        session_id: i32,
        stream_id: i32,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_remove_init_in_progress(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        session_id: i32,
        stream_id: i32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_command_receiver_resolution_change_stct {
    pub base: aeron_command_base_t,
    pub endpoint_name: *const ::std::os::raw::c_char,
    pub endpoint: *mut ::std::os::raw::c_void,
    pub destination: *mut ::std::os::raw::c_void,
    pub new_addr: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_command_receiver_resolution_change_stct"]
        [::std::mem::size_of::<aeron_command_receiver_resolution_change_stct>() - 168usize];
    ["Alignment of aeron_command_receiver_resolution_change_stct"]
        [::std::mem::align_of::<aeron_command_receiver_resolution_change_stct>() - 8usize];
    ["Offset of field: aeron_command_receiver_resolution_change_stct::base"]
        [::std::mem::offset_of!(aeron_command_receiver_resolution_change_stct, base) - 0usize];
    ["Offset of field: aeron_command_receiver_resolution_change_stct::endpoint_name"][::std::mem::offset_of!(
        aeron_command_receiver_resolution_change_stct,
        endpoint_name
    ) - 16usize];
    ["Offset of field: aeron_command_receiver_resolution_change_stct::endpoint"]
        [::std::mem::offset_of!(aeron_command_receiver_resolution_change_stct, endpoint) - 24usize];
    ["Offset of field: aeron_command_receiver_resolution_change_stct::destination"][::std::mem::offset_of!(
        aeron_command_receiver_resolution_change_stct,
        destination
    ) - 32usize];
    ["Offset of field: aeron_command_receiver_resolution_change_stct::new_addr"]
        [::std::mem::offset_of!(aeron_command_receiver_resolution_change_stct, new_addr) - 40usize];
};
pub type aeron_command_receiver_resolution_change_t = aeron_command_receiver_resolution_change_stct;
unsafe extern "C" {
    pub fn aeron_driver_receiver_proxy_on_resolution_change(
        receiver_proxy: *mut aeron_driver_receiver_proxy_t,
        endpoint_name: *const ::std::os::raw::c_char,
        endpoint: *mut ::std::os::raw::c_void,
        destination: *mut ::std::os::raw::c_void,
        new_addr: *mut sockaddr_storage,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_image_entry_stct {
    pub image: *mut aeron_publication_image_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_image_entry_stct"]
        [::std::mem::size_of::<aeron_driver_receiver_image_entry_stct>() - 8usize];
    ["Alignment of aeron_driver_receiver_image_entry_stct"]
        [::std::mem::align_of::<aeron_driver_receiver_image_entry_stct>() - 8usize];
    ["Offset of field: aeron_driver_receiver_image_entry_stct::image"]
        [::std::mem::offset_of!(aeron_driver_receiver_image_entry_stct, image) - 0usize];
};
pub type aeron_driver_receiver_image_entry_t = aeron_driver_receiver_image_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_pending_setup_entry_stct {
    pub is_periodic: bool,
    pub session_id: i32,
    pub stream_id: i32,
    pub endpoint: *mut aeron_receive_channel_endpoint_t,
    pub destination: *mut aeron_receive_destination_t,
    pub time_of_status_message_ns: i64,
    pub control_addr: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_pending_setup_entry_stct"]
        [::std::mem::size_of::<aeron_driver_receiver_pending_setup_entry_stct>() - 168usize];
    ["Alignment of aeron_driver_receiver_pending_setup_entry_stct"]
        [::std::mem::align_of::<aeron_driver_receiver_pending_setup_entry_stct>() - 8usize];
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::is_periodic"][::std::mem::offset_of!(
        aeron_driver_receiver_pending_setup_entry_stct,
        is_periodic
    ) - 0usize];
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::session_id"][::std::mem::offset_of!(
        aeron_driver_receiver_pending_setup_entry_stct,
        session_id
    ) - 4usize];
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::stream_id"][::std::mem::offset_of!(
        aeron_driver_receiver_pending_setup_entry_stct,
        stream_id
    ) - 8usize];
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::endpoint"][::std::mem::offset_of!(
        aeron_driver_receiver_pending_setup_entry_stct,
        endpoint
    ) - 16usize];
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::destination"][::std::mem::offset_of!(
        aeron_driver_receiver_pending_setup_entry_stct,
        destination
    ) - 24usize];
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::time_of_status_message_ns"] [:: std :: mem :: offset_of ! (aeron_driver_receiver_pending_setup_entry_stct , time_of_status_message_ns) - 32usize] ;
    ["Offset of field: aeron_driver_receiver_pending_setup_entry_stct::control_addr"][::std::mem::offset_of!(
        aeron_driver_receiver_pending_setup_entry_stct,
        control_addr
    ) - 40usize];
};
pub type aeron_driver_receiver_pending_setup_entry_t =
    aeron_driver_receiver_pending_setup_entry_stct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_stct {
    pub receiver_proxy: aeron_driver_receiver_proxy_t,
    pub poller: aeron_udp_transport_poller_t,
    pub recv_buffers: aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct,
    pub images: aeron_driver_receiver_stct_aeron_driver_receiver_images_stct,
    pub pending_setups: aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct,
    pub data_paths: aeron_udp_channel_data_paths_t,
    pub context: *mut aeron_driver_context_t,
    pub poller_poll_func: aeron_udp_transport_poller_poll_func_t,
    pub recvmmsg_func: aeron_udp_channel_transport_recvmmsg_func_t,
    pub error_log: *mut aeron_distinct_error_log_t,
    pub re_resolution_deadline_ns: i64,
    pub errors_counter: *mut i64,
    pub invalid_frames_counter: *mut i64,
    pub total_bytes_received_counter: *mut i64,
    pub resolution_changes_counter: *mut i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct {
    pub vector_capacity: usize,
    pub buffers: [*mut u8; 16usize],
    pub iov: [iovec; 16usize],
    pub addrs: [sockaddr_storage; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct"][::std::mem::size_of::<
        aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct,
    >() - 2440usize];
    ["Alignment of aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct"]
        [::std::mem::align_of::<aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct>()
            - 8usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct::vector_capacity"] [:: std :: mem :: offset_of ! (aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct , vector_capacity) - 0usize] ;
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct::buffers"][::std::mem::offset_of!(
        aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct,
        buffers
    )
        - 8usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct::iov"][::std::mem::offset_of!(
        aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct,
        iov
    )
        - 136usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct::addrs"][::std::mem::offset_of!(
        aeron_driver_receiver_stct_aeron_driver_receiver_buffers_stct,
        addrs
    )
        - 392usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_stct_aeron_driver_receiver_images_stct {
    pub array: *mut aeron_driver_receiver_image_entry_t,
    pub length: usize,
    pub capacity: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_stct_aeron_driver_receiver_images_stct"][::std::mem::size_of::<
        aeron_driver_receiver_stct_aeron_driver_receiver_images_stct,
    >() - 24usize];
    ["Alignment of aeron_driver_receiver_stct_aeron_driver_receiver_images_stct"]
        [::std::mem::align_of::<aeron_driver_receiver_stct_aeron_driver_receiver_images_stct>()
            - 8usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_images_stct::array"][::std::mem::offset_of!(
        aeron_driver_receiver_stct_aeron_driver_receiver_images_stct,
        array
    )
        - 0usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_images_stct::length"][::std::mem::offset_of!(
        aeron_driver_receiver_stct_aeron_driver_receiver_images_stct,
        length
    )
        - 8usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_images_stct::capacity"][::std::mem::offset_of!(
        aeron_driver_receiver_stct_aeron_driver_receiver_images_stct,
        capacity
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct {
    pub array: *mut aeron_driver_receiver_pending_setup_entry_t,
    pub length: usize,
    pub capacity: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct"]
        [::std::mem::size_of::<aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct>(
        ) - 24usize];
    ["Alignment of aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct"]
        [::std::mem::align_of::<
            aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct,
        >() - 8usize];
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct::array"] [:: std :: mem :: offset_of ! (aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct , array) - 0usize] ;
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct::length"] [:: std :: mem :: offset_of ! (aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct , length) - 8usize] ;
    ["Offset of field: aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct::capacity"] [:: std :: mem :: offset_of ! (aeron_driver_receiver_stct_aeron_driver_receiver_pending_setups_stct , capacity) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_receiver_stct"]
        [::std::mem::size_of::<aeron_driver_receiver_stct>() - 2680usize];
    ["Alignment of aeron_driver_receiver_stct"]
        [::std::mem::align_of::<aeron_driver_receiver_stct>() - 8usize];
    ["Offset of field: aeron_driver_receiver_stct::receiver_proxy"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, receiver_proxy) - 0usize];
    ["Offset of field: aeron_driver_receiver_stct::poller"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, poller) - 48usize];
    ["Offset of field: aeron_driver_receiver_stct::recv_buffers"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, recv_buffers) - 88usize];
    ["Offset of field: aeron_driver_receiver_stct::images"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, images) - 2528usize];
    ["Offset of field: aeron_driver_receiver_stct::pending_setups"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, pending_setups) - 2552usize];
    ["Offset of field: aeron_driver_receiver_stct::data_paths"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, data_paths) - 2576usize];
    ["Offset of field: aeron_driver_receiver_stct::context"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, context) - 2608usize];
    ["Offset of field: aeron_driver_receiver_stct::poller_poll_func"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, poller_poll_func) - 2616usize];
    ["Offset of field: aeron_driver_receiver_stct::recvmmsg_func"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, recvmmsg_func) - 2624usize];
    ["Offset of field: aeron_driver_receiver_stct::error_log"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, error_log) - 2632usize];
    ["Offset of field: aeron_driver_receiver_stct::re_resolution_deadline_ns"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, re_resolution_deadline_ns) - 2640usize];
    ["Offset of field: aeron_driver_receiver_stct::errors_counter"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, errors_counter) - 2648usize];
    ["Offset of field: aeron_driver_receiver_stct::invalid_frames_counter"]
        [::std::mem::offset_of!(aeron_driver_receiver_stct, invalid_frames_counter) - 2656usize];
    ["Offset of field: aeron_driver_receiver_stct::total_bytes_received_counter"][::std::mem::offset_of!(
        aeron_driver_receiver_stct,
        total_bytes_received_counter
    ) - 2664usize];
    ["Offset of field: aeron_driver_receiver_stct::resolution_changes_counter"][::std::mem::offset_of!(
        aeron_driver_receiver_stct,
        resolution_changes_counter
    ) - 2672usize];
};
unsafe extern "C" {
    pub fn aeron_driver_receiver_init(
        receiver: *mut aeron_driver_receiver_t,
        context: *mut aeron_driver_context_t,
        system_counters: *mut aeron_system_counters_t,
        error_log: *mut aeron_distinct_error_log_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_do_work(
        clientd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_close(clientd: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_add_endpoint(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_remove_endpoint(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_add_subscription(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_remove_subscription(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_add_subscription_by_session(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_request_setup(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_remove_subscription_by_session(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_add_destination(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_remove_destination(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_add_publication_image(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_remove_publication_image(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_remove_matching_state(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_on_resolution_change(
        clientd: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn aeron_driver_receiver_add_pending_setup(
        receiver: *mut aeron_driver_receiver_t,
        endpoint: *mut aeron_receive_channel_endpoint_t,
        destination: *mut aeron_receive_destination_t,
        session_id: i32,
        stream_id: i32,
        control_addr: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aeron_driver_stct {
    pub context: *mut aeron_driver_context_t,
    pub conductor: aeron_driver_conductor_t,
    pub sender: aeron_driver_sender_t,
    pub receiver: aeron_driver_receiver_t,
    pub runners: [aeron_agent_runner_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aeron_driver_stct"][::std::mem::size_of::<aeron_driver_stct>() - 7120usize];
    ["Alignment of aeron_driver_stct"][::std::mem::align_of::<aeron_driver_stct>() - 8usize];
    ["Offset of field: aeron_driver_stct::context"]
        [::std::mem::offset_of!(aeron_driver_stct, context) - 0usize];
    ["Offset of field: aeron_driver_stct::conductor"]
        [::std::mem::offset_of!(aeron_driver_stct, conductor) - 8usize];
    ["Offset of field: aeron_driver_stct::sender"]
        [::std::mem::offset_of!(aeron_driver_stct, sender) - 1416usize];
    ["Offset of field: aeron_driver_stct::receiver"]
        [::std::mem::offset_of!(aeron_driver_stct, receiver) - 4200usize];
    ["Offset of field: aeron_driver_stct::runners"]
        [::std::mem::offset_of!(aeron_driver_stct, runners) - 6880usize];
};
unsafe extern "C" {
    pub fn aeron_is_driver_active_with_cnc(
        cnc_map: *mut aeron_mapped_file_t,
        timeout_ms: i64,
        now_ms: i64,
        log_func: aeron_log_func_t,
    ) -> bool;
}
